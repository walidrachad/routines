// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ma.fm6education.sga.exchange.jobs;

import routines.Numeric;
import routines.TalendString;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;

import java.util.Date;
import java.util.List;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;


@SuppressWarnings("unused")

/**
 * Job: INSERT_ADHERENT Purpose: INSERT_ADHERENT<br>
 * Description: INSERT_ADHERENT <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class InsertAdherentJob implements TalendJob {

    public static String url;

    public static String fileUrl;

    public static String username;

    public static String password;

    public static String port;

    public static String name;

    public static Integer maxId;

    protected static void logIgnoredError(String message, Throwable cause) {
        System.err.println(message);
        if (cause != null) {
            cause.printStackTrace();
        }

    }


    public final Object obj = new Object();

    // for transmiting parameters purpose
    private Object valueObject = null;

    public Object getValueObject() {
        return this.valueObject;
    }

    public void setValueObject(Object valueObject) {
        this.valueObject = valueObject;
    }

    private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();


    private final static String utf8Charset = "UTF-8";

    //contains type for every context property
    public class PropertiesWithType extends java.util.Properties {
        private static final long serialVersionUID = 1L;
        private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

        public PropertiesWithType(java.util.Properties properties) {
            super(properties);
        }

        public PropertiesWithType() {
            super();
        }

        public void setContextType(String key, String type) {
            propertyTypes.put(key, type);
        }

        public String getContextType(String key) {
            return propertyTypes.get(key);
        }
    }

    // create and load default properties
    private java.util.Properties defaultProps = new java.util.Properties();

    // create application properties with default
    public class ContextProperties extends PropertiesWithType {

        private static final long serialVersionUID = 1L;

        public ContextProperties(java.util.Properties properties) {
            super(properties);
        }

        public ContextProperties() {
            super();
        }

        public void synchronizeContext() {

        }

    }

    protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

    public ContextProperties getContext() {
        return this.context;
    }

    private final String jobVersion = "0.1";
    private final String jobName = "INSERT_ADHERENT";
    private final String projectName = "FM6";
    public Integer errorCode = null;
    private String currentComponent = "";

    private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
    private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

    private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
    private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
    private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
    public final List<String[]> globalBuffer = new java.util.ArrayList<String[]>();


    private RunStat runStat = new RunStat();

    // OSGi DataSource
    private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

    private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

    public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
        java.util.Map<String, TalendDataSource> talendDataSources = new java.util.HashMap<String, TalendDataSource>();
        for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
            talendDataSources.put(dataSourceEntry.getKey(), new TalendDataSource(dataSourceEntry.getValue()));
        }
        globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
        globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
    }


    private final ByteArrayOutputStream baos = new ByteArrayOutputStream();
    private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

    public String getExceptionStackTrace() {
        if ("failure".equals(this.getStatus())) {
            errorMessagePS.flush();
            return baos.toString();
        }
        return null;
    }

    private Exception exception;

    public Exception getException() {
        if ("failure".equals(this.getStatus())) {
            return this.exception;
        }
        return null;
    }

    private class TalendException extends Exception {

        private static final long serialVersionUID = 1L;

        private java.util.Map<String, Object> globalMap = null;
        private Exception e = null;
        private String currentComponent = null;
        private String virtualComponentName = null;

        public void setVirtualComponentName(String virtualComponentName) {
            this.virtualComponentName = virtualComponentName;
        }

        private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
            this.currentComponent = errorComponent;
            this.globalMap = globalMap;
            this.e = e;
        }

        public Exception getException() {
            return this.e;
        }

        public String getCurrentComponent() {
            return this.currentComponent;
        }


        public String getExceptionCauseMessage(Exception e) {
            Throwable cause = e;
            String message = null;
            int i = 10;
            while (null != cause && 0 < i--) {
                message = cause.getMessage();
                if (null == message) {
                    cause = cause.getCause();
                } else {
                    break;
                }
            }
            if (null == message) {
                message = e.getClass().getName();
            }
            return message;
        }

        @Override
        public void printStackTrace() {
            if (!(e instanceof TalendException || e instanceof TDieException)) {
                if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
                    globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
                }
                globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
                System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
            }
            if (!(e instanceof TDieException)) {
                if (e instanceof TalendException) {
                    e.printStackTrace();
                } else {
                    e.printStackTrace();
                    e.printStackTrace(errorMessagePS);
                    InsertAdherentJob.this.exception = e;
                }
            }
            if (!(e instanceof TalendException)) {
                try {
                    for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
                        if (m.getName().compareTo(currentComponent + "_error") == 0) {
                            m.invoke(InsertAdherentJob.this, new Object[]{e, currentComponent, globalMap});
                            break;
                        }
                    }

                    if (!(e instanceof TDieException)) {
                    }
                } catch (Exception e) {
                    this.e.printStackTrace();
                }
            }
        }
    }

    public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        end_Hash.put(errorComponent, System.currentTimeMillis());

        status = "failure";

        tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
    }

    public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

        resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

    }


    public static class to_insertStruct implements IPersistableRow<to_insertStruct> {
        final static byte[] commonByteArrayLock_FM6_INSERT_ADHERENT = new byte[0];
        static byte[] commonByteArray_FM6_INSERT_ADHERENT = new byte[0];
        protected static final int DEFAULT_HASHCODE = 1;
        protected static final int PRIME = 31;
        protected int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        public String loopKey;


        public long ID;

        public long getID() {
            return this.ID;
        }

        public Byte ACTIF;

        public Byte getACTIF() {
            return this.ACTIF;
        }

        public String ADHERENT_SITUATION;

        public String getADHERENT_SITUATION() {
            return this.ADHERENT_SITUATION;
        }

        public String ADHERENT_STATUT;

        public String getADHERENT_STATUT() {
            return this.ADHERENT_STATUT;
        }

        public String ADHERENT_TYPE;

        public String getADHERENT_TYPE() {
            return this.ADHERENT_TYPE;
        }

        public String ADMINISTRATION_ORIGINE;

        public String getADMINISTRATION_ORIGINE() {
            return this.ADMINISTRATION_ORIGINE;
        }

        public String ADRESSE;

        public String getADRESSE() {
            return this.ADRESSE;
        }


        public Double BRUT_ANNUEL;

        public Double getBRUT_ANNUEL() {
            return this.BRUT_ANNUEL;
        }

        public String CNIE;

        public String getCNIE() {
            return this.CNIE;
        }


        public Double COTISATION_ESTIMEE;

        public Double getCOTISATION_ESTIMEE() {
            return this.COTISATION_ESTIMEE;
        }

        public Date DATE_NAISSANCE;

        public Date getDATE_NAISSANCE() {
            return this.DATE_NAISSANCE;
        }

        public Date DATE_RECRUTEMENT;

        public Date getDATE_RECRUTEMENT() {
            return this.DATE_RECRUTEMENT;
        }

        public String GENRE;

        public String getGENRE() {
            return this.GENRE;
        }

        public String IMPUTATION;

        public String getIMPUTATION() {
            return this.IMPUTATION;
        }


        public String MODE_REGLEMENT;

        public String getMODE_REGLEMENT() {
            return this.MODE_REGLEMENT;
        }

        public String MOTIF_RADIATION;

        public String getMOTIF_RADIATION() {
            return this.MOTIF_RADIATION;
        }

        public Double NET_ANNUEL;

        public Double getNET_ANNUEL() {
            return this.NET_ANNUEL;
        }

        public String NOM;

        public String getNOM() {
            return this.NOM;
        }

        public String NUM_ADHERENT;

        public String getNUM_ADHERENT() {
            return this.NUM_ADHERENT;
        }


        public String NUM_PPR;

        public String getNUM_PPR() {
            return this.NUM_PPR;
        }

        public String POINT_INDICE;

        public String getPOINT_INDICE() {
            return this.POINT_INDICE;
        }


        public Long ADHERENT_DETAIL_ID;

        public Long getADHERENT_DETAIL_ID() {
            return this.ADHERENT_DETAIL_ID;
        }


        public Long ECHELLE_REF_ID;

        public Long getECHELLE_REF_ID() {
            return this.ECHELLE_REF_ID;
        }


        public Long FONCTION_REF_ID;

        public Long getFONCTION_REF_ID() {
            return this.FONCTION_REF_ID;
        }

        public Long GRADE_REF_ID;

        public Long getGRADE_REF_ID() {
            return this.GRADE_REF_ID;
        }


        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + (int) this.ID;

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
            final to_insertStruct other = (to_insertStruct) obj;

            if (this.ID != other.ID)
                return false;


            return true;
        }

        public void copyDataTo(to_insertStruct other) {

            other.ID = this.ID;
            other.ACTIF = this.ACTIF;
            other.ADHERENT_SITUATION = this.ADHERENT_SITUATION;
            other.ADHERENT_STATUT = this.ADHERENT_STATUT;
            other.ADHERENT_TYPE = this.ADHERENT_TYPE;
            other.ADMINISTRATION_ORIGINE = this.ADMINISTRATION_ORIGINE;
            other.ADRESSE = this.ADRESSE;
            other.BRUT_ANNUEL = this.BRUT_ANNUEL;
            other.CNIE = this.CNIE;
            other.COTISATION_ESTIMEE = this.COTISATION_ESTIMEE;
            other.DATE_NAISSANCE = this.DATE_NAISSANCE;
            other.DATE_RECRUTEMENT = this.DATE_RECRUTEMENT;
            other.GENRE = this.GENRE;
            other.IMPUTATION = this.IMPUTATION;
            other.MODE_REGLEMENT = this.MODE_REGLEMENT;
            other.MOTIF_RADIATION = this.MOTIF_RADIATION;
            other.NET_ANNUEL = this.NET_ANNUEL;
            other.NOM = this.NOM;
            other.NUM_ADHERENT = this.NUM_ADHERENT;
            other.NUM_PPR = this.NUM_PPR;
            other.POINT_INDICE = this.POINT_INDICE;
            other.ADHERENT_DETAIL_ID = this.ADHERENT_DETAIL_ID;
            other.ECHELLE_REF_ID = this.ECHELLE_REF_ID;
            other.FONCTION_REF_ID = this.FONCTION_REF_ID;
            other.GRADE_REF_ID = this.GRADE_REF_ID;

        }

        public void copyKeysDataTo(to_insertStruct other) {

            other.ID = this.ID;

        }


        private String readString(ObjectInputStream dis) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                if (length > commonByteArray_FM6_INSERT_ADHERENT.length) {
                    if (length < 1024 && commonByteArray_FM6_INSERT_ADHERENT.length == 0) {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[1024];
                    } else {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[2 * length];
                    }
                }
                dis.readFully(commonByteArray_FM6_INSERT_ADHERENT, 0, length);
                strReturn = new String(commonByteArray_FM6_INSERT_ADHERENT, 0, length, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, ObjectOutputStream dos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        private Date readDate(ObjectInputStream dis) throws IOException {
            Date dateReturn = null;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                dateReturn = null;
            } else {
                dateReturn = new Date(dis.readLong());
            }
            return dateReturn;
        }

        private void writeDate(Date date1, ObjectOutputStream dos) throws IOException {
            if (date1 == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeLong(date1.getTime());
            }
        }

        private Integer readInteger(ObjectInputStream dis) throws IOException {
            Integer intReturn;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                intReturn = null;
            } else {
                intReturn = dis.readInt();
            }
            return intReturn;
        }

        private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
            if (intNum == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeInt(intNum);
            }
        }

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock_FM6_INSERT_ADHERENT) {

                try {

                    int length = 0;

                    this.ID = dis.readLong();

                    length = dis.readByte();
                    if (length == -1) {
                        this.ACTIF = null;
                    } else {
                        this.ACTIF = dis.readByte();
                    }

                    this.ADHERENT_SITUATION = readString(dis);

                    this.ADHERENT_STATUT = readString(dis);

                    this.ADHERENT_TYPE = readString(dis);

                    this.ADMINISTRATION_ORIGINE = readString(dis);

                    this.ADRESSE = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.BRUT_ANNUEL = null;
                    } else {
                        this.BRUT_ANNUEL = dis.readDouble();
                    }

                    this.CNIE = readString(dis);
                    length = dis.readByte();
                    if (length == -1) {
                        this.COTISATION_ESTIMEE = null;
                    } else {
                        this.COTISATION_ESTIMEE = dis.readDouble();
                    }


                    this.DATE_NAISSANCE = readDate(dis);

                    this.DATE_RECRUTEMENT = readDate(dis);


                    this.GENRE = readString(dis);

                    this.IMPUTATION = readString(dis);

                    this.MODE_REGLEMENT = readString(dis);

                    this.MOTIF_RADIATION = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.NET_ANNUEL = null;
                    } else {
                        this.NET_ANNUEL = dis.readDouble();
                    }

                    this.NOM = readString(dis);

                    this.NUM_ADHERENT = readString(dis);


                    this.NUM_PPR = readString(dis);


                    this.POINT_INDICE = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.ADHERENT_DETAIL_ID = null;
                    } else {
                        this.ADHERENT_DETAIL_ID = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ECHELLE_REF_ID = null;
                    } else {
                        this.ECHELLE_REF_ID = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.FONCTION_REF_ID = null;
                    } else {
                        this.FONCTION_REF_ID = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.GRADE_REF_ID = null;
                    } else {
                        this.GRADE_REF_ID = dis.readLong();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);


                }


            }


        }

        public void writeData(ObjectOutputStream dos) {
            try {


                // long

                dos.writeLong(this.ID);

                // Byte

                if (this.ACTIF == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeByte(this.ACTIF);
                }

                // String

                writeString(this.ADHERENT_SITUATION, dos);

                // String

                writeString(this.ADHERENT_STATUT, dos);

                // String

                writeString(this.ADHERENT_TYPE, dos);

                // String

                writeString(this.ADMINISTRATION_ORIGINE, dos);

                // String

                writeString(this.ADRESSE, dos);

                // Double

                if (this.BRUT_ANNUEL == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.BRUT_ANNUEL);
                }

                // String

                writeString(this.CNIE, dos);

                // String

                if (this.COTISATION_ESTIMEE == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.COTISATION_ESTIMEE);
                }
                writeDate(this.DATE_NAISSANCE, dos);

                // java.util.Date

                writeDate(this.DATE_RECRUTEMENT, dos);


                writeString(this.GENRE, dos);

                // String

                writeString(this.IMPUTATION, dos);

                // Boolean


                writeString(this.MODE_REGLEMENT, dos);

                // String

                writeString(this.MOTIF_RADIATION, dos);

                if (this.NET_ANNUEL == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.NET_ANNUEL);
                }

                // String

                writeString(this.NOM, dos);


                writeString(this.NUM_ADHERENT, dos);

                // String

                writeString(this.NUM_PPR, dos);

                // String

                writeString(this.POINT_INDICE, dos);

                // Long

                if (this.ADHERENT_DETAIL_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ADHERENT_DETAIL_ID);
                }


                if (this.ECHELLE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ECHELLE_REF_ID);
                }

                // Long

                if (this.FONCTION_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.FONCTION_REF_ID);
                }

                // Long

                if (this.GRADE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.GRADE_REF_ID);
                }


            } catch (IOException e) {
                throw new RuntimeException(e);
            }


        }


        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");
            sb.append("ID=" + String.valueOf(ID));

            sb.append(",ACTIF=" + String.valueOf(ACTIF));
            sb.append(",ADHERENT_SITUATION=" + ADHERENT_SITUATION);
            sb.append(",ADHERENT_STATUT=" + ADHERENT_STATUT);
            sb.append(",ADHERENT_TYPE=" + ADHERENT_TYPE);
            sb.append(",ADMINISTRATION_ORIGINE=" + ADMINISTRATION_ORIGINE);
            sb.append(",ADRESSE=" + ADRESSE);
            sb.append(",BRUT_ANNUEL=" + String.valueOf(BRUT_ANNUEL));
            sb.append(",CNIE=" + CNIE);
            sb.append(",COTISATION_ESTIMEE=" + String.valueOf(COTISATION_ESTIMEE));
            sb.append(",DATE_NAISSANCE=" + String.valueOf(DATE_NAISSANCE));
            sb.append(",DATE_RECRUTEMENT=" + String.valueOf(DATE_RECRUTEMENT));
            sb.append(",GENRE=" + GENRE);
            sb.append(",IMPUTATION=" + IMPUTATION);
            sb.append(",MODE_REGLEMENT=" + MODE_REGLEMENT);
            sb.append(",MOTIF_RADIATION=" + MOTIF_RADIATION);
            sb.append(",NET_ANNUEL=" + String.valueOf(NET_ANNUEL));
            sb.append(",NOM=" + NOM);
            sb.append(",NUM_ADHERENT=" + NUM_ADHERENT);
            sb.append(",NUM_PPR=" + NUM_PPR);
            sb.append(",POINT_INDICE=" + POINT_INDICE);
            sb.append(",ADHERENT_DETAIL_ID=" + String.valueOf(ADHERENT_DETAIL_ID));
            sb.append(",ECHELLE_REF_ID=" + String.valueOf(ECHELLE_REF_ID));
            sb.append(",FONCTION_REF_ID=" + String.valueOf(FONCTION_REF_ID));
            sb.append(",GRADE_REF_ID=" + String.valueOf(GRADE_REF_ID));
            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(to_insertStruct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID, other.ID);
            if (returnValue != 0) {
                return returnValue;
            }


            return returnValue;
        }


        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }


    }

    public static class ad_detailStruct implements IPersistableRow<ad_detailStruct> {
        final static byte[] commonByteArrayLock_FM6_INSERT_ADHERENT = new byte[0];
        static byte[] commonByteArray_FM6_INSERT_ADHERENT = new byte[0];
        protected static final int DEFAULT_HASHCODE = 1;
        protected static final int PRIME = 31;
        protected int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        public String loopKey;


        public long ID;

        public long getID() {
            return this.ID;
        }


        public String AVANCE;

        public String getAVANCE() {
            return this.AVANCE;
        }

        public String BASE_IMPOSABLE;

        public String getBASE_IMPOSABLE() {
            return this.BASE_IMPOSABLE;
        }

        public String CODE_DEPARTEMENT;

        public String getCODE_DEPARTEMENT() {
            return this.CODE_DEPARTEMENT;
        }

        public String CODE_LOCALITE;

        public String getCODE_LOCALITE() {
            return this.CODE_LOCALITE;
        }

        public String CODE_MOTIF;

        public String getCODE_MOTIF() {
            return this.CODE_MOTIF;
        }

        public String CODE_PAYS;

        public String getCODE_PAYS() {
            return this.CODE_PAYS;
        }


        public String CODE_SERVICE;

        public String getCODE_SERVICE() {
            return this.CODE_SERVICE;
        }

        public Date DATE_LIMITE;

        public Date getDATE_LIMITE() {
            return this.DATE_LIMITE;
        }

        public Date DATE_RACHAT;

        public Date getDATE_RACHAT() {
            return this.DATE_RACHAT;
        }


        public Integer ECHELON;

        public Integer getECHELON() {
            return this.ECHELON;
        }


        public String IMPUTATION_STANDARD;

        public String getIMPUTATION_STANDARD() {
            return this.IMPUTATION_STANDARD;
        }

        public String INDICE_DE_PENSION;

        public String getINDICE_DE_PENSION() {
            return this.INDICE_DE_PENSION;
        }

        public String MODE_REGLEMENT;

        public String getMODE_REGLEMENT() {
            return this.MODE_REGLEMENT;
        }

        public Integer NOMBRE_ENFANTS;

        public Integer getNOMBRE_ENFANTS() {
            return this.NOMBRE_ENFANTS;
        }

        public String NUM_AFFILIATIONCNSS;

        public String getNUM_AFFILIATIONCNSS() {
            return this.NUM_AFFILIATIONCNSS;
        }

        public String PENSION;

        public String getPENSION() {
            return this.PENSION;
        }

        public String POINT_INDICE;

        public String getPOINT_INDICE() {
            return this.POINT_INDICE;
        }

        public String POSITION;

        public String getPOSITION() {
            return this.POSITION;
        }

        public String POSITION_EN_CASDE_DETACHEMENT;

        public String getPOSITION_EN_CASDE_DETACHEMENT() {
            return this.POSITION_EN_CASDE_DETACHEMENT;
        }

        public String POST;

        public String getPOST() {
            return this.POST;
        }

        public Double PRIMEDANCIENNETE;

        public Double getPRIMEDANCIENNETE() {
            return this.PRIMEDANCIENNETE;
        }

        public String RESIDENCE;

        public String getRESIDENCE() {
            return this.RESIDENCE;
        }

        public String SAISISSABLE;

        public String getSAISISSABLE() {
            return this.SAISISSABLE;
        }

        public String SITUATION_FAMILIALE;

        public String getSITUATION_FAMILIALE() {
            return this.SITUATION_FAMILIALE;
        }

        public String STATUT;

        public String getSTATUT() {
            return this.STATUT;
        }


        public String ZONE;

        public String getZONE() {
            return this.ZONE;
        }

        public Long ADHERENT_ID;

        public Long getADHERENT_ID() {
            return this.ADHERENT_ID;
        }

        public Double NET_MENSUEL;

        public Double getNET_MENSUEL() {
            return this.NET_MENSUEL;
        }


        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + (int) this.ID;

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
            final ad_detailStruct other = (ad_detailStruct) obj;

            if (this.ID != other.ID)
                return false;


            return true;
        }

        public void copyDataTo(ad_detailStruct other) {

            other.ID = this.ID;
            other.AVANCE = this.AVANCE;
            other.BASE_IMPOSABLE = this.BASE_IMPOSABLE;
            other.CODE_DEPARTEMENT = this.CODE_DEPARTEMENT;
            other.CODE_LOCALITE = this.CODE_LOCALITE;
            other.CODE_MOTIF = this.CODE_MOTIF;
            other.CODE_PAYS = this.CODE_PAYS;
            other.CODE_SERVICE = this.CODE_SERVICE;
            other.DATE_LIMITE = this.DATE_LIMITE;
            other.DATE_RACHAT = this.DATE_RACHAT;
            other.ECHELON = this.ECHELON;
            other.IMPUTATION_STANDARD = this.IMPUTATION_STANDARD;
            other.INDICE_DE_PENSION = this.INDICE_DE_PENSION;
            other.MODE_REGLEMENT = this.MODE_REGLEMENT;
            other.NOMBRE_ENFANTS = this.NOMBRE_ENFANTS;
            other.NUM_AFFILIATIONCNSS = this.NUM_AFFILIATIONCNSS;
            other.PENSION = this.PENSION;
            other.POINT_INDICE = this.POINT_INDICE;
            other.POSITION = this.POSITION;
            other.POSITION_EN_CASDE_DETACHEMENT = this.POSITION_EN_CASDE_DETACHEMENT;
            other.POST = this.POST;
            other.PRIMEDANCIENNETE = this.PRIMEDANCIENNETE;
            other.RESIDENCE = this.RESIDENCE;
            other.SAISISSABLE = this.SAISISSABLE;
            other.SITUATION_FAMILIALE = this.SITUATION_FAMILIALE;
            other.STATUT = this.STATUT;
            other.ZONE = this.ZONE;
            other.ADHERENT_ID = this.ADHERENT_ID;
            other.NET_MENSUEL = this.NET_MENSUEL;

        }

        public void copyKeysDataTo(ad_detailStruct other) {

            other.ID = this.ID;

        }


        private String readString(ObjectInputStream dis) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                if (length > commonByteArray_FM6_INSERT_ADHERENT.length) {
                    if (length < 1024 && commonByteArray_FM6_INSERT_ADHERENT.length == 0) {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[1024];
                    } else {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[2 * length];
                    }
                }
                dis.readFully(commonByteArray_FM6_INSERT_ADHERENT, 0, length);
                strReturn = new String(commonByteArray_FM6_INSERT_ADHERENT, 0, length, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, ObjectOutputStream dos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        private Date readDate(ObjectInputStream dis) throws IOException {
            Date dateReturn = null;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                dateReturn = null;
            } else {
                dateReturn = new Date(dis.readLong());
            }
            return dateReturn;
        }

        private void writeDate(Date date1, ObjectOutputStream dos) throws IOException {
            if (date1 == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeLong(date1.getTime());
            }
        }

        private Integer readInteger(ObjectInputStream dis) throws IOException {
            Integer intReturn;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                intReturn = null;
            } else {
                intReturn = dis.readInt();
            }
            return intReturn;
        }

        private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
            if (intNum == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeInt(intNum);
            }
        }

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock_FM6_INSERT_ADHERENT) {

                try {

                    int length = 0;

                    this.ID = dis.readLong();

                    this.AVANCE = readString(dis);

                    this.BASE_IMPOSABLE = readString(dis);

                    this.CODE_DEPARTEMENT = readString(dis);

                    this.CODE_LOCALITE = readString(dis);

                    this.CODE_MOTIF = readString(dis);

                    this.CODE_PAYS = readString(dis);

                    this.CODE_SERVICE = readString(dis);

                    this.DATE_LIMITE = readDate(dis);

                    this.DATE_RACHAT = readDate(dis);

                    this.ECHELON = readInteger(dis);

                    this.IMPUTATION_STANDARD = readString(dis);

                    this.INDICE_DE_PENSION = readString(dis);

                    this.MODE_REGLEMENT = readString(dis);

                    this.NOMBRE_ENFANTS = readInteger(dis);

                    this.NUM_AFFILIATIONCNSS = readString(dis);

                    this.PENSION = readString(dis);

                    this.POINT_INDICE = readString(dis);

                    this.POSITION = readString(dis);

                    this.POSITION_EN_CASDE_DETACHEMENT = readString(dis);

                    this.POST = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRIMEDANCIENNETE = null;
                    } else {
                        this.PRIMEDANCIENNETE = dis.readDouble();
                    }

                    this.RESIDENCE = readString(dis);

                    this.SAISISSABLE = readString(dis);

                    this.SITUATION_FAMILIALE = readString(dis);

                    this.STATUT = readString(dis);


                    this.ZONE = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.ADHERENT_ID = null;
                    } else {
                        this.ADHERENT_ID = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.NET_MENSUEL = null;
                    } else {
                        this.NET_MENSUEL = dis.readDouble();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);


                }


            }


        }

        public void writeData(ObjectOutputStream dos) {
            try {


                // long

                dos.writeLong(this.ID);

                writeString(this.AVANCE, dos);

                // String

                writeString(this.BASE_IMPOSABLE, dos);

                // Double

                writeString(this.CODE_DEPARTEMENT, dos);

                // String

                writeString(this.CODE_LOCALITE, dos);

                // String

                writeString(this.CODE_MOTIF, dos);


                writeString(this.CODE_PAYS, dos);


                // String

                writeString(this.CODE_SERVICE, dos);


                // java.util.Date

                writeDate(this.DATE_LIMITE, dos);

                // java.util.Date

                writeDate(this.DATE_RACHAT, dos);

                // Integer

                writeInteger(this.ECHELON, dos);

                // String

                writeString(this.IMPUTATION_STANDARD, dos);

                // String

                writeString(this.INDICE_DE_PENSION, dos);

                // String

                writeString(this.MODE_REGLEMENT, dos);

                // Integer

                writeInteger(this.NOMBRE_ENFANTS, dos);

                // String

                writeString(this.NUM_AFFILIATIONCNSS, dos);


                // String

                writeString(this.PENSION, dos);

                // String

                writeString(this.POINT_INDICE, dos);

                // String

                writeString(this.POSITION, dos);

                // String

                writeString(this.POSITION_EN_CASDE_DETACHEMENT, dos);

                // String

                writeString(this.POST, dos);

                // Double

                if (this.PRIMEDANCIENNETE == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.PRIMEDANCIENNETE);
                }

                // String

                writeString(this.RESIDENCE, dos);

                // String

                writeString(this.SAISISSABLE, dos);

                // Double

                writeString(this.SITUATION_FAMILIALE, dos);

                // String

                writeString(this.STATUT, dos);

                // Double
                writeString(this.ZONE, dos);

                // Long

                if (this.ADHERENT_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ADHERENT_ID);
                }


                // String

                if (this.NET_MENSUEL == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.NET_MENSUEL);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }


        }


        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");
            sb.append("ID=" + String.valueOf(ID));
            sb.append(",AVANCE=" + AVANCE);
            sb.append(",BASE_IMPOSABLE=" + BASE_IMPOSABLE);
            sb.append(",CODE_DEPARTEMENT=" + CODE_DEPARTEMENT);
            sb.append(",CODE_LOCALITE=" + CODE_LOCALITE);
            sb.append(",CODE_MOTIF=" + CODE_MOTIF);
            sb.append(",CODE_PAYS=" + CODE_PAYS);
            sb.append(",CODE_SERVICE=" + CODE_SERVICE);
            sb.append(",DATE_LIMITE=" + String.valueOf(DATE_LIMITE));
            sb.append(",DATE_RACHAT=" + String.valueOf(DATE_RACHAT));
            sb.append(",ECHELON=" + String.valueOf(ECHELON));
            sb.append(",IMPUTATION_STANDARD=" + IMPUTATION_STANDARD);
            sb.append(",INDICE_DE_PENSION=" + INDICE_DE_PENSION);
            sb.append(",MODE_REGLEMENT=" + MODE_REGLEMENT);
            sb.append(",NOMBRE_ENFANTS=" + String.valueOf(NOMBRE_ENFANTS));
            sb.append(",NUM_AFFILIATIONCNSS=" + NUM_AFFILIATIONCNSS);
            sb.append(",PENSION=" + PENSION);
            sb.append(",POINT_INDICE=" + POINT_INDICE);
            sb.append(",POSITION=" + POSITION);
            sb.append(",POSITION_EN_CASDE_DETACHEMENT=" + POSITION_EN_CASDE_DETACHEMENT);
            sb.append(",POST=" + POST);
            sb.append(",PRIMEDANCIENNETE=" + String.valueOf(PRIMEDANCIENNETE));
            sb.append(",RESIDENCE=" + RESIDENCE);
            sb.append(",SAISISSABLE=" + SAISISSABLE);
            sb.append(",SITUATION_FAMILIALE=" + SITUATION_FAMILIALE);
            sb.append(",STATUT=" + STATUT);
            sb.append(",ZONE=" + ZONE);
            sb.append(",ADHERENT_ID=" + String.valueOf(ADHERENT_ID));
            sb.append(",NET_MENSUEL=" + String.valueOf(NET_MENSUEL));
            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(ad_detailStruct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID, other.ID);
            if (returnValue != 0) {
                return returnValue;
            }


            return returnValue;
        }


        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }


    }

    public static class row1Struct implements IPersistableRow<row1Struct> {
        final static byte[] commonByteArrayLock_FM6_INSERT_ADHERENT = new byte[0];
        static byte[] commonByteArray_FM6_INSERT_ADHERENT = new byte[0];


        public long ID;

        public long getID() {
            return this.ID;
        }

        public String NUMPPR;

        public String getNUMPPR() {
            return this.NUMPPR;
        }

        public String NOM;

        public String getNOM() {
            return this.NOM;
        }

        public String CNIE;

        public String getCNIE() {
            return this.CNIE;
        }

        public String CODELOCALITE;

        public String getCODELOCALITE() {
            return this.CODELOCALITE;
        }

        public String ADRESSE;

        public String getADRESSE() {
            return this.ADRESSE;
        }

        public String GENRE;

        public String getGENRE() {
            return this.GENRE;
        }

        public String CODEPAYS;

        public String getCODEPAYS() {
            return this.CODEPAYS;
        }

        public Date DATENAISSANCE;

        public Date getDATENAISSANCE() {
            return this.DATENAISSANCE;
        }

        public Date DATERECRUTEMENT;

        public Date getDATERECRUTEMENT() {
            return this.DATERECRUTEMENT;
        }

        public Date DATERACHAT;

        public Date getDATERACHAT() {
            return this.DATERACHAT;
        }

        public Date DATELIMITE;

        public Date getDATELIMITE() {
            return this.DATELIMITE;
        }

        public String CODEMOTIF;

        public String getCODEMOTIF() {
            return this.CODEMOTIF;
        }

        public String MOTIFRADIATION;

        public String getMOTIFRADIATION() {
            return this.MOTIFRADIATION;
        }

        public String IMPUTATION;

        public String getIMPUTATION() {
            return this.IMPUTATION;
        }

        public String RESIDENCE;

        public String getRESIDENCE() {
            return this.RESIDENCE;
        }

        public String POST;

        public String getPOST() {
            return this.POST;
        }

        public String CODESERVICE;

        public String getCODESERVICE() {
            return this.CODESERVICE;
        }

        public String POSITION;

        public String getPOSITION() {
            return this.POSITION;
        }

        public String MODEREGLEMENT;

        public String getMODEREGLEMENT() {
            return this.MODEREGLEMENT;
        }

        public Long NUMCOMPTE;

        public Long getNUMCOMPTE() {
            return this.NUMCOMPTE;
        }

        public String BASEIMPOSABLE;

        public String getBASEIMPOSABLE() {
            return this.BASEIMPOSABLE;
        }

        public String SAISISSABLE;

        public String getSAISISSABLE() {
            return this.SAISISSABLE;
        }

        public Double BRUTANNUEL;

        public Double getBRUTANNUEL() {
            return this.BRUTANNUEL;
        }

        public Double NETANNUEL;

        public Double getNETANNUEL() {
            return this.NETANNUEL;
        }

        public Date DATEEFFETSITUATION;

        public Date getDATEEFFETSITUATION() {
            return this.DATEEFFETSITUATION;
        }

        public String NUM_COLONNE;

        public String getNUM_COLONNE() {
            return this.NUM_COLONNE;
        }

        public String STATUT;

        public String getSTATUT() {
            return this.STATUT;
        }

        public Integer GRADE_REF;

        public Integer getGRADE_REF() {
            return this.GRADE_REF;
        }

        public Integer ECHELON;

        public Integer getECHELON() {
            return this.ECHELON;
        }

        public String POINT_INDICE;

        public String getPOINT_INDICE() {
            return this.POINT_INDICE;
        }

        public String ZONE;

        public String getZONE() {
            return this.ZONE;
        }

        public String FONCTION_REF;

        public String getFONCTION_REF() {
            return this.FONCTION_REF;
        }

        public String POSITION_EN_CAS_DE_DETACHEMENT;

        public String getPOSITION_EN_CAS_DE_DETACHEMENT() {
            return this.POSITION_EN_CAS_DE_DETACHEMENT;
        }

        public String CODE_DEPARTEMENT;

        public String getCODE_DEPARTEMENT() {
            return this.CODE_DEPARTEMENT;
        }

        public String AVANCE;

        public String getAVANCE() {
            return this.AVANCE;
        }

        public Double PRIME_ANCIENNETE;

        public Double getPRIME_ANCIENNETE() {
            return this.PRIME_ANCIENNETE;
        }

        public String PENSION;

        public String getPENSION() {
            return this.PENSION;
        }

        public String GRADE_PENSION;

        public String getGRADE_PENSION() {
            return this.GRADE_PENSION;
        }

        public String ECHELON_PENSION;

        public String getECHELON_PENSION() {
            return this.ECHELON_PENSION;
        }

        public String INDICE_PENSION;

        public String getINDICE_PENSION() {
            return this.INDICE_PENSION;
        }

        public String SITUATION_FAMILIALE;

        public String getSITUATION_FAMILIALE() {
            return this.SITUATION_FAMILIALE;
        }

        public Integer NOMBRE_ENFANT;

        public Integer getNOMBRE_ENFANT() {
            return this.NOMBRE_ENFANT;
        }

        public String DEDUCTIONS;

        public String getDEDUCTIONS() {
            return this.DEDUCTIONS;
        }

        public String CODE_MUTUELLE_SC;

        public String getCODE_MUTUELLE_SC() {
            return this.CODE_MUTUELLE_SC;
        }

        public String TAUX_MUTUELLE_SC;

        public String getTAUX_MUTUELLE_SC() {
            return this.TAUX_MUTUELLE_SC;
        }

        public String CODE_MUTUELLE_SM;

        public String getCODE_MUTUELLE_SM() {
            return this.CODE_MUTUELLE_SM;
        }

        public String TAUX_MUTUELLE_SM;

        public String getTAUX_MUTUELLE_SM() {
            return this.TAUX_MUTUELLE_SM;
        }

        public String ADMINISTRATION_ORIGINE;

        public String getADMINISTRATION_ORIGINE() {
            return this.ADMINISTRATION_ORIGINE;
        }

        public Long ECHANGE_MAJ_FILE_ID;

        public Long getECHANGE_MAJ_FILE_ID() {
            return this.ECHANGE_MAJ_FILE_ID;
        }

        public Long ECHANGE_MAJ_ID;

        public Long getECHANGE_MAJ_ID() {
            return this.ECHANGE_MAJ_ID;
        }


        private String readString(ObjectInputStream dis) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                if (length > commonByteArray_FM6_INSERT_ADHERENT.length) {
                    if (length < 1024 && commonByteArray_FM6_INSERT_ADHERENT.length == 0) {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[1024];
                    } else {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[2 * length];
                    }
                }
                dis.readFully(commonByteArray_FM6_INSERT_ADHERENT, 0, length);
                strReturn = new String(commonByteArray_FM6_INSERT_ADHERENT, 0, length, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, ObjectOutputStream dos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        private Date readDate(ObjectInputStream dis) throws IOException {
            Date dateReturn = null;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                dateReturn = null;
            } else {
                dateReturn = new Date(dis.readLong());
            }
            return dateReturn;
        }

        private void writeDate(Date date1, ObjectOutputStream dos) throws IOException {
            if (date1 == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeLong(date1.getTime());
            }
        }

        private Integer readInteger(ObjectInputStream dis) throws IOException {
            Integer intReturn;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                intReturn = null;
            } else {
                intReturn = dis.readInt();
            }
            return intReturn;
        }

        private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
            if (intNum == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeInt(intNum);
            }
        }

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock_FM6_INSERT_ADHERENT) {

                try {

                    int length = 0;

                    this.ID = dis.readLong();

                    this.NUMPPR = readString(dis);

                    this.NOM = readString(dis);

                    this.CNIE = readString(dis);

                    this.CODELOCALITE = readString(dis);

                    this.ADRESSE = readString(dis);

                    this.GENRE = readString(dis);

                    this.CODEPAYS = readString(dis);

                    this.DATENAISSANCE = readDate(dis);

                    this.DATERECRUTEMENT = readDate(dis);

                    this.DATERACHAT = readDate(dis);

                    this.DATELIMITE = readDate(dis);

                    this.CODEMOTIF = readString(dis);

                    this.MOTIFRADIATION = readString(dis);

                    this.IMPUTATION = readString(dis);

                    this.RESIDENCE = readString(dis);

                    this.POST = readString(dis);

                    this.CODESERVICE = readString(dis);

                    this.POSITION = readString(dis);

                    this.MODEREGLEMENT = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.NUMCOMPTE = null;
                    } else {
                        this.NUMCOMPTE = dis.readLong();
                    }

                    this.BASEIMPOSABLE = readString(dis);

                    this.SAISISSABLE = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.BRUTANNUEL = null;
                    } else {
                        this.BRUTANNUEL = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.NETANNUEL = null;
                    } else {
                        this.NETANNUEL = dis.readDouble();
                    }

                    this.DATEEFFETSITUATION = readDate(dis);

                    this.NUM_COLONNE = readString(dis);

                    this.STATUT = readString(dis);

                    this.GRADE_REF = readInteger(dis);

                    this.ECHELON = readInteger(dis);

                    this.POINT_INDICE = readString(dis);

                    this.ZONE = readString(dis);

                    this.FONCTION_REF = readString(dis);

                    this.POSITION_EN_CAS_DE_DETACHEMENT = readString(dis);

                    this.CODE_DEPARTEMENT = readString(dis);

                    this.AVANCE = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRIME_ANCIENNETE = null;
                    } else {
                        this.PRIME_ANCIENNETE = dis.readDouble();
                    }

                    this.PENSION = readString(dis);

                    this.GRADE_PENSION = readString(dis);

                    this.ECHELON_PENSION = readString(dis);

                    this.INDICE_PENSION = readString(dis);

                    this.SITUATION_FAMILIALE = readString(dis);

                    this.NOMBRE_ENFANT = readInteger(dis);

                    this.DEDUCTIONS = readString(dis);

                    this.CODE_MUTUELLE_SC = readString(dis);

                    this.TAUX_MUTUELLE_SC = readString(dis);

                    this.CODE_MUTUELLE_SM = readString(dis);

                    this.TAUX_MUTUELLE_SM = readString(dis);

                    this.ADMINISTRATION_ORIGINE = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.ECHANGE_MAJ_FILE_ID = null;
                    } else {
                        this.ECHANGE_MAJ_FILE_ID = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ECHANGE_MAJ_ID = null;
                    } else {
                        this.ECHANGE_MAJ_ID = dis.readLong();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);


                }


            }


        }

        public void writeData(ObjectOutputStream dos) {
            try {


                // long

                dos.writeLong(this.ID);

                // String

                writeString(this.NUMPPR, dos);

                // String

                writeString(this.NOM, dos);

                // String

                writeString(this.CNIE, dos);

                // String

                writeString(this.CODELOCALITE, dos);

                // String

                writeString(this.ADRESSE, dos);

                // String

                writeString(this.GENRE, dos);

                // String

                writeString(this.CODEPAYS, dos);

                // java.util.Date

                writeDate(this.DATENAISSANCE, dos);

                // java.util.Date

                writeDate(this.DATERECRUTEMENT, dos);

                // java.util.Date

                writeDate(this.DATERACHAT, dos);

                // java.util.Date

                writeDate(this.DATELIMITE, dos);

                // String

                writeString(this.CODEMOTIF, dos);

                // String

                writeString(this.MOTIFRADIATION, dos);

                // String

                writeString(this.IMPUTATION, dos);

                // String

                writeString(this.RESIDENCE, dos);

                // String

                writeString(this.POST, dos);

                // String

                writeString(this.CODESERVICE, dos);

                // String

                writeString(this.POSITION, dos);

                // String

                writeString(this.MODEREGLEMENT, dos);

                // Long

                if (this.NUMCOMPTE == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.NUMCOMPTE);
                }

                // String

                writeString(this.BASEIMPOSABLE, dos);

                // String

                writeString(this.SAISISSABLE, dos);

                // Double

                if (this.BRUTANNUEL == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.BRUTANNUEL);
                }

                // Double

                if (this.NETANNUEL == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.NETANNUEL);
                }

                // java.util.Date

                writeDate(this.DATEEFFETSITUATION, dos);

                // String

                writeString(this.NUM_COLONNE, dos);

                // String

                writeString(this.STATUT, dos);

                // Integer

                writeInteger(this.GRADE_REF, dos);

                // Integer

                writeInteger(this.ECHELON, dos);

                // String

                writeString(this.POINT_INDICE, dos);

                // String

                writeString(this.ZONE, dos);

                // String

                writeString(this.FONCTION_REF, dos);

                // String

                writeString(this.POSITION_EN_CAS_DE_DETACHEMENT, dos);

                // String

                writeString(this.CODE_DEPARTEMENT, dos);

                // String

                writeString(this.AVANCE, dos);

                // Double

                if (this.PRIME_ANCIENNETE == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.PRIME_ANCIENNETE);
                }

                // String

                writeString(this.PENSION, dos);

                // String

                writeString(this.GRADE_PENSION, dos);

                // String

                writeString(this.ECHELON_PENSION, dos);

                // String

                writeString(this.INDICE_PENSION, dos);

                // String

                writeString(this.SITUATION_FAMILIALE, dos);

                // Integer

                writeInteger(this.NOMBRE_ENFANT, dos);

                // String

                writeString(this.DEDUCTIONS, dos);

                // String

                writeString(this.CODE_MUTUELLE_SC, dos);

                // String

                writeString(this.TAUX_MUTUELLE_SC, dos);

                // String

                writeString(this.CODE_MUTUELLE_SM, dos);

                // String

                writeString(this.TAUX_MUTUELLE_SM, dos);

                // String

                writeString(this.ADMINISTRATION_ORIGINE, dos);

                // Long

                if (this.ECHANGE_MAJ_FILE_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ECHANGE_MAJ_FILE_ID);
                }

                // Long

                if (this.ECHANGE_MAJ_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ECHANGE_MAJ_ID);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }


        }


        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");
            sb.append("ID=" + String.valueOf(ID));
            sb.append(",NUMPPR=" + NUMPPR);
            sb.append(",NOM=" + NOM);
            sb.append(",CNIE=" + CNIE);
            sb.append(",CODELOCALITE=" + CODELOCALITE);
            sb.append(",ADRESSE=" + ADRESSE);
            sb.append(",GENRE=" + GENRE);
            sb.append(",CODEPAYS=" + CODEPAYS);
            sb.append(",DATENAISSANCE=" + String.valueOf(DATENAISSANCE));
            sb.append(",DATERECRUTEMENT=" + String.valueOf(DATERECRUTEMENT));
            sb.append(",DATERACHAT=" + String.valueOf(DATERACHAT));
            sb.append(",DATELIMITE=" + String.valueOf(DATELIMITE));
            sb.append(",CODEMOTIF=" + CODEMOTIF);
            sb.append(",MOTIFRADIATION=" + MOTIFRADIATION);
            sb.append(",IMPUTATION=" + IMPUTATION);
            sb.append(",RESIDENCE=" + RESIDENCE);
            sb.append(",POST=" + POST);
            sb.append(",CODESERVICE=" + CODESERVICE);
            sb.append(",POSITION=" + POSITION);
            sb.append(",MODEREGLEMENT=" + MODEREGLEMENT);
            sb.append(",NUMCOMPTE=" + String.valueOf(NUMCOMPTE));
            sb.append(",BASEIMPOSABLE=" + BASEIMPOSABLE);
            sb.append(",SAISISSABLE=" + SAISISSABLE);
            sb.append(",BRUTANNUEL=" + String.valueOf(BRUTANNUEL));
            sb.append(",NETANNUEL=" + String.valueOf(NETANNUEL));
            sb.append(",DATEEFFETSITUATION=" + String.valueOf(DATEEFFETSITUATION));
            sb.append(",NUM_COLONNE=" + NUM_COLONNE);
            sb.append(",STATUT=" + STATUT);
            sb.append(",GRADE_REF=" + String.valueOf(GRADE_REF));
            sb.append(",ECHELON=" + String.valueOf(ECHELON));
            sb.append(",POINT_INDICE=" + POINT_INDICE);
            sb.append(",ZONE=" + ZONE);
            sb.append(",FONCTION_REF=" + FONCTION_REF);
            sb.append(",POSITION_EN_CAS_DE_DETACHEMENT=" + POSITION_EN_CAS_DE_DETACHEMENT);
            sb.append(",CODE_DEPARTEMENT=" + CODE_DEPARTEMENT);
            sb.append(",AVANCE=" + AVANCE);
            sb.append(",PRIME_ANCIENNETE=" + String.valueOf(PRIME_ANCIENNETE));
            sb.append(",PENSION=" + PENSION);
            sb.append(",GRADE_PENSION=" + GRADE_PENSION);
            sb.append(",ECHELON_PENSION=" + ECHELON_PENSION);
            sb.append(",INDICE_PENSION=" + INDICE_PENSION);
            sb.append(",SITUATION_FAMILIALE=" + SITUATION_FAMILIALE);
            sb.append(",NOMBRE_ENFANT=" + String.valueOf(NOMBRE_ENFANT));
            sb.append(",DEDUCTIONS=" + DEDUCTIONS);
            sb.append(",CODE_MUTUELLE_SC=" + CODE_MUTUELLE_SC);
            sb.append(",TAUX_MUTUELLE_SC=" + TAUX_MUTUELLE_SC);
            sb.append(",CODE_MUTUELLE_SM=" + CODE_MUTUELLE_SM);
            sb.append(",TAUX_MUTUELLE_SM=" + TAUX_MUTUELLE_SM);
            sb.append(",ADMINISTRATION_ORIGINE=" + ADMINISTRATION_ORIGINE);
            sb.append(",ECHANGE_MAJ_FILE_ID=" + String.valueOf(ECHANGE_MAJ_FILE_ID));
            sb.append(",ECHANGE_MAJ_ID=" + String.valueOf(ECHANGE_MAJ_ID));
            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row1Struct other) {

            int returnValue = -1;

            return returnValue;
        }


        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }


    }

    public static class after_tDBInput_1Struct implements IPersistableRow<after_tDBInput_1Struct> {
        final static byte[] commonByteArrayLock_FM6_INSERT_ADHERENT = new byte[0];
        static byte[] commonByteArray_FM6_INSERT_ADHERENT = new byte[0];
        protected static final int DEFAULT_HASHCODE = 1;
        protected static final int PRIME = 31;
        protected int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        public String loopKey;


        public long ID;

        public long getID() {
            return this.ID;
        }

        public String NUMPPR;

        public String getNUMPPR() {
            return this.NUMPPR;
        }

        public String NOM;

        public String getNOM() {
            return this.NOM;
        }

        public String CNIE;

        public String getCNIE() {
            return this.CNIE;
        }

        public String CODELOCALITE;

        public String getCODELOCALITE() {
            return this.CODELOCALITE;
        }

        public String ADRESSE;

        public String getADRESSE() {
            return this.ADRESSE;
        }

        public String GENRE;

        public String getGENRE() {
            return this.GENRE;
        }

        public String CODEPAYS;

        public String getCODEPAYS() {
            return this.CODEPAYS;
        }

        public Date DATENAISSANCE;

        public Date getDATENAISSANCE() {
            return this.DATENAISSANCE;
        }

        public Date DATERECRUTEMENT;

        public Date getDATERECRUTEMENT() {
            return this.DATERECRUTEMENT;
        }

        public Date DATERACHAT;

        public Date getDATERACHAT() {
            return this.DATERACHAT;
        }

        public Date DATELIMITE;

        public Date getDATELIMITE() {
            return this.DATELIMITE;
        }

        public String CODEMOTIF;

        public String getCODEMOTIF() {
            return this.CODEMOTIF;
        }

        public String MOTIFRADIATION;

        public String getMOTIFRADIATION() {
            return this.MOTIFRADIATION;
        }

        public String IMPUTATION;

        public String getIMPUTATION() {
            return this.IMPUTATION;
        }

        public String RESIDENCE;

        public String getRESIDENCE() {
            return this.RESIDENCE;
        }

        public String POST;

        public String getPOST() {
            return this.POST;
        }

        public String CODESERVICE;

        public String getCODESERVICE() {
            return this.CODESERVICE;
        }

        public String POSITION;

        public String getPOSITION() {
            return this.POSITION;
        }

        public String MODEREGLEMENT;

        public String getMODEREGLEMENT() {
            return this.MODEREGLEMENT;
        }

        public Long NUMCOMPTE;

        public Long getNUMCOMPTE() {
            return this.NUMCOMPTE;
        }

        public String BASEIMPOSABLE;

        public String getBASEIMPOSABLE() {
            return this.BASEIMPOSABLE;
        }

        public String SAISISSABLE;

        public String getSAISISSABLE() {
            return this.SAISISSABLE;
        }

        public Double BRUTANNUEL;

        public Double getBRUTANNUEL() {
            return this.BRUTANNUEL;
        }

        public Double NETANNUEL;

        public Double getNETANNUEL() {
            return this.NETANNUEL;
        }

        public Date DATEEFFETSITUATION;

        public Date getDATEEFFETSITUATION() {
            return this.DATEEFFETSITUATION;
        }

        public String NUM_COLONNE;

        public String getNUM_COLONNE() {
            return this.NUM_COLONNE;
        }

        public String STATUT;

        public String getSTATUT() {
            return this.STATUT;
        }

        public Integer GRADE_REF;

        public Integer getGRADE_REF() {
            return this.GRADE_REF;
        }

        public Integer ECHELON;

        public Integer getECHELON() {
            return this.ECHELON;
        }

        public String POINT_INDICE;

        public String getPOINT_INDICE() {
            return this.POINT_INDICE;
        }

        public String ZONE;

        public String getZONE() {
            return this.ZONE;
        }

        public String FONCTION_REF;

        public String getFONCTION_REF() {
            return this.FONCTION_REF;
        }

        public String POSITION_EN_CAS_DE_DETACHEMENT;

        public String getPOSITION_EN_CAS_DE_DETACHEMENT() {
            return this.POSITION_EN_CAS_DE_DETACHEMENT;
        }

        public String CODE_DEPARTEMENT;

        public String getCODE_DEPARTEMENT() {
            return this.CODE_DEPARTEMENT;
        }

        public String AVANCE;

        public String getAVANCE() {
            return this.AVANCE;
        }

        public Double PRIME_ANCIENNETE;

        public Double getPRIME_ANCIENNETE() {
            return this.PRIME_ANCIENNETE;
        }

        public String PENSION;

        public String getPENSION() {
            return this.PENSION;
        }

        public String GRADE_PENSION;

        public String getGRADE_PENSION() {
            return this.GRADE_PENSION;
        }

        public String ECHELON_PENSION;

        public String getECHELON_PENSION() {
            return this.ECHELON_PENSION;
        }

        public String INDICE_PENSION;

        public String getINDICE_PENSION() {
            return this.INDICE_PENSION;
        }

        public String SITUATION_FAMILIALE;

        public String getSITUATION_FAMILIALE() {
            return this.SITUATION_FAMILIALE;
        }

        public Integer NOMBRE_ENFANT;

        public Integer getNOMBRE_ENFANT() {
            return this.NOMBRE_ENFANT;
        }

        public String DEDUCTIONS;

        public String getDEDUCTIONS() {
            return this.DEDUCTIONS;
        }

        public String CODE_MUTUELLE_SC;

        public String getCODE_MUTUELLE_SC() {
            return this.CODE_MUTUELLE_SC;
        }

        public String TAUX_MUTUELLE_SC;

        public String getTAUX_MUTUELLE_SC() {
            return this.TAUX_MUTUELLE_SC;
        }

        public String CODE_MUTUELLE_SM;

        public String getCODE_MUTUELLE_SM() {
            return this.CODE_MUTUELLE_SM;
        }

        public String TAUX_MUTUELLE_SM;

        public String getTAUX_MUTUELLE_SM() {
            return this.TAUX_MUTUELLE_SM;
        }

        public String ADMINISTRATION_ORIGINE;

        public String getADMINISTRATION_ORIGINE() {
            return this.ADMINISTRATION_ORIGINE;
        }

        public Long ECHANGE_MAJ_FILE_ID;

        public Long getECHANGE_MAJ_FILE_ID() {
            return this.ECHANGE_MAJ_FILE_ID;
        }

        public Long ECHANGE_MAJ_ID;

        public Long getECHANGE_MAJ_ID() {
            return this.ECHANGE_MAJ_ID;
        }


        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + (int) this.ID;

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
            final after_tDBInput_1Struct other = (after_tDBInput_1Struct) obj;

            if (this.ID != other.ID)
                return false;


            return true;
        }

        public void copyDataTo(after_tDBInput_1Struct other) {

            other.ID = this.ID;
            other.NUMPPR = this.NUMPPR;
            other.NOM = this.NOM;
            other.CNIE = this.CNIE;
            other.CODELOCALITE = this.CODELOCALITE;
            other.ADRESSE = this.ADRESSE;
            other.GENRE = this.GENRE;
            other.CODEPAYS = this.CODEPAYS;
            other.DATENAISSANCE = this.DATENAISSANCE;
            other.DATERECRUTEMENT = this.DATERECRUTEMENT;
            other.DATERACHAT = this.DATERACHAT;
            other.DATELIMITE = this.DATELIMITE;
            other.CODEMOTIF = this.CODEMOTIF;
            other.MOTIFRADIATION = this.MOTIFRADIATION;
            other.IMPUTATION = this.IMPUTATION;
            other.RESIDENCE = this.RESIDENCE;
            other.POST = this.POST;
            other.CODESERVICE = this.CODESERVICE;
            other.POSITION = this.POSITION;
            other.MODEREGLEMENT = this.MODEREGLEMENT;
            other.NUMCOMPTE = this.NUMCOMPTE;
            other.BASEIMPOSABLE = this.BASEIMPOSABLE;
            other.SAISISSABLE = this.SAISISSABLE;
            other.BRUTANNUEL = this.BRUTANNUEL;
            other.NETANNUEL = this.NETANNUEL;
            other.DATEEFFETSITUATION = this.DATEEFFETSITUATION;
            other.NUM_COLONNE = this.NUM_COLONNE;
            other.STATUT = this.STATUT;
            other.GRADE_REF = this.GRADE_REF;
            other.ECHELON = this.ECHELON;
            other.POINT_INDICE = this.POINT_INDICE;
            other.ZONE = this.ZONE;
            other.FONCTION_REF = this.FONCTION_REF;
            other.POSITION_EN_CAS_DE_DETACHEMENT = this.POSITION_EN_CAS_DE_DETACHEMENT;
            other.CODE_DEPARTEMENT = this.CODE_DEPARTEMENT;
            other.AVANCE = this.AVANCE;
            other.PRIME_ANCIENNETE = this.PRIME_ANCIENNETE;
            other.PENSION = this.PENSION;
            other.GRADE_PENSION = this.GRADE_PENSION;
            other.ECHELON_PENSION = this.ECHELON_PENSION;
            other.INDICE_PENSION = this.INDICE_PENSION;
            other.SITUATION_FAMILIALE = this.SITUATION_FAMILIALE;
            other.NOMBRE_ENFANT = this.NOMBRE_ENFANT;
            other.DEDUCTIONS = this.DEDUCTIONS;
            other.CODE_MUTUELLE_SC = this.CODE_MUTUELLE_SC;
            other.TAUX_MUTUELLE_SC = this.TAUX_MUTUELLE_SC;
            other.CODE_MUTUELLE_SM = this.CODE_MUTUELLE_SM;
            other.TAUX_MUTUELLE_SM = this.TAUX_MUTUELLE_SM;
            other.ADMINISTRATION_ORIGINE = this.ADMINISTRATION_ORIGINE;
            other.ECHANGE_MAJ_FILE_ID = this.ECHANGE_MAJ_FILE_ID;
            other.ECHANGE_MAJ_ID = this.ECHANGE_MAJ_ID;

        }

        public void copyKeysDataTo(after_tDBInput_1Struct other) {

            other.ID = this.ID;

        }


        private String readString(ObjectInputStream dis) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                if (length > commonByteArray_FM6_INSERT_ADHERENT.length) {
                    if (length < 1024 && commonByteArray_FM6_INSERT_ADHERENT.length == 0) {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[1024];
                    } else {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[2 * length];
                    }
                }
                dis.readFully(commonByteArray_FM6_INSERT_ADHERENT, 0, length);
                strReturn = new String(commonByteArray_FM6_INSERT_ADHERENT, 0, length, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, ObjectOutputStream dos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        private Date readDate(ObjectInputStream dis) throws IOException {
            Date dateReturn = null;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                dateReturn = null;
            } else {
                dateReturn = new Date(dis.readLong());
            }
            return dateReturn;
        }

        private void writeDate(Date date1, ObjectOutputStream dos) throws IOException {
            if (date1 == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeLong(date1.getTime());
            }
        }

        private Integer readInteger(ObjectInputStream dis) throws IOException {
            Integer intReturn;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                intReturn = null;
            } else {
                intReturn = dis.readInt();
            }
            return intReturn;
        }

        private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
            if (intNum == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeInt(intNum);
            }
        }

        public void readData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock_FM6_INSERT_ADHERENT) {

                try {

                    int length = 0;

                    this.ID = dis.readLong();

                    this.NUMPPR = readString(dis);

                    this.NOM = readString(dis);

                    this.CNIE = readString(dis);

                    this.CODELOCALITE = readString(dis);

                    this.ADRESSE = readString(dis);

                    this.GENRE = readString(dis);

                    this.CODEPAYS = readString(dis);

                    this.DATENAISSANCE = readDate(dis);

                    this.DATERECRUTEMENT = readDate(dis);

                    this.DATERACHAT = readDate(dis);

                    this.DATELIMITE = readDate(dis);

                    this.CODEMOTIF = readString(dis);

                    this.MOTIFRADIATION = readString(dis);

                    this.IMPUTATION = readString(dis);

                    this.RESIDENCE = readString(dis);

                    this.POST = readString(dis);

                    this.CODESERVICE = readString(dis);

                    this.POSITION = readString(dis);

                    this.MODEREGLEMENT = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.NUMCOMPTE = null;
                    } else {
                        this.NUMCOMPTE = dis.readLong();
                    }

                    this.BASEIMPOSABLE = readString(dis);

                    this.SAISISSABLE = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.BRUTANNUEL = null;
                    } else {
                        this.BRUTANNUEL = dis.readDouble();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.NETANNUEL = null;
                    } else {
                        this.NETANNUEL = dis.readDouble();
                    }

                    this.DATEEFFETSITUATION = readDate(dis);

                    this.NUM_COLONNE = readString(dis);

                    this.STATUT = readString(dis);

                    this.GRADE_REF = readInteger(dis);

                    this.ECHELON = readInteger(dis);

                    this.POINT_INDICE = readString(dis);

                    this.ZONE = readString(dis);

                    this.FONCTION_REF = readString(dis);

                    this.POSITION_EN_CAS_DE_DETACHEMENT = readString(dis);

                    this.CODE_DEPARTEMENT = readString(dis);

                    this.AVANCE = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.PRIME_ANCIENNETE = null;
                    } else {
                        this.PRIME_ANCIENNETE = dis.readDouble();
                    }

                    this.PENSION = readString(dis);

                    this.GRADE_PENSION = readString(dis);

                    this.ECHELON_PENSION = readString(dis);

                    this.INDICE_PENSION = readString(dis);

                    this.SITUATION_FAMILIALE = readString(dis);

                    this.NOMBRE_ENFANT = readInteger(dis);

                    this.DEDUCTIONS = readString(dis);

                    this.CODE_MUTUELLE_SC = readString(dis);

                    this.TAUX_MUTUELLE_SC = readString(dis);

                    this.CODE_MUTUELLE_SM = readString(dis);

                    this.TAUX_MUTUELLE_SM = readString(dis);

                    this.ADMINISTRATION_ORIGINE = readString(dis);

                    length = dis.readByte();
                    if (length == -1) {
                        this.ECHANGE_MAJ_FILE_ID = null;
                    } else {
                        this.ECHANGE_MAJ_FILE_ID = dis.readLong();
                    }

                    length = dis.readByte();
                    if (length == -1) {
                        this.ECHANGE_MAJ_ID = null;
                    } else {
                        this.ECHANGE_MAJ_ID = dis.readLong();
                    }

                } catch (IOException e) {
                    throw new RuntimeException(e);


                }


            }


        }

        public void writeData(ObjectOutputStream dos) {
            try {


                // long

                dos.writeLong(this.ID);

                // String

                writeString(this.NUMPPR, dos);

                // String

                writeString(this.NOM, dos);

                // String

                writeString(this.CNIE, dos);

                // String

                writeString(this.CODELOCALITE, dos);

                // String

                writeString(this.ADRESSE, dos);

                // String

                writeString(this.GENRE, dos);

                // String

                writeString(this.CODEPAYS, dos);

                // java.util.Date

                writeDate(this.DATENAISSANCE, dos);

                // java.util.Date

                writeDate(this.DATERECRUTEMENT, dos);

                // java.util.Date

                writeDate(this.DATERACHAT, dos);

                // java.util.Date

                writeDate(this.DATELIMITE, dos);

                // String

                writeString(this.CODEMOTIF, dos);

                // String

                writeString(this.MOTIFRADIATION, dos);

                // String

                writeString(this.IMPUTATION, dos);

                // String

                writeString(this.RESIDENCE, dos);

                // String

                writeString(this.POST, dos);

                // String

                writeString(this.CODESERVICE, dos);

                // String

                writeString(this.POSITION, dos);

                // String

                writeString(this.MODEREGLEMENT, dos);

                // Long

                if (this.NUMCOMPTE == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.NUMCOMPTE);
                }

                // String

                writeString(this.BASEIMPOSABLE, dos);

                // String

                writeString(this.SAISISSABLE, dos);

                // Double

                if (this.BRUTANNUEL == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.BRUTANNUEL);
                }

                // Double

                if (this.NETANNUEL == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.NETANNUEL);
                }

                // java.util.Date

                writeDate(this.DATEEFFETSITUATION, dos);

                // String

                writeString(this.NUM_COLONNE, dos);

                // String

                writeString(this.STATUT, dos);

                // Integer

                writeInteger(this.GRADE_REF, dos);

                // Integer

                writeInteger(this.ECHELON, dos);

                // String

                writeString(this.POINT_INDICE, dos);

                // String

                writeString(this.ZONE, dos);

                // String

                writeString(this.FONCTION_REF, dos);

                // String

                writeString(this.POSITION_EN_CAS_DE_DETACHEMENT, dos);

                // String

                writeString(this.CODE_DEPARTEMENT, dos);

                // String

                writeString(this.AVANCE, dos);

                // Double

                if (this.PRIME_ANCIENNETE == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.PRIME_ANCIENNETE);
                }

                // String

                writeString(this.PENSION, dos);

                // String

                writeString(this.GRADE_PENSION, dos);

                // String

                writeString(this.ECHELON_PENSION, dos);

                // String

                writeString(this.INDICE_PENSION, dos);

                // String

                writeString(this.SITUATION_FAMILIALE, dos);

                // Integer

                writeInteger(this.NOMBRE_ENFANT, dos);

                // String

                writeString(this.DEDUCTIONS, dos);

                // String

                writeString(this.CODE_MUTUELLE_SC, dos);

                // String

                writeString(this.TAUX_MUTUELLE_SC, dos);

                // String

                writeString(this.CODE_MUTUELLE_SM, dos);

                // String

                writeString(this.TAUX_MUTUELLE_SM, dos);

                // String

                writeString(this.ADMINISTRATION_ORIGINE, dos);

                // Long

                if (this.ECHANGE_MAJ_FILE_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ECHANGE_MAJ_FILE_ID);
                }

                // Long

                if (this.ECHANGE_MAJ_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ECHANGE_MAJ_ID);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }


        }


        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");
            sb.append("ID=" + String.valueOf(ID));
            sb.append(",NUMPPR=" + NUMPPR);
            sb.append(",NOM=" + NOM);
            sb.append(",CNIE=" + CNIE);
            sb.append(",CODELOCALITE=" + CODELOCALITE);
            sb.append(",ADRESSE=" + ADRESSE);
            sb.append(",GENRE=" + GENRE);
            sb.append(",CODEPAYS=" + CODEPAYS);
            sb.append(",DATENAISSANCE=" + String.valueOf(DATENAISSANCE));
            sb.append(",DATERECRUTEMENT=" + String.valueOf(DATERECRUTEMENT));
            sb.append(",DATERACHAT=" + String.valueOf(DATERACHAT));
            sb.append(",DATELIMITE=" + String.valueOf(DATELIMITE));
            sb.append(",CODEMOTIF=" + CODEMOTIF);
            sb.append(",MOTIFRADIATION=" + MOTIFRADIATION);
            sb.append(",IMPUTATION=" + IMPUTATION);
            sb.append(",RESIDENCE=" + RESIDENCE);
            sb.append(",POST=" + POST);
            sb.append(",CODESERVICE=" + CODESERVICE);
            sb.append(",POSITION=" + POSITION);
            sb.append(",MODEREGLEMENT=" + MODEREGLEMENT);
            sb.append(",NUMCOMPTE=" + String.valueOf(NUMCOMPTE));
            sb.append(",BASEIMPOSABLE=" + BASEIMPOSABLE);
            sb.append(",SAISISSABLE=" + SAISISSABLE);
            sb.append(",BRUTANNUEL=" + String.valueOf(BRUTANNUEL));
            sb.append(",NETANNUEL=" + String.valueOf(NETANNUEL));
            sb.append(",DATEEFFETSITUATION=" + String.valueOf(DATEEFFETSITUATION));
            sb.append(",NUM_COLONNE=" + NUM_COLONNE);
            sb.append(",STATUT=" + STATUT);
            sb.append(",GRADE_REF=" + String.valueOf(GRADE_REF));
            sb.append(",ECHELON=" + String.valueOf(ECHELON));
            sb.append(",POINT_INDICE=" + POINT_INDICE);
            sb.append(",ZONE=" + ZONE);
            sb.append(",FONCTION_REF=" + FONCTION_REF);
            sb.append(",POSITION_EN_CAS_DE_DETACHEMENT=" + POSITION_EN_CAS_DE_DETACHEMENT);
            sb.append(",CODE_DEPARTEMENT=" + CODE_DEPARTEMENT);
            sb.append(",AVANCE=" + AVANCE);
            sb.append(",PRIME_ANCIENNETE=" + String.valueOf(PRIME_ANCIENNETE));
            sb.append(",PENSION=" + PENSION);
            sb.append(",GRADE_PENSION=" + GRADE_PENSION);
            sb.append(",ECHELON_PENSION=" + ECHELON_PENSION);
            sb.append(",INDICE_PENSION=" + INDICE_PENSION);
            sb.append(",SITUATION_FAMILIALE=" + SITUATION_FAMILIALE);
            sb.append(",NOMBRE_ENFANT=" + String.valueOf(NOMBRE_ENFANT));
            sb.append(",DEDUCTIONS=" + DEDUCTIONS);
            sb.append(",CODE_MUTUELLE_SC=" + CODE_MUTUELLE_SC);
            sb.append(",TAUX_MUTUELLE_SC=" + TAUX_MUTUELLE_SC);
            sb.append(",CODE_MUTUELLE_SM=" + CODE_MUTUELLE_SM);
            sb.append(",TAUX_MUTUELLE_SM=" + TAUX_MUTUELLE_SM);
            sb.append(",ADMINISTRATION_ORIGINE=" + ADMINISTRATION_ORIGINE);
            sb.append(",ECHANGE_MAJ_FILE_ID=" + String.valueOf(ECHANGE_MAJ_FILE_ID));
            sb.append(",ECHANGE_MAJ_ID=" + String.valueOf(ECHANGE_MAJ_ID));
            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(after_tDBInput_1Struct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.ID, other.ID);
            if (returnValue != 0) {
                return returnValue;
            }


            return returnValue;
        }


        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }


    }

    public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
        globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

        final boolean execStat = this.execStat;

        String iterateId = "";


        String currentComponent = "";
        java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

        try {
            // TDI-39566 avoid throwing an useless Exception
            boolean resumeIt = true;
            if (globalResumeTicket == false && resumeEntryMethodName != null) {
                String currentMethodName = new Exception().getStackTrace()[0].getMethodName();
                resumeIt = resumeEntryMethodName.equals(currentMethodName);
            }
            if (resumeIt || globalResumeTicket) { //start the resume
                globalResumeTicket = true;


                tDBInput_2Process(globalMap);
                tDBInput_3Process(globalMap);
                tDBInput_4Process(globalMap);
                tDBInput_5Process(globalMap);

                row1Struct row1 = new row1Struct();
                to_insertStruct to_insert = new to_insertStruct();
                ad_detailStruct ad_detail = new ad_detailStruct();


                /**
                 * [tDBOutput_1 begin ] start
                 */


                ok_Hash.put("tDBOutput_1", false);
                start_Hash.put("tDBOutput_1", System.currentTimeMillis());


                currentComponent = "tDBOutput_1";


                if (execStat) {
                    runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "to_insert");
                }

                int tos_count_tDBOutput_1 = 0;


                int nb_line_tDBOutput_1 = 0;
                int nb_line_update_tDBOutput_1 = 0;
                int nb_line_inserted_tDBOutput_1 = 0;
                int nb_line_deleted_tDBOutput_1 = 0;
                int nb_line_rejected_tDBOutput_1 = 0;

                int deletedCount_tDBOutput_1 = 0;
                int updatedCount_tDBOutput_1 = 0;
                int insertedCount_tDBOutput_1 = 0;
                int rejectedCount_tDBOutput_1 = 0;
                String dbschema_tDBOutput_1 = null;
                String tableName_tDBOutput_1 = null;
                boolean whetherReject_tDBOutput_1 = false;

                java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
                long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
                long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
                long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
                long date_tDBOutput_1;

                java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


                java.sql.Connection conn_tDBOutput_1 = null;
                String dbUser_tDBOutput_1 = null;
                dbschema_tDBOutput_1 = "";
                String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";

                Class.forName(driverClass_tDBOutput_1);
                String port_tDBOutput_1 = port;
                String dbname_tDBOutput_1 = name;
                String url_tDBOutput_1 = url;
                if (!"".equals(port_tDBOutput_1)) {
                    url_tDBOutput_1 += ":" + port;
                }
                if (!"".equals(dbname_tDBOutput_1)) {
                    url_tDBOutput_1 += "//" + name;

                }
                url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
                dbUser_tDBOutput_1 = username;


                final String decryptedPassword_tDBOutput_1 = password;
                        //PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:InMidqrVNnkVdzsMBe93mnxCSaLzMsw1uNYx7jw70bpan9ivuaQIzA==");

                String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
                conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

                resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);

                conn_tDBOutput_1.setAutoCommit(false);
                int commitEvery_tDBOutput_1 = 10000;
                int commitCounter_tDBOutput_1 = 0;

                int batchSize_tDBOutput_1 = 10000;
                int batchSizeCounter_tDBOutput_1 = 0;

                if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
                    tableName_tDBOutput_1 = "ADHERENT";
                } else {
                    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "ADHERENT";
                }
                int count_tDBOutput_1 = 0;

                String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([ID],[ACTIF],[ADHERENT_SITUATION],[ADHERENT_STATUT],[ADHERENT_TYPE],[ADMINISTRATION_ORIGINE],[ADRESSE],[BRUT_ANNUEL],[CNIE],[COTISATION_ESTIMEE],[DATE_NAISSANCE],[DATE_RECRUTEMENT],[GENRE],[IMPUTATION],[MODE_REGLEMENT],[MOTIF_RADIATION],[NET_ANNUEL],[NOM],[NUM_ADHERENT],[NUM_PPR],[POINT_INDICE],[ADHERENT_DETAIL_ID],[ECHELLE_REF_ID],[FONCTION_REF_ID],[GRADE_REF_ID],[BIENTOT_ETRE_RETRAITE],[CORRESPONDANT],[TAUX_MUTUELLE]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
                resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


/**
 * [tDBOutput_1 begin ] stop
 */


                /**
                 * [tDBOutput_2 begin ] start
                 */


                ok_Hash.put("tDBOutput_2", false);
                start_Hash.put("tDBOutput_2", System.currentTimeMillis());


                currentComponent = "tDBOutput_2";


                if (execStat) {
                    runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "ad_detail");
                }

                int tos_count_tDBOutput_2 = 0;


                int nb_line_tDBOutput_2 = 0;
                int nb_line_update_tDBOutput_2 = 0;
                int nb_line_inserted_tDBOutput_2 = 0;
                int nb_line_deleted_tDBOutput_2 = 0;
                int nb_line_rejected_tDBOutput_2 = 0;

                int deletedCount_tDBOutput_2 = 0;
                int updatedCount_tDBOutput_2 = 0;
                int insertedCount_tDBOutput_2 = 0;
                int rejectedCount_tDBOutput_2 = 0;
                String dbschema_tDBOutput_2 = null;
                String tableName_tDBOutput_2 = null;
                boolean whetherReject_tDBOutput_2 = false;

                java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
                long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
                long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
                long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00").getTime();
                long date_tDBOutput_2;

                java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


                java.sql.Connection conn_tDBOutput_2 = null;
                String dbUser_tDBOutput_2 = null;
                dbschema_tDBOutput_2 = "";
                String driverClass_tDBOutput_2 = "net.sourceforge.jtds.jdbc.Driver";

                Class.forName(driverClass_tDBOutput_2);
                String port_tDBOutput_2 = port;
                String dbname_tDBOutput_2 = name;
                String url_tDBOutput_2 = url;
                if (!"".equals(port_tDBOutput_2)) {
                    url_tDBOutput_2 += ":" + port;
                }
                if (!"".equals(dbname_tDBOutput_2)) {
                    url_tDBOutput_2 += "//" + name;

                }
                url_tDBOutput_2 += ";appName=" + projectName + ";" + "";
                dbUser_tDBOutput_2 = username;


                final String decryptedPassword_tDBOutput_2 = password;
                        //PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:PmSWZdnEYLr8bWWokJJlm28tdUMgWueX5PSCOvBQoJB4zWTuXNYYBQ==");

                String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
                conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2, dbPwd_tDBOutput_2);

                resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);

                conn_tDBOutput_2.setAutoCommit(false);
                int commitEvery_tDBOutput_2 = 10000;
                int commitCounter_tDBOutput_2 = 0;

                int batchSize_tDBOutput_2 = 10000;
                int batchSizeCounter_tDBOutput_2 = 0;

                if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
                    tableName_tDBOutput_2 = "ADHERENT_DETAIL";
                } else {
                    tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "ADHERENT_DETAIL";
                }
                int count_tDBOutput_2 = 0;

                String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2 + "] ([ID],[AVANCE],[BASE_IMPOSABLE],[CODE_DEPARTEMENT],[CODE_LOCALITE],[CODE_MOTIF],[CODE_PAYS],[CODE_SERVICE],[DATE_LIMITE],[DATE_RACHAT],[ECHELON],[IMPUTATION_STANDARD],[INDICE_DE_PENSION],[MODE_REGLEMENT],[NOMBRE_ENFANTS],[NUM_AFFILIATIONCNSS],[PENSION],[POINT_INDICE],[POSITION],[POSITION_EN_CASDE_DETACHEMENT],[POST],[PRIMEDANCIENNETE],[RESIDENCE],[SAISISSABLE],[SITUATION_FAMILIALE],[STATUT],[ZONE],[ADHERENT_ID],[NET_MENSUEL]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
                resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);


/**
 * [tDBOutput_2 begin ] stop
 */


                /**
                 * [tMap_1 begin ] start
                 */


                ok_Hash.put("tMap_1", false);
                start_Hash.put("tMap_1", System.currentTimeMillis());


                currentComponent = "tMap_1";


                if (execStat) {
                    runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
                }

                int tos_count_tMap_1 = 0;


// ###############################
// # Lookup's keys initialization

                org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>)
                        ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>)
                                globalMap.get("tHash_Lookup_row2"));


                row2Struct row2HashKey = new row2Struct();
                row2Struct row2Default = new row2Struct();

                org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>)
                        ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>)
                                globalMap.get("tHash_Lookup_row3"));


                row3Struct row3HashKey = new row3Struct();
                row3Struct row3Default = new row3Struct();

                org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>)
                        ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>)
                                globalMap.get("tHash_Lookup_row4"));


                row4Struct row4HashKey = new row4Struct();
                row4Struct row4Default = new row4Struct();

                org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>)
                        ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>)
                                globalMap.get("tHash_Lookup_row5"));


                row5Struct row5HashKey = new row5Struct();
                row5Struct row5Default = new row5Struct();
// ###############################

// ###############################
// # Vars initialization
                class Var__tMap_1__Struct {
                }
                Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
                to_insertStruct to_insert_tmp = new to_insertStruct();
                ad_detailStruct ad_detail_tmp = new ad_detailStruct();
// ###############################


/**
 * [tMap_1 begin ] stop
 */


                /**
                 * [tDBInput_1 begin ] start
                 */


                ok_Hash.put("tDBInput_1", false);
                start_Hash.put("tDBInput_1", System.currentTimeMillis());


                currentComponent = "tDBInput_1";


                int tos_count_tDBInput_1 = 0;


                org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();

                List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
                String[] talendToDBArray_tDBInput_1 = new String[]{"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL", "DECIMAL IDENTITY", "REAL"};
                java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
                int nb_line_tDBInput_1 = 0;
                java.sql.Connection conn_tDBInput_1 = null;
                String driverClass_tDBInput_1 = "net.sourceforge.jtds.jdbc.Driver";
                Class jdbcclazz_tDBInput_1 = Class.forName(driverClass_tDBInput_1);
                String dbUser_tDBInput_1 = username;


                final String decryptedPassword_tDBInput_1 = password;
                        //PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:UbLref6tXsSRnmY34p7nhntZz7Rlz0TQ3G6LMqMmLZuZMsTlK3QHBA==");

                String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

                String port_tDBInput_1 = port;
                String dbname_tDBInput_1 = name;
                String url_tDBInput_1 = url;
                if (!"".equals(port_tDBInput_1)) {
                    url_tDBInput_1 += ":" + port;
                }
                if (!"".equals(dbname_tDBInput_1)) {
                    url_tDBInput_1 += "//" + name;
                }
                url_tDBInput_1 += ";appName=" + projectName + ";" + "";
                String dbschema_tDBInput_1 = "";

                conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1, dbPwd_tDBInput_1);


                java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

                String dbquery_tDBInput_1 = "SELECT ADHERENT_TEMP.\"ID\",\n		ADHERENT_TEMP.NUMPPR,\n		ADHERENT_TEMP.NOM,\n		ADHERENT_TEMP.CNIE,\n		ADHERENT_TEMP.CODELOC"
                        + "ALITE,\n		ADHERENT_TEMP.ADRESSE,\n		ADHERENT_TEMP.GENRE,\n		ADHERENT_TEMP.CODEPAYS,\n		ADHERENT_TEMP.DATENAISSANCE,\n		ADHERE"
                        + "NT_TEMP.DATERECRUTEMENT,\n		ADHERENT_TEMP.DATERACHAT,\n		ADHERENT_TEMP.DATELIMITE,\n		ADHERENT_TEMP.CODEMOTIF,\n		ADHERENT_T"
                        + "EMP.MOTIFRADIATION,\n		ADHERENT_TEMP.IMPUTATION,\n		ADHERENT_TEMP.RESIDENCE,\n		ADHERENT_TEMP.POST,\n		ADHERENT_TEMP.CODESER"
                        + "VICE,\n		ADHERENT_TEMP.POSITION,\n		ADHERENT_TEMP.MODEREGLEMENT,\n		ADHERENT_TEMP.NUMCOMPTE,\n		ADHERENT_TEMP.BASEIMPOSABLE,"
                        + "\n		ADHERENT_TEMP.SAISISSABLE,\n		ADHERENT_TEMP.BRUTANNUEL,\n		ADHERENT_TEMP.NETANNUEL,\n		ADHERENT_TEMP.DATEEFFETSITUATION,"
                        + "\n		ADHERENT_TEMP.NUM_COLONNE,\n		ADHERENT_TEMP.STATUT,\n		ADHERENT_TEMP.GRADE_REF,\n		ADHERENT_TEMP.ECHELON,\n		ADHERENT_TEM"
                        + "P.POINT_INDICE,\n		ADHERENT_TEMP.ZONE,\n		ADHERENT_TEMP.FONCTION_REF,\n		ADHERENT_TEMP.POSITION_EN_CAS_DE_DETACHEMENT,\n		AD"
                        + "HERENT_TEMP.CODE_DEPARTEMENT,\n		ADHERENT_TEMP.AVANCE,\n		ADHERENT_TEMP.PRIME_ANCIENNETE,\n		ADHERENT_TEMP.PENSION,\n		ADHER"
                        + "ENT_TEMP.GRADE_PENSION,\n		ADHERENT_TEMP.ECHELON_PENSION,\n		ADHERENT_TEMP.INDICE_PENSION,\n		ADHERENT_TEMP.SITUATION_FAMIL"
                        + "IALE,\n		ADHERENT_TEMP.NOMBRE_ENFANT,\n		ADHERENT_TEMP.DEDUCTIONS,\n		ADHERENT_TEMP.CODE_MUTUELLE_SC,\n		ADHERENT_TEMP.TAUX_"
                        + "MUTUELLE_SC,\n		ADHERENT_TEMP.CODE_MUTUELLE_SM,\n		ADHERENT_TEMP.TAUX_MUTUELLE_SM,\n		ADHERENT_TEMP.ADMINISTRATION_ORIGINE,"
                        + "\n		ADHERENT_TEMP.ECHANGE_MAJ_FILE_ID,\n		ADHERENT_TEMP.ECHANGE_MAJ_ID\nFROM	ADHERENT_TEMP";


                globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
                java.sql.ResultSet rs_tDBInput_1 = null;

                try {
                    rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
                    java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
                    int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

                    String tmpContent_tDBInput_1 = null;


                    while (rs_tDBInput_1.next()) {
                        nb_line_tDBInput_1++;

                        if (colQtyInRs_tDBInput_1 < 1) {
                            row1.ID = 0;
                        } else {

                            row1.ID = rs_tDBInput_1.getLong(1);
                            if (rs_tDBInput_1.wasNull()) {
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 2) {
                            row1.NUMPPR = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.NUMPPR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.NUMPPR = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.NUMPPR = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 3) {
                            row1.NOM = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.NOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.NOM = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.NOM = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 4) {
                            row1.CNIE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.CNIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.CNIE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.CNIE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 5) {
                            row1.CODELOCALITE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.CODELOCALITE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.CODELOCALITE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.CODELOCALITE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 6) {
                            row1.ADRESSE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.ADRESSE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.ADRESSE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.ADRESSE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 7) {
                            row1.GENRE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.GENRE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.GENRE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.GENRE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 8) {
                            row1.CODEPAYS = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.CODEPAYS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.CODEPAYS = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.CODEPAYS = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 9) {
                            row1.DATENAISSANCE = null;
                        } else {

                            row1.DATENAISSANCE = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 9);

                        }
                        if (colQtyInRs_tDBInput_1 < 10) {
                            row1.DATERECRUTEMENT = null;
                        } else {

                            row1.DATERECRUTEMENT = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 10);

                        }
                        if (colQtyInRs_tDBInput_1 < 11) {
                            row1.DATERACHAT = null;
                        } else {

                            row1.DATERACHAT = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 11);

                        }
                        if (colQtyInRs_tDBInput_1 < 12) {
                            row1.DATELIMITE = null;
                        } else {

                            row1.DATELIMITE = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 12);

                        }
                        if (colQtyInRs_tDBInput_1 < 13) {
                            row1.CODEMOTIF = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(13);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.CODEMOTIF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.CODEMOTIF = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.CODEMOTIF = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 14) {
                            row1.MOTIFRADIATION = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(14);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.MOTIFRADIATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.MOTIFRADIATION = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.MOTIFRADIATION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 15) {
                            row1.IMPUTATION = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(15);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.IMPUTATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.IMPUTATION = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.IMPUTATION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 16) {
                            row1.RESIDENCE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(16);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.RESIDENCE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.RESIDENCE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.RESIDENCE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 17) {
                            row1.POST = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(17);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.POST = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.POST = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.POST = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 18) {
                            row1.CODESERVICE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(18);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.CODESERVICE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.CODESERVICE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.CODESERVICE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 19) {
                            row1.POSITION = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(19);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.POSITION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.POSITION = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.POSITION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 20) {
                            row1.MODEREGLEMENT = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(20);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.MODEREGLEMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.MODEREGLEMENT = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.MODEREGLEMENT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 21) {
                            row1.NUMCOMPTE = null;
                        } else {

                            row1.NUMCOMPTE = rs_tDBInput_1.getLong(21);
                            if (rs_tDBInput_1.wasNull()) {
                                row1.NUMCOMPTE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 22) {
                            row1.BASEIMPOSABLE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(22);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.BASEIMPOSABLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.BASEIMPOSABLE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.BASEIMPOSABLE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 23) {
                            row1.SAISISSABLE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(23);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.SAISISSABLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.SAISISSABLE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.SAISISSABLE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 24) {
                            row1.BRUTANNUEL = null;
                        } else {

                            row1.BRUTANNUEL = rs_tDBInput_1.getDouble(24);
                            if (rs_tDBInput_1.wasNull()) {
                                row1.BRUTANNUEL = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 25) {
                            row1.NETANNUEL = null;
                        } else {

                            row1.NETANNUEL = rs_tDBInput_1.getDouble(25);
                            if (rs_tDBInput_1.wasNull()) {
                                row1.NETANNUEL = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 26) {
                            row1.DATEEFFETSITUATION = null;
                        } else {

                            row1.DATEEFFETSITUATION = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 26);

                        }
                        if (colQtyInRs_tDBInput_1 < 27) {
                            row1.NUM_COLONNE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(27);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.NUM_COLONNE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.NUM_COLONNE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.NUM_COLONNE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 28) {
                            row1.STATUT = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(28);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.STATUT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.STATUT = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.STATUT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 29) {
                            row1.GRADE_REF = null;
                        } else {

                            row1.GRADE_REF = rs_tDBInput_1.getInt(29);
                            if (rs_tDBInput_1.wasNull()) {
                                row1.GRADE_REF = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 30) {
                            row1.ECHELON = null;
                        } else {

                            row1.ECHELON = rs_tDBInput_1.getInt(30);
                            if (rs_tDBInput_1.wasNull()) {
                                row1.ECHELON = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 31) {
                            row1.POINT_INDICE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(31);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.POINT_INDICE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.POINT_INDICE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.POINT_INDICE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 32) {
                            row1.ZONE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(32);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.ZONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.ZONE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.ZONE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 33) {
                            row1.FONCTION_REF = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(33);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.FONCTION_REF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.FONCTION_REF = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.FONCTION_REF = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 34) {
                            row1.POSITION_EN_CAS_DE_DETACHEMENT = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(34);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.POSITION_EN_CAS_DE_DETACHEMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.POSITION_EN_CAS_DE_DETACHEMENT = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.POSITION_EN_CAS_DE_DETACHEMENT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 35) {
                            row1.CODE_DEPARTEMENT = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(35);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.CODE_DEPARTEMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.CODE_DEPARTEMENT = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.CODE_DEPARTEMENT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 36) {
                            row1.AVANCE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(36);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.AVANCE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.AVANCE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.AVANCE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 37) {
                            row1.PRIME_ANCIENNETE = null;
                        } else {

                            row1.PRIME_ANCIENNETE = rs_tDBInput_1.getDouble(37);
                            if (rs_tDBInput_1.wasNull()) {
                                row1.PRIME_ANCIENNETE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 38) {
                            row1.PENSION = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(38);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.PENSION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.PENSION = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.PENSION = null;
                            }
                        }

                        if (colQtyInRs_tDBInput_1 < 39) {
                            row1.GRADE_PENSION = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(39);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.GRADE_PENSION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.GRADE_PENSION = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.GRADE_PENSION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 40) {
                            row1.ECHELON_PENSION = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(40);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.ECHELON_PENSION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.ECHELON_PENSION = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.ECHELON_PENSION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 41) {
                            row1.INDICE_PENSION = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(41);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.INDICE_PENSION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.INDICE_PENSION = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.INDICE_PENSION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 42) {
                            row1.SITUATION_FAMILIALE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(42);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.SITUATION_FAMILIALE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.SITUATION_FAMILIALE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.SITUATION_FAMILIALE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 43) {
                            row1.NOMBRE_ENFANT = null;
                        } else {

                            row1.NOMBRE_ENFANT = rs_tDBInput_1.getInt(43);
                            if (rs_tDBInput_1.wasNull()) {
                                row1.NOMBRE_ENFANT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 44) {
                            row1.DEDUCTIONS = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(44);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.DEDUCTIONS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.DEDUCTIONS = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.DEDUCTIONS = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 45) {
                            row1.CODE_MUTUELLE_SC = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(45);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.CODE_MUTUELLE_SC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.CODE_MUTUELLE_SC = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.CODE_MUTUELLE_SC = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 46) {
                            row1.TAUX_MUTUELLE_SC = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(46);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(46).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.TAUX_MUTUELLE_SC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.TAUX_MUTUELLE_SC = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.TAUX_MUTUELLE_SC = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 47) {
                            row1.CODE_MUTUELLE_SM = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(47);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(47).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.CODE_MUTUELLE_SM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.CODE_MUTUELLE_SM = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.CODE_MUTUELLE_SM = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 48) {
                            row1.TAUX_MUTUELLE_SM = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(48);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(48).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.TAUX_MUTUELLE_SM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.TAUX_MUTUELLE_SM = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.TAUX_MUTUELLE_SM = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 49) {
                            row1.ADMINISTRATION_ORIGINE = null;
                        } else {

                            tmpContent_tDBInput_1 = rs_tDBInput_1.getString(49);
                            if (tmpContent_tDBInput_1 != null) {
                                if (talendToDBList_tDBInput_1.contains(rsmd_tDBInput_1.getColumnTypeName(49).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row1.ADMINISTRATION_ORIGINE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
                                } else {
                                    row1.ADMINISTRATION_ORIGINE = tmpContent_tDBInput_1;
                                }
                            } else {
                                row1.ADMINISTRATION_ORIGINE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 50) {
                            row1.ECHANGE_MAJ_FILE_ID = null;
                        } else {

                            row1.ECHANGE_MAJ_FILE_ID = rs_tDBInput_1.getLong(50);
                            if (rs_tDBInput_1.wasNull()) {
                                row1.ECHANGE_MAJ_FILE_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_1 < 51) {
                            row1.ECHANGE_MAJ_ID = null;
                        } else {

                            row1.ECHANGE_MAJ_ID = rs_tDBInput_1.getLong(51);
                            if (rs_tDBInput_1.wasNull()) {
                                row1.ECHANGE_MAJ_ID = null;
                            }
                        }


/**
 * [tDBInput_1 begin ] stop
 */

                        /**
                         * [tDBInput_1 main ] start
                         */


                        currentComponent = "tDBInput_1";


                        tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */

                        /**
                         * [tDBInput_1 process_data_begin ] start
                         */


                        currentComponent = "tDBInput_1";


/**
 * [tDBInput_1 process_data_begin ] stop
 */


                        /**
                         * [tMap_1 main ] start
                         */


                        currentComponent = "tMap_1";


                        if (execStat) {
                            runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
                        }


                        boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

                        // ###############################
                        // # Input tables (lookups)
                        boolean rejectedInnerJoin_tMap_1 = false;
                        boolean mainRowRejected_tMap_1 = false;


                        ///////////////////////////////////////////////
                        // Starting Lookup Table "row2"
                        ///////////////////////////////////////////////


                        boolean forceLooprow2 = false;


                        row2Struct row2ObjectFromLookup = null;

                        if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020


                            hasCasePrimitiveKeyWithNull_tMap_1 = false;

                            row2HashKey.NUM_PPR = row1.NUMPPR;


                            row2HashKey.hashCodeDirty = true;


                            tHash_Lookup_row2.lookup(row2HashKey);


                        } // G_TM_M_020


                        if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071


                            //System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.NUM_PPR = '" + row2HashKey.NUM_PPR + "'");
                        } // G 071


                        row2Struct row2 = null;


                        row2Struct fromLookup_row2 = null;
                        row2 = row2Default;


                        if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099


                            fromLookup_row2 = tHash_Lookup_row2.next();


                        } // G 099


                        if (fromLookup_row2 != null) {
                            row2 = fromLookup_row2;
                        }


                        ///////////////////////////////////////////////
                        // Starting Lookup Table "row3"
                        ///////////////////////////////////////////////


                        boolean forceLooprow3 = false;


                        row3Struct row3ObjectFromLookup = null;

                        if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020


                            hasCasePrimitiveKeyWithNull_tMap_1 = false;

                            row3HashKey.CODE = row1.FONCTION_REF;


                            row3HashKey.hashCodeDirty = true;


                            tHash_Lookup_row3.lookup(row3HashKey);


                        } // G_TM_M_020


                        if (tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071


                            //System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.CODE = '" + row3HashKey.CODE + "'");
                        } // G 071


                        row3Struct row3 = null;


                        row3Struct fromLookup_row3 = null;
                        row3 = row3Default;


                        if (tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext()) { // G 099


                            fromLookup_row3 = tHash_Lookup_row3.next();


                        } // G 099


                        if (fromLookup_row3 != null) {
                            row3 = fromLookup_row3;
                        }


                        ///////////////////////////////////////////////
                        // Starting Lookup Table "row4"
                        ///////////////////////////////////////////////


                        boolean forceLooprow4 = false;


                        row4Struct row4ObjectFromLookup = null;

                        if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020


                            hasCasePrimitiveKeyWithNull_tMap_1 = false;

                            row4HashKey.CODE = (((row1.GRADE_REF) == null) ? null : (TypeConvert.Integer2String(row1.GRADE_REF)));


                            row4HashKey.hashCodeDirty = true;


                            tHash_Lookup_row4.lookup(row4HashKey);


                        } // G_TM_M_020


                        if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071


                            //System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.CODE = '" + row4HashKey.CODE + "'");
                        } // G 071


                        row4Struct row4 = null;


                        row4Struct fromLookup_row4 = null;
                        row4 = row4Default;


                        if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099


                            fromLookup_row4 = tHash_Lookup_row4.next();


                        } // G 099


                        if (fromLookup_row4 != null) {
                            row4 = fromLookup_row4;
                        }


                        ///////////////////////////////////////////////
                        // Starting Lookup Table "row5"
                        ///////////////////////////////////////////////


                        boolean forceLooprow5 = false;


                        row5Struct row5ObjectFromLookup = null;

                        if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020


                            hasCasePrimitiveKeyWithNull_tMap_1 = false;

                            row5HashKey.CREATED_BY = TypeConvert.Long2String(row4.ECHELLE_REF_ID);


                            row5HashKey.hashCodeDirty = true;


                            tHash_Lookup_row5.lookup(row5HashKey);


                        } // G_TM_M_020


                        if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071


                            //System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.CREATED_BY = '" + row5HashKey.CREATED_BY + "'");
                        } // G 071


                        row5Struct row5 = null;


                        row5Struct fromLookup_row5 = null;
                        row5 = row5Default;


                        if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099


                            fromLookup_row5 = tHash_Lookup_row5.next();


                        } // G 099


                        if (fromLookup_row5 != null) {
                            row5 = fromLookup_row5;
                        }


                        // ###############################
                        { // start of Var scope

                            // ###############################
                            // # Vars tables

                            Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
                            // ###############################
                            // # Output tables

                            to_insert = null;
                            ad_detail = null;


// # Output table : 'to_insert'
                            Long ID = (long) Numeric.sequence("seq", maxId, 1);
                            to_insert_tmp.ID = ID;
                            to_insert_tmp.ACTIF = 0;
                            to_insert_tmp.ADHERENT_SITUATION = row1.SITUATION_FAMILIALE != null ? row1.SITUATION_FAMILIALE : null;
                            to_insert_tmp.ADHERENT_STATUT = "ADHERENT";
                            to_insert_tmp.ADHERENT_TYPE = "MENMES";
                            to_insert_tmp.ADMINISTRATION_ORIGINE = row1.ADMINISTRATION_ORIGINE != null ? row1.ADMINISTRATION_ORIGINE : null;
                            to_insert_tmp.ADRESSE = row1.ADRESSE != null ? row1.ADRESSE : null;
                            to_insert_tmp.BRUT_ANNUEL = row1.BRUTANNUEL;
                            to_insert_tmp.CNIE = row1.CNIE != null ? row1.CNIE : null;
                            to_insert_tmp.COTISATION_ESTIMEE = row5.COTISATION_MENSUELLE;
                            to_insert_tmp.DATE_NAISSANCE = row1.DATENAISSANCE != null ? row1.DATENAISSANCE : null;
                            to_insert_tmp.DATE_RECRUTEMENT = row1.DATERECRUTEMENT != null ? row1.DATERECRUTEMENT : null;
                            to_insert_tmp.GENRE = row1.GENRE != null ? row1.GENRE : null;
                            to_insert_tmp.IMPUTATION = row1.IMPUTATION != null ? row1.IMPUTATION : null;
                            to_insert_tmp.MODE_REGLEMENT = row1.MODEREGLEMENT != null ? row1.MODEREGLEMENT : null;
                            to_insert_tmp.NET_ANNUEL = row1.NETANNUEL;
                            to_insert_tmp.NOM = row1.NOM != null ? row1.NOM : null;
                            to_insert_tmp.NUM_ADHERENT = null;
                            to_insert_tmp.NUM_PPR = row1.NUMPPR != null ? row1.NUMPPR : null;
                            to_insert_tmp.POINT_INDICE = row1.POINT_INDICE != null ? row1.POINT_INDICE : null;
                            to_insert_tmp.ECHELLE_REF_ID = null;
                            to_insert_tmp.FONCTION_REF_ID = null;
                            to_insert_tmp.GRADE_REF_ID = null;
                            to_insert = to_insert_tmp;

                            ad_detail_tmp.AVANCE = row1.AVANCE != null ? row1.AVANCE : null;
                            ad_detail_tmp.BASE_IMPOSABLE = row1.BASEIMPOSABLE != null ? row1.BASEIMPOSABLE : null;
                            ad_detail_tmp.CODE_DEPARTEMENT = row1.CODE_DEPARTEMENT != null ? row1.CODE_DEPARTEMENT : null;
                            ad_detail_tmp.CODE_LOCALITE = row1.CODELOCALITE != null ? row1.CODELOCALITE : null;
                            ad_detail_tmp.CODE_MOTIF = row1.CODEMOTIF != null ? row1.CODEMOTIF : null;
                            ad_detail_tmp.CODE_PAYS = row1.CODEPAYS != null ? row1.CODEPAYS : null;
                            ad_detail_tmp.CODE_SERVICE = row1.CODESERVICE != null ? row1.CODESERVICE : null;
                            ad_detail_tmp.DATE_LIMITE = row1.DATELIMITE != null ? row1.DATELIMITE : null;
                            ad_detail_tmp.DATE_RACHAT = row1.DATERACHAT != null ? row1.DATERACHAT : null;
                            ad_detail_tmp.ECHELON = row1.ECHELON != null ? row1.ECHELON : null;
                            ad_detail_tmp.IMPUTATION_STANDARD = null;
                            ad_detail_tmp.INDICE_DE_PENSION = row1.INDICE_PENSION != null ? row1.INDICE_PENSION : null;
                            ad_detail_tmp.MODE_REGLEMENT = row1.MODEREGLEMENT != null ? row1.MODEREGLEMENT : null;
                            ad_detail_tmp.NOMBRE_ENFANTS = row1.NOMBRE_ENFANT != null ? row1.NOMBRE_ENFANT : null;
                            ad_detail_tmp.NUM_AFFILIATIONCNSS = null;
                            ad_detail_tmp.PENSION = row1.PENSION != null ? row1.PENSION : null;
                            ad_detail_tmp.POINT_INDICE = row1.POINT_INDICE != null ? row1.POINT_INDICE : null;
                            ad_detail_tmp.POSITION = row1.POSITION != null ? row1.POSITION : null;
                            ad_detail_tmp.POSITION_EN_CASDE_DETACHEMENT = row1.POSITION_EN_CAS_DE_DETACHEMENT != null ? row1.POSITION_EN_CAS_DE_DETACHEMENT : null;
                            ad_detail_tmp.POST = row1.POST != null ? row1.POST : null;
                            ad_detail_tmp.PRIMEDANCIENNETE = row1.PRIME_ANCIENNETE != null ? row1.PRIME_ANCIENNETE : null;
                            ad_detail_tmp.RESIDENCE = row1.RESIDENCE != null ? row1.RESIDENCE : null;
                            ad_detail_tmp.SAISISSABLE = row1.SAISISSABLE != null ? row1.SAISISSABLE : null;
                            ad_detail_tmp.SITUATION_FAMILIALE = row1.SITUATION_FAMILIALE != null ? row1.SITUATION_FAMILIALE : null;
                            ad_detail_tmp.STATUT = row1.STATUT != null ? row1.STATUT : null;
                            ad_detail_tmp.ZONE = row1.ZONE != null ? row1.ZONE : null;
                            ad_detail_tmp.ADHERENT_ID = to_insert.ID;
                            ad_detail_tmp.NET_MENSUEL = row1.NETANNUEL != null ? row1.NETANNUEL / 12 : null;
                            ad_detail_tmp.ID=to_insert.ID;
                            ad_detail = ad_detail_tmp;

                        }
                        rejectedInnerJoin_tMap_1 = false;


                        tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */

                        /**
                         * [tMap_1 process_data_begin ] start
                         */


                        currentComponent = "tMap_1";


/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "to_insert"
                        if (to_insert != null) {


                            /**
                             * [tDBOutput_1 main ] start
                             */


                            currentComponent = "tDBOutput_1";


                            if (execStat) {
                                runStat.updateStatOnConnection(iterateId, 1, 1, "to_insert");
                            }


                            whetherReject_tDBOutput_1 = false;
                            pstmt_tDBOutput_1.setLong(1, to_insert.ID);

                            if (to_insert.ACTIF == null) {
                                pstmt_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
                            } else {
                                pstmt_tDBOutput_1.setByte(2, to_insert.ACTIF);
                            }

                            if (to_insert.ADHERENT_SITUATION == null) {
                                pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(3, to_insert.ADHERENT_SITUATION);
                            }

                            if (to_insert.ADHERENT_STATUT == null) {
                                pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(4, to_insert.ADHERENT_STATUT);
                            }

                            if (to_insert.ADHERENT_TYPE == null) {
                                pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(5, to_insert.ADHERENT_TYPE);
                            }

                            if (to_insert.ADMINISTRATION_ORIGINE == null) {
                                pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(6, to_insert.ADMINISTRATION_ORIGINE);
                            }

                            if (to_insert.ADRESSE == null) {
                                pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(7, to_insert.ADRESSE);
                            }

                            if (to_insert.BRUT_ANNUEL == null) {
                                pstmt_tDBOutput_1.setNull(8, java.sql.Types.DOUBLE);
                            } else {
                                pstmt_tDBOutput_1.setDouble(8, to_insert.BRUT_ANNUEL);
                            }

                            if (to_insert.CNIE == null) {
                                pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(9, to_insert.CNIE);
                            }

                            if (to_insert.COTISATION_ESTIMEE == null) {
                                pstmt_tDBOutput_1.setNull(10, java.sql.Types.DOUBLE);
                            } else {
                                pstmt_tDBOutput_1.setDouble(10, to_insert.COTISATION_ESTIMEE);
                            }

                            if (to_insert.DATE_NAISSANCE != null) {
                                pstmt_tDBOutput_1.setTimestamp(11, new java.sql.Timestamp(to_insert.DATE_NAISSANCE.getTime()));
                            } else {
                                pstmt_tDBOutput_1.setNull(11, java.sql.Types.DATE);
                            }

                            if (to_insert.DATE_RECRUTEMENT != null) {
                                pstmt_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(to_insert.DATE_RECRUTEMENT.getTime()));
                            } else {
                                pstmt_tDBOutput_1.setNull(12, java.sql.Types.DATE);
                            }

                            if (to_insert.GENRE == null) {
                                pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(13, to_insert.GENRE);
                            }

                            if (to_insert.IMPUTATION == null) {
                                pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(14, to_insert.IMPUTATION);
                            }

                            if (to_insert.MODE_REGLEMENT == null) {
                                pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(15, to_insert.MODE_REGLEMENT);
                            }

                            if (to_insert.MOTIF_RADIATION == null) {
                                pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(16, to_insert.MOTIF_RADIATION);
                            }

                            if (to_insert.NET_ANNUEL == null) {
                                pstmt_tDBOutput_1.setNull(17, java.sql.Types.DOUBLE);
                            } else {
                                pstmt_tDBOutput_1.setDouble(17, to_insert.NET_ANNUEL);
                            }

                            if (to_insert.NOM == null) {
                                pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(18, to_insert.NOM);
                            }

                            if (to_insert.NUM_ADHERENT == null) {
                                pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(19, to_insert.NUM_ADHERENT);
                            }

                            if (to_insert.NUM_PPR == null) {
                                pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(20, to_insert.NUM_PPR);
                            }

                            if (to_insert.POINT_INDICE == null) {
                                pstmt_tDBOutput_1.setNull(21, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_1.setString(21, to_insert.POINT_INDICE);
                            }

                            if (to_insert.ADHERENT_DETAIL_ID == null) {
                                pstmt_tDBOutput_1.setNull(22, java.sql.Types.INTEGER);
                            } else {
                                pstmt_tDBOutput_1.setLong(22, to_insert.ADHERENT_DETAIL_ID);
                            }

                            if (to_insert.ECHELLE_REF_ID == null) {
                                pstmt_tDBOutput_1.setNull(23, java.sql.Types.INTEGER);
                            } else {
                                pstmt_tDBOutput_1.setLong(23, to_insert.ECHELLE_REF_ID);
                            }

                            if (to_insert.FONCTION_REF_ID == null) {
                                pstmt_tDBOutput_1.setNull(24, java.sql.Types.INTEGER);
                            } else {
                                pstmt_tDBOutput_1.setLong(24, to_insert.FONCTION_REF_ID);
                            }

                            if (to_insert.GRADE_REF_ID == null) {
                                pstmt_tDBOutput_1.setNull(25, java.sql.Types.INTEGER);
                            } else {
                                pstmt_tDBOutput_1.setLong(25, to_insert.GRADE_REF_ID);
                            }
                            pstmt_tDBOutput_1.setBoolean(26,false);
                            pstmt_tDBOutput_1.setBoolean(27,false);
                            pstmt_tDBOutput_1.setBoolean(28,false);
                            pstmt_tDBOutput_1.addBatch();
                            nb_line_tDBOutput_1++;


                            batchSizeCounter_tDBOutput_1++;

                            //////////batch execute by batch size///////
                            class LimitBytesHelper_tDBOutput_1 {
                                public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                                    try {

                                        for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
                                            if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
                                                break;
                                            }
                                            counter += countEach_tDBOutput_1;
                                        }

                                    } catch (java.sql.BatchUpdateException e) {

                                        int countSum_tDBOutput_1 = 0;
                                        for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
                                            counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                                        }
                                        System.err.println(e.getMessage());
                                    }
                                    return counter;
                                }

                                public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                                    try {

                                        for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
                                            if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
                                                break;
                                            }
                                            counter += countEach_tDBOutput_1;
                                        }

                                    } catch (java.sql.BatchUpdateException e) {


                                        for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
                                            counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                                        }


                                        System.err.println(e.getMessage());

                                    }
                                    return counter;
                                }
                            }
                            if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {


                                insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1().limitBytePart1(insertedCount_tDBOutput_1, pstmt_tDBOutput_1);


                                batchSizeCounter_tDBOutput_1 = 0;
                            }


                            ////////////commit every////////////

                            commitCounter_tDBOutput_1++;
                            if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {

                                    insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1().limitBytePart1(insertedCount_tDBOutput_1, pstmt_tDBOutput_1);

                                    batchSizeCounter_tDBOutput_1 = 0;
                                }

                                conn_tDBOutput_1.commit();

                                commitCounter_tDBOutput_1 = 0;
                            }


                            tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */

                            /**
                             * [tDBOutput_1 process_data_begin ] start
                             */


                            currentComponent = "tDBOutput_1";


/**
 * [tDBOutput_1 process_data_begin ] stop
 */

                            /**
                             * [tDBOutput_1 process_data_end ] start
                             */


                            currentComponent = "tDBOutput_1";


/**
 * [tDBOutput_1 process_data_end ] stop
 */

                        } // End of branch "to_insert"


// Start of branch "ad_detail"
                        if (ad_detail != null) {


                            /**
                             * [tDBOutput_2 main ] start
                             */


                            currentComponent = "tDBOutput_2";


                            if (execStat) {
                                runStat.updateStatOnConnection(iterateId, 1, 1, "ad_detail");
                            }


                            whetherReject_tDBOutput_2 = false;

                            pstmt_tDBOutput_2.setLong(1,ad_detail.ID);
                            if (ad_detail.AVANCE == null) {
                                pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(2, ad_detail.AVANCE);
                            }

                            if (ad_detail.BASE_IMPOSABLE == null) {
                                pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(3, ad_detail.BASE_IMPOSABLE);
                            }

                            if (ad_detail.CODE_DEPARTEMENT == null) {
                                pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(4, ad_detail.CODE_DEPARTEMENT);
                            }

                            if (ad_detail.CODE_LOCALITE == null) {
                                pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(5, ad_detail.CODE_LOCALITE);
                            }

                            if (ad_detail.CODE_MOTIF == null) {
                                pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(6, ad_detail.CODE_MOTIF);
                            }

                            if (ad_detail.CODE_PAYS == null) {
                                pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(7, ad_detail.CODE_PAYS);
                            }


                            if (ad_detail.CODE_SERVICE == null) {
                                pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(8, ad_detail.CODE_SERVICE);
                            }


                            if (ad_detail.DATE_LIMITE != null) {
                                pstmt_tDBOutput_2.setTimestamp(9, new java.sql.Timestamp(ad_detail.DATE_LIMITE.getTime()));
                            } else {
                                pstmt_tDBOutput_2.setNull(9, java.sql.Types.DATE);
                            }

                            if (ad_detail.DATE_RACHAT != null) {
                                pstmt_tDBOutput_2.setTimestamp(10, new java.sql.Timestamp(ad_detail.DATE_RACHAT.getTime()));
                            } else {
                                pstmt_tDBOutput_2.setNull(10, java.sql.Types.DATE);
                            }


                            if (ad_detail.ECHELON == null) {
                                pstmt_tDBOutput_2.setNull(11, java.sql.Types.INTEGER);
                            } else {
                                pstmt_tDBOutput_2.setInt(11, ad_detail.ECHELON);
                            }


                            if (ad_detail.IMPUTATION_STANDARD == null) {
                                pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(12, ad_detail.IMPUTATION_STANDARD);
                            }

                            if (ad_detail.INDICE_DE_PENSION == null) {
                                pstmt_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(13, ad_detail.INDICE_DE_PENSION);
                            }

                            if (ad_detail.MODE_REGLEMENT == null) {
                                pstmt_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(14, ad_detail.MODE_REGLEMENT);
                            }

                            if (ad_detail.NOMBRE_ENFANTS == null) {
                                pstmt_tDBOutput_2.setNull(15, java.sql.Types.INTEGER);
                            } else {
                                pstmt_tDBOutput_2.setInt(15, ad_detail.NOMBRE_ENFANTS);
                            }

                            if (ad_detail.NUM_AFFILIATIONCNSS == null) {
                                pstmt_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(16, ad_detail.NUM_AFFILIATIONCNSS);
                            }

                            if (ad_detail.PENSION == null) {
                                pstmt_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(17, ad_detail.PENSION);
                            }

                            if (ad_detail.POINT_INDICE == null) {
                                pstmt_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(18, ad_detail.POINT_INDICE);
                            }

                            if (ad_detail.POSITION == null) {
                                pstmt_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(19, ad_detail.POSITION);
                            }

                            if (ad_detail.POSITION_EN_CASDE_DETACHEMENT == null) {
                                pstmt_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(20, ad_detail.POSITION_EN_CASDE_DETACHEMENT);
                            }

                            if (ad_detail.POST == null) {
                                pstmt_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(21, ad_detail.POST);
                            }

                            if (ad_detail.PRIMEDANCIENNETE == null) {
                                pstmt_tDBOutput_2.setNull(22, java.sql.Types.DOUBLE);
                            } else {
                                pstmt_tDBOutput_2.setDouble(22, ad_detail.PRIMEDANCIENNETE);
                            }

                            if (ad_detail.RESIDENCE == null) {
                                pstmt_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(23, ad_detail.RESIDENCE);
                            }

                            if (ad_detail.SAISISSABLE == null) {
                                pstmt_tDBOutput_2.setNull(24, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(24, ad_detail.SAISISSABLE);
                            }

                            if (ad_detail.SITUATION_FAMILIALE == null) {
                                pstmt_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(25, ad_detail.SITUATION_FAMILIALE);
                            }

                            if (ad_detail.STATUT == null) {
                                pstmt_tDBOutput_2.setNull(26, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(26, ad_detail.STATUT);
                            }

                            if (ad_detail.ZONE == null) {
                                pstmt_tDBOutput_2.setNull(27, java.sql.Types.VARCHAR);
                            } else {
                                pstmt_tDBOutput_2.setString(27, ad_detail.ZONE);
                            }

                            if (ad_detail.ADHERENT_ID == null) {
                                pstmt_tDBOutput_2.setNull(28, java.sql.Types.INTEGER);
                            } else {
                                pstmt_tDBOutput_2.setLong(28, ad_detail.ADHERENT_ID);
                            }

                            if (ad_detail.NET_MENSUEL == null) {
                                pstmt_tDBOutput_2.setNull(29, java.sql.Types.DOUBLE);
                            } else {
                                pstmt_tDBOutput_2.setDouble(29, ad_detail.NET_MENSUEL);
                            }


                            pstmt_tDBOutput_2.addBatch();
                            nb_line_tDBOutput_2++;


                            batchSizeCounter_tDBOutput_2++;

                            //////////batch execute by batch size///////
                            class LimitBytesHelper_tDBOutput_2 {
                                public int limitBytePart1(int counter, java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                                    try {

                                        for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
                                            if (countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
                                                break;
                                            }
                                            counter += countEach_tDBOutput_2;
                                        }

                                    } catch (java.sql.BatchUpdateException e) {

                                        int countSum_tDBOutput_2 = 0;
                                        for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
                                            counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                                        }


                                        System.err.println(e.getMessage());

                                    }
                                    return counter;
                                }

                                public int limitBytePart2(int counter, java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                                    try {

                                        for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
                                            if (countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
                                                break;
                                            }
                                            counter += countEach_tDBOutput_2;
                                        }

                                    } catch (java.sql.BatchUpdateException e) {


                                        for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
                                            counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                                        }


                                        System.err.println(e.getMessage());

                                    }
                                    return counter;
                                }
                            }
                            if ((batchSize_tDBOutput_2 > 0) && (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {


                                insertedCount_tDBOutput_2 = new LimitBytesHelper_tDBOutput_2().limitBytePart1(insertedCount_tDBOutput_2, pstmt_tDBOutput_2);


                                batchSizeCounter_tDBOutput_2 = 0;
                            }


                            ////////////commit every////////////

                            commitCounter_tDBOutput_2++;
                            if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
                                if ((batchSize_tDBOutput_2 > 0) && (batchSizeCounter_tDBOutput_2 > 0)) {

                                    insertedCount_tDBOutput_2 = new LimitBytesHelper_tDBOutput_2().limitBytePart1(insertedCount_tDBOutput_2, pstmt_tDBOutput_2);

                                    batchSizeCounter_tDBOutput_2 = 0;
                                }

                                conn_tDBOutput_2.commit();

                                commitCounter_tDBOutput_2 = 0;
                            }


                            tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */

                            /**
                             * [tDBOutput_2 process_data_begin ] start
                             */


                            currentComponent = "tDBOutput_2";


/**
 * [tDBOutput_2 process_data_begin ] stop
 */

                            /**
                             * [tDBOutput_2 process_data_end ] start
                             */


                            currentComponent = "tDBOutput_2";


/**
 * [tDBOutput_2 process_data_end ] stop
 */

                        } // End of branch "ad_detail"


                        /**
                         * [tMap_1 process_data_end ] start
                         */


                        currentComponent = "tMap_1";


/**
 * [tMap_1 process_data_end ] stop
 */


                        /**
                         * [tDBInput_1 process_data_end ] start
                         */


                        currentComponent = "tDBInput_1";


/**
 * [tDBInput_1 process_data_end ] stop
 */

                        /**
                         * [tDBInput_1 end ] start
                         */


                        currentComponent = "tDBInput_1";


                    }
                } finally {
                    if (rs_tDBInput_1 != null) {
                        rs_tDBInput_1.close();
                    }
                    if (stmt_tDBInput_1 != null) {
                        stmt_tDBInput_1.close();
                    }
                    if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

                        conn_tDBInput_1.close();

                        if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
                                && BundleUtils.inOSGi()) {
                            Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
                                    getMethod("checkedShutdown").invoke(null, (Object[]) null);
                        }

                    }
                }
                globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);


                ok_Hash.put("tDBInput_1", true);
                end_Hash.put("tDBInput_1", System.currentTimeMillis());


/**
 * [tDBInput_1 end ] stop
 */


                /**
                 * [tMap_1 end ] start
                 */


                currentComponent = "tMap_1";


// ###############################
// # Lookup hashes releasing
                if (tHash_Lookup_row2 != null) {
                    tHash_Lookup_row2.endGet();
                }
                globalMap.remove("tHash_Lookup_row2");


                if (tHash_Lookup_row3 != null) {
                    tHash_Lookup_row3.endGet();
                }
                globalMap.remove("tHash_Lookup_row3");


                if (tHash_Lookup_row4 != null) {
                    tHash_Lookup_row4.endGet();
                }
                globalMap.remove("tHash_Lookup_row4");


                if (tHash_Lookup_row5 != null) {
                    tHash_Lookup_row5.endGet();
                }
                globalMap.remove("tHash_Lookup_row5");


// ###############################


                if (execStat) {
                    runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
                }


                ok_Hash.put("tMap_1", true);
                end_Hash.put("tMap_1", System.currentTimeMillis());


/**
 * [tMap_1 end ] stop
 */


                /**
                 * [tDBOutput_1 end ] start
                 */


                currentComponent = "tDBOutput_1";


                try {
                    int countSum_tDBOutput_1 = 0;
                    if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

                        for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
                            if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
                                break;
                            }
                            countSum_tDBOutput_1 += countEach_tDBOutput_1;
                        }

                    }

                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

                } catch (java.sql.BatchUpdateException e) {

                    int countSum_tDBOutput_1 = 0;
                    for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
                        countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
                    }

                    insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

                    System.err.println(e.getMessage());

                }
                if (pstmt_tDBOutput_1 != null) {

                    pstmt_tDBOutput_1.close();
                    resourceMap.remove("pstmt_tDBOutput_1");

                }
                resourceMap.put("statementClosed_tDBOutput_1", true);
                conn_tDBOutput_1.commit();

                conn_tDBOutput_1.close();
                resourceMap.put("finish_tDBOutput_1", true);

                nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
                nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
                nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
                nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

                globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
                globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
                globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
                globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
                globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);


                if (execStat) {
                    runStat.updateStat(resourceMap, iterateId, 2, 0, "to_insert");
                }


                ok_Hash.put("tDBOutput_1", true);
                end_Hash.put("tDBOutput_1", System.currentTimeMillis());


/**
 * [tDBOutput_1 end ] stop
 */


                /**
                 * [tDBOutput_2 end ] start
                 */


                currentComponent = "tDBOutput_2";


                try {
                    int countSum_tDBOutput_2 = 0;
                    if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

                        for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
                            if (countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
                                break;
                            }
                            countSum_tDBOutput_2 += countEach_tDBOutput_2;
                        }

                    }

                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

                } catch (java.sql.BatchUpdateException e) {

                    int countSum_tDBOutput_2 = 0;
                    for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
                        countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
                    }

                    insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

                    System.err.println(e.getMessage());

                }
                if (pstmt_tDBOutput_2 != null) {

                    pstmt_tDBOutput_2.close();
                    resourceMap.remove("pstmt_tDBOutput_2");

                }
                resourceMap.put("statementClosed_tDBOutput_2", true);
                conn_tDBOutput_2.commit();

                conn_tDBOutput_2.close();
                resourceMap.put("finish_tDBOutput_2", true);

                nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
                nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
                nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
                nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

                globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
                globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
                globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
                globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
                globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);


                if (execStat) {
                    runStat.updateStat(resourceMap, iterateId, 2, 0, "ad_detail");
                }


                ok_Hash.put("tDBOutput_2", true);
                end_Hash.put("tDBOutput_2", System.currentTimeMillis());


/**
 * [tDBOutput_2 end ] stop
 */


            }//end the resume


        } catch (Exception e) {

            TalendException te = new TalendException(e, currentComponent, globalMap);

            throw te;
        } catch (Error error) {

            runStat.stopThreadStat();

            throw error;
        } finally {

            //free memory for "tMap_1"
            globalMap.remove("tHash_Lookup_row2");

            //free memory for "tMap_1"
            globalMap.remove("tHash_Lookup_row3");

            //free memory for "tMap_1"
            globalMap.remove("tHash_Lookup_row4");

            //free memory for "tMap_1"
            globalMap.remove("tHash_Lookup_row5");

            try {


                /**
                 * [tDBInput_1 finally ] start
                 */


                currentComponent = "tDBInput_1";


/**
 * [tDBInput_1 finally ] stop
 */


                /**
                 * [tMap_1 finally ] start
                 */


                currentComponent = "tMap_1";


/**
 * [tMap_1 finally ] stop
 */


                /**
                 * [tDBOutput_1 finally ] start
                 */


                currentComponent = "tDBOutput_1";


                try {
                    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                        java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                        if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                            pstmtToClose_tDBOutput_1.close();
                        }
                    }
                } finally {
                    if (resourceMap.get("finish_tDBOutput_1") == null) {
                        java.sql.Connection ctn_tDBOutput_1 = null;
                        if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
                            try {
                                ctn_tDBOutput_1.close();
                            } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                                String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                                System.err.println(errorMessage_tDBOutput_1);
                            }
                        }
                    }
                }


/**
 * [tDBOutput_1 finally ] stop
 */


                /**
                 * [tDBOutput_2 finally ] start
                 */


                currentComponent = "tDBOutput_2";


                try {
                    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                        java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                        if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                            pstmtToClose_tDBOutput_2.close();
                        }
                    }
                } finally {
                    if (resourceMap.get("finish_tDBOutput_2") == null) {
                        java.sql.Connection ctn_tDBOutput_2 = null;
                        if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
                            try {
                                ctn_tDBOutput_2.close();
                            } catch (java.sql.SQLException sqlEx_tDBOutput_2) {
                                String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :" + sqlEx_tDBOutput_2.getMessage();
                                System.err.println(errorMessage_tDBOutput_2);
                            }
                        }
                    }
                }


/**
 * [tDBOutput_2 finally ] stop
 */


            } catch (Exception e) {
                //ignore
            } catch (Error error) {
                //ignore
            }
            resourceMap = null;
        }


        globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
    }


    public static class row2Struct implements IPersistableComparableLookupRow<row2Struct> {
        final static byte[] commonByteArrayLock_FM6_INSERT_ADHERENT = new byte[0];
        static byte[] commonByteArray_FM6_INSERT_ADHERENT = new byte[0];
        protected static final int DEFAULT_HASHCODE = 1;
        protected static final int PRIME = 31;
        protected int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        public String loopKey;


        public long ID;

        public long getID() {
            return this.ID;
        }

        public String CREATED_BY;

        public String getCREATED_BY() {
            return this.CREATED_BY;
        }

        public Date CREATED_ON;

        public Date getCREATED_ON() {
            return this.CREATED_ON;
        }

        public String REQUEST_ORIGIN;

        public String getREQUEST_ORIGIN() {
            return this.REQUEST_ORIGIN;
        }

        public String UPDATED_BY;

        public String getUPDATED_BY() {
            return this.UPDATED_BY;
        }

        public Date UPDATED_ON;

        public Date getUPDATED_ON() {
            return this.UPDATED_ON;
        }

        public Long VERSION;

        public Long getVERSION() {
            return this.VERSION;
        }

        public String NOTE;

        public String getNOTE() {
            return this.NOTE;
        }

        public boolean ACTIF;

        public boolean getACTIF() {
            return this.ACTIF;
        }

        public String ACTION;

        public String getACTION() {
            return this.ACTION;
        }

        public String ADHERENT_SITUATION;

        public String getADHERENT_SITUATION() {
            return this.ADHERENT_SITUATION;
        }

        public String ADHERENT_STATUT;

        public String getADHERENT_STATUT() {
            return this.ADHERENT_STATUT;
        }

        public String ADHERENT_TYPE;

        public String getADHERENT_TYPE() {
            return this.ADHERENT_TYPE;
        }

        public String ADMINISTRATION_DE_DETACHMENT;

        public String getADMINISTRATION_DE_DETACHMENT() {
            return this.ADMINISTRATION_DE_DETACHMENT;
        }

        public String ADMINISTRATION_ORIGINE;

        public String getADMINISTRATION_ORIGINE() {
            return this.ADMINISTRATION_ORIGINE;
        }

        public String ADRESSE;

        public String getADRESSE() {
            return this.ADRESSE;
        }

        public String ADRESSE_ARABE;

        public String getADRESSE_ARABE() {
            return this.ADRESSE_ARABE;
        }

        public Integer AGE_RETRAITE;

        public Integer getAGE_RETRAITE() {
            return this.AGE_RETRAITE;
        }

        public Boolean AUTONOME;

        public Boolean getAUTONOME() {
            return this.AUTONOME;
        }

        public boolean BIENTOT_ETRE_RETRAITE;

        public boolean getBIENTOT_ETRE_RETRAITE() {
            return this.BIENTOT_ETRE_RETRAITE;
        }

        public Double BRUT_ANNUEL;

        public Double getBRUT_ANNUEL() {
            return this.BRUT_ANNUEL;
        }

        public String CNIE;

        public String getCNIE() {
            return this.CNIE;
        }

        public String CODE_AVANCE;

        public String getCODE_AVANCE() {
            return this.CODE_AVANCE;
        }

        public String CODE_MUTUELLE;

        public String getCODE_MUTUELLE() {
            return this.CODE_MUTUELLE;
        }

        public boolean CORRESPONDANT;

        public boolean getCORRESPONDANT() {
            return this.CORRESPONDANT;
        }

        public double COTISATION_ESTIMEE;

        public double getCOTISATION_ESTIMEE() {
            return this.COTISATION_ESTIMEE;
        }

        public Date DATE_CONFIRMATION;

        public Date getDATE_CONFIRMATION() {
            return this.DATE_CONFIRMATION;
        }

        public Date DATE_DE_DEBUT_DE_DETACHEMENT;

        public Date getDATE_DE_DEBUT_DE_DETACHEMENT() {
            return this.DATE_DE_DEBUT_DE_DETACHEMENT;
        }

        public Date DATE_DE_FIN_DE_DETACHEMENT;

        public Date getDATE_DE_FIN_DE_DETACHEMENT() {
            return this.DATE_DE_FIN_DE_DETACHEMENT;
        }

        public Date DATE_DE_REMISE_PENSION;

        public Date getDATE_DE_REMISE_PENSION() {
            return this.DATE_DE_REMISE_PENSION;
        }

        public Date DATE_DECES;

        public Date getDATE_DECES() {
            return this.DATE_DECES;
        }

        public Date DATE_EFFET_SITUATION;

        public Date getDATE_EFFET_SITUATION() {
            return this.DATE_EFFET_SITUATION;
        }

        public Date DATE_NAISSANCE;

        public Date getDATE_NAISSANCE() {
            return this.DATE_NAISSANCE;
        }

        public Date DATE_RECRUTEMENT;

        public Date getDATE_RECRUTEMENT() {
            return this.DATE_RECRUTEMENT;
        }

        public Date DATE_RETRAITE;

        public Date getDATE_RETRAITE() {
            return this.DATE_RETRAITE;
        }

        public String DELEGATION;

        public String getDELEGATION() {
            return this.DELEGATION;
        }

        public String DEPARETEMENT;

        public String getDEPARETEMENT() {
            return this.DEPARETEMENT;
        }

        public String EMAIL;

        public String getEMAIL() {
            return this.EMAIL;
        }

        public String ETABLISSEMENT_ORIGINE;

        public String getETABLISSEMENT_ORIGINE() {
            return this.ETABLISSEMENT_ORIGINE;
        }

        public String GENRE;

        public String getGENRE() {
            return this.GENRE;
        }

        public String GSM;

        public String getGSM() {
            return this.GSM;
        }

        public String IMAGE;

        public String getIMAGE() {
            return this.IMAGE;
        }

        public String IMPUTATION;

        public String getIMPUTATION() {
            return this.IMPUTATION;
        }

        public Boolean IS_NOTIFICATION_FILTER;

        public Boolean getIS_NOTIFICATION_FILTER() {
            return this.IS_NOTIFICATION_FILTER;
        }

        public String LIEU_DECES;

        public String getLIEU_DECES() {
            return this.LIEU_DECES;
        }


        public String MATRICULE;

        public String getMATRICULE() {
            return this.MATRICULE;
        }

        public String MODE_CALCUL;

        public String getMODE_CALCUL() {
            return this.MODE_CALCUL;
        }

        public String MODE_COTISATION;

        public String getMODE_COTISATION() {
            return this.MODE_COTISATION;
        }

        public String MODE_PAIEMENT;

        public String getMODE_PAIEMENT() {
            return this.MODE_PAIEMENT;
        }

        public String MODE_REGLEMENT;

        public String getMODE_REGLEMENT() {
            return this.MODE_REGLEMENT;
        }

        public String MOTIF_RADIATION;

        public String getMOTIF_RADIATION() {
            return this.MOTIF_RADIATION;
        }

        public String MOTIF_REJET;

        public String getMOTIF_REJET() {
            return this.MOTIF_REJET;
        }

        public Double NET_ANNUEL;

        public Double getNET_ANNUEL() {
            return this.NET_ANNUEL;
        }

        public String NOM;

        public String getNOM() {
            return this.NOM;
        }

        public String NOM_ARABE;

        public String getNOM_ARABE() {
            return this.NOM_ARABE;
        }

        public String NUM_ADHERENT;

        public String getNUM_ADHERENT() {
            return this.NUM_ADHERENT;
        }

        public Integer NUM_COMPTE;

        public Integer getNUM_COMPTE() {
            return this.NUM_COMPTE;
        }

        public String NUM_PENSION;

        public String getNUM_PENSION() {
            return this.NUM_PENSION;
        }

        public String NUM_PPR;

        public String getNUM_PPR() {
            return this.NUM_PPR;
        }

        public String NUM_TELEPHONE;

        public String getNUM_TELEPHONE() {
            return this.NUM_TELEPHONE;
        }

        public String PAYS;

        public String getPAYS() {
            return this.PAYS;
        }


        public String POINT_INDICE;

        public String getPOINT_INDICE() {
            return this.POINT_INDICE;
        }

        public String PRENOM;

        public String getPRENOM() {
            return this.PRENOM;
        }

        public String PRENOM_ARABE;

        public String getPRENOM_ARABE() {
            return this.PRENOM_ARABE;
        }

        public Boolean RENOUVELLEMENT;

        public Boolean getRENOUVELLEMENT() {
            return this.RENOUVELLEMENT;
        }

        public Double RETENUCMRRECENTE;

        public Double getRETENUCMRRECENTE() {
            return this.RETENUCMRRECENTE;
        }

        public double TAUX_MUTUELLE;

        public double getTAUX_MUTUELLE() {
            return this.TAUX_MUTUELLE;
        }

        public String TYPE_DE_PENSION;

        public String getTYPE_DE_PENSION() {
            return this.TYPE_DE_PENSION;
        }

        public Long ADHERENT_DETAIL_ID;

        public Long getADHERENT_DETAIL_ID() {
            return this.ADHERENT_DETAIL_ID;
        }

        public Long COMMUNE_REF_ID;

        public Long getCOMMUNE_REF_ID() {
            return this.COMMUNE_REF_ID;
        }

        public Long ECHELLE_REF_ID;

        public Long getECHELLE_REF_ID() {
            return this.ECHELLE_REF_ID;
        }

        public Long ETABLISSEMENT_CONV_REF_ID;

        public Long getETABLISSEMENT_CONV_REF_ID() {
            return this.ETABLISSEMENT_CONV_REF_ID;
        }

        public Long ETABLISSEMENT_PRIVE_REF_ID;

        public Long getETABLISSEMENT_PRIVE_REF_ID() {
            return this.ETABLISSEMENT_PRIVE_REF_ID;
        }

        public Long FONCTION_REF_ID;

        public Long getFONCTION_REF_ID() {
            return this.FONCTION_REF_ID;
        }

        public Long GRADE_REF_ID;

        public Long getGRADE_REF_ID() {
            return this.GRADE_REF_ID;
        }

        public Long MOTIF_RETRAITE_REF_ID;

        public Long getMOTIF_RETRAITE_REF_ID() {
            return this.MOTIF_RETRAITE_REF_ID;
        }

        public Long PROVINCE_REF_ID;

        public Long getPROVINCE_REF_ID() {
            return this.PROVINCE_REF_ID;
        }

        public Long REGION_REF_ID;

        public Long getREGION_REF_ID() {
            return this.REGION_REF_ID;
        }

        public Long TYPE_ARRIVEE_REF_ID;

        public Long getTYPE_ARRIVEE_REF_ID() {
            return this.TYPE_ARRIVEE_REF_ID;
        }

        public Long TYPE_RETRAITE_REF_ID;

        public Long getTYPE_RETRAITE_REF_ID() {
            return this.TYPE_RETRAITE_REF_ID;
        }

        public Long VILLE_REF_ID;

        public Long getVILLE_REF_ID() {
            return this.VILLE_REF_ID;
        }

        public String AYANT_DROIT_TYPE;

        public String getAYANT_DROIT_TYPE() {
            return this.AYANT_DROIT_TYPE;
        }

        public Long ADHERENT_DECEDE_ID;

        public Long getADHERENT_DECEDE_ID() {
            return this.ADHERENT_DECEDE_ID;
        }

        public Boolean HAVE_TUTEUR;

        public Boolean getHAVE_TUTEUR() {
            return this.HAVE_TUTEUR;
        }

        public String TUTEUR_STATUT;

        public String getTUTEUR_STATUT() {
            return this.TUTEUR_STATUT;
        }

        public String TUTEUR_TYPE;

        public String getTUTEUR_TYPE() {
            return this.TUTEUR_TYPE;
        }

        public Boolean IS_COTISATION_CHANGE;

        public Boolean getIS_COTISATION_CHANGE() {
            return this.IS_COTISATION_CHANGE;
        }

        public String NUM_DOSSIER;

        public String getNUM_DOSSIER() {
            return this.NUM_DOSSIER;
        }

        public Date DATE_DE_RADIATION;

        public Date getDATE_DE_RADIATION() {
            return this.DATE_DE_RADIATION;
        }

        public Long MOTIF_RADAITION_REF_ID;

        public Long getMOTIF_RADAITION_REF_ID() {
            return this.MOTIF_RADAITION_REF_ID;
        }

        public Double NET_MENSUEL;

        public Double getNET_MENSUEL() {
            return this.NET_MENSUEL;
        }

        public Double ECART;

        public Double getECART() {
            return this.ECART;
        }

        public String PENSION_REGIME;

        public String getPENSION_REGIME() {
            return this.PENSION_REGIME;
        }

        public Long ETABLISSEMENT_DETACHEMENT_ID;

        public Long getETABLISSEMENT_DETACHEMENT_ID() {
            return this.ETABLISSEMENT_DETACHEMENT_ID;
        }

        public String NUM_DOSSIERCMR;

        public String getNUM_DOSSIERCMR() {
            return this.NUM_DOSSIERCMR;
        }

        public Long MOTIF_REJET_REF_ID;

        public Long getMOTIF_REJET_REF_ID() {
            return this.MOTIF_REJET_REF_ID;
        }

        public Boolean ANNULATION;

        public Boolean getANNULATION() {
            return this.ANNULATION;
        }


        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + ((this.NUM_PPR == null) ? 0 : this.NUM_PPR.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
            final row2Struct other = (row2Struct) obj;

            if (this.NUM_PPR == null) {
                if (other.NUM_PPR != null)
                    return false;

            } else if (!this.NUM_PPR.equals(other.NUM_PPR))

                return false;


            return true;
        }

        public void copyDataTo(row2Struct other) {

            other.ID = this.ID;
            other.CREATED_BY = this.CREATED_BY;
            other.CREATED_ON = this.CREATED_ON;
            other.REQUEST_ORIGIN = this.REQUEST_ORIGIN;
            other.UPDATED_BY = this.UPDATED_BY;
            other.UPDATED_ON = this.UPDATED_ON;
            other.VERSION = this.VERSION;
            other.NOTE = this.NOTE;
            other.ACTIF = this.ACTIF;
            other.ACTION = this.ACTION;
            other.ADHERENT_SITUATION = this.ADHERENT_SITUATION;
            other.ADHERENT_STATUT = this.ADHERENT_STATUT;
            other.ADHERENT_TYPE = this.ADHERENT_TYPE;
            other.ADMINISTRATION_DE_DETACHMENT = this.ADMINISTRATION_DE_DETACHMENT;
            other.ADMINISTRATION_ORIGINE = this.ADMINISTRATION_ORIGINE;
            other.ADRESSE = this.ADRESSE;
            other.ADRESSE_ARABE = this.ADRESSE_ARABE;
            other.AGE_RETRAITE = this.AGE_RETRAITE;
            other.AUTONOME = this.AUTONOME;
            other.BIENTOT_ETRE_RETRAITE = this.BIENTOT_ETRE_RETRAITE;
            other.BRUT_ANNUEL = this.BRUT_ANNUEL;
            other.CNIE = this.CNIE;
            other.CODE_AVANCE = this.CODE_AVANCE;
            other.CODE_MUTUELLE = this.CODE_MUTUELLE;
            other.CORRESPONDANT = this.CORRESPONDANT;
            other.COTISATION_ESTIMEE = this.COTISATION_ESTIMEE;
            other.DATE_CONFIRMATION = this.DATE_CONFIRMATION;
            other.DATE_DE_DEBUT_DE_DETACHEMENT = this.DATE_DE_DEBUT_DE_DETACHEMENT;
            other.DATE_DE_FIN_DE_DETACHEMENT = this.DATE_DE_FIN_DE_DETACHEMENT;
            other.DATE_DE_REMISE_PENSION = this.DATE_DE_REMISE_PENSION;
            other.DATE_DECES = this.DATE_DECES;
            other.DATE_EFFET_SITUATION = this.DATE_EFFET_SITUATION;
            other.DATE_NAISSANCE = this.DATE_NAISSANCE;
            other.DATE_RECRUTEMENT = this.DATE_RECRUTEMENT;
            other.DATE_RETRAITE = this.DATE_RETRAITE;
            other.DELEGATION = this.DELEGATION;
            other.DEPARETEMENT = this.DEPARETEMENT;
            other.EMAIL = this.EMAIL;
            other.ETABLISSEMENT_ORIGINE = this.ETABLISSEMENT_ORIGINE;
            other.GENRE = this.GENRE;
            other.GSM = this.GSM;
            other.IMAGE = this.IMAGE;
            other.IMPUTATION = this.IMPUTATION;
            other.IS_NOTIFICATION_FILTER = this.IS_NOTIFICATION_FILTER;
            other.LIEU_DECES = this.LIEU_DECES;
            other.MATRICULE = this.MATRICULE;
            other.MODE_CALCUL = this.MODE_CALCUL;
            other.MODE_COTISATION = this.MODE_COTISATION;
            other.MODE_PAIEMENT = this.MODE_PAIEMENT;
            other.MODE_REGLEMENT = this.MODE_REGLEMENT;
            other.MOTIF_RADIATION = this.MOTIF_RADIATION;
            other.MOTIF_REJET = this.MOTIF_REJET;
            other.NET_ANNUEL = this.NET_ANNUEL;
            other.NOM = this.NOM;
            other.NOM_ARABE = this.NOM_ARABE;
            other.NUM_ADHERENT = this.NUM_ADHERENT;
            other.NUM_COMPTE = this.NUM_COMPTE;
            other.NUM_PENSION = this.NUM_PENSION;
            other.NUM_PPR = this.NUM_PPR;
            other.NUM_TELEPHONE = this.NUM_TELEPHONE;
            other.PAYS = this.PAYS;
            other.POINT_INDICE = this.POINT_INDICE;
            other.PRENOM = this.PRENOM;
            other.PRENOM_ARABE = this.PRENOM_ARABE;
            other.RENOUVELLEMENT = this.RENOUVELLEMENT;
            other.RETENUCMRRECENTE = this.RETENUCMRRECENTE;
            other.TAUX_MUTUELLE = this.TAUX_MUTUELLE;
            other.TYPE_DE_PENSION = this.TYPE_DE_PENSION;
            other.ADHERENT_DETAIL_ID = this.ADHERENT_DETAIL_ID;
            other.COMMUNE_REF_ID = this.COMMUNE_REF_ID;
            other.ECHELLE_REF_ID = this.ECHELLE_REF_ID;
            other.ETABLISSEMENT_CONV_REF_ID = this.ETABLISSEMENT_CONV_REF_ID;
            other.ETABLISSEMENT_PRIVE_REF_ID = this.ETABLISSEMENT_PRIVE_REF_ID;
            other.FONCTION_REF_ID = this.FONCTION_REF_ID;
            other.GRADE_REF_ID = this.GRADE_REF_ID;
            other.MOTIF_RETRAITE_REF_ID = this.MOTIF_RETRAITE_REF_ID;
            other.PROVINCE_REF_ID = this.PROVINCE_REF_ID;
            other.REGION_REF_ID = this.REGION_REF_ID;
            other.TYPE_ARRIVEE_REF_ID = this.TYPE_ARRIVEE_REF_ID;
            other.TYPE_RETRAITE_REF_ID = this.TYPE_RETRAITE_REF_ID;
            other.VILLE_REF_ID = this.VILLE_REF_ID;
            other.AYANT_DROIT_TYPE = this.AYANT_DROIT_TYPE;
            other.ADHERENT_DECEDE_ID = this.ADHERENT_DECEDE_ID;
            other.HAVE_TUTEUR = this.HAVE_TUTEUR;
            other.TUTEUR_STATUT = this.TUTEUR_STATUT;
            other.TUTEUR_TYPE = this.TUTEUR_TYPE;
            other.IS_COTISATION_CHANGE = this.IS_COTISATION_CHANGE;
            other.NUM_DOSSIER = this.NUM_DOSSIER;
            other.DATE_DE_RADIATION = this.DATE_DE_RADIATION;
            other.MOTIF_RADAITION_REF_ID = this.MOTIF_RADAITION_REF_ID;
            other.NET_MENSUEL = this.NET_MENSUEL;
            other.ECART = this.ECART;
            other.PENSION_REGIME = this.PENSION_REGIME;
            other.ETABLISSEMENT_DETACHEMENT_ID = this.ETABLISSEMENT_DETACHEMENT_ID;
            other.NUM_DOSSIERCMR = this.NUM_DOSSIERCMR;
            other.MOTIF_REJET_REF_ID = this.MOTIF_REJET_REF_ID;
            other.ANNULATION = this.ANNULATION;

        }

        public void copyKeysDataTo(row2Struct other) {

            other.NUM_PPR = this.NUM_PPR;

        }


        private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                byte[] byteArray = new byte[length];
                dis.read(byteArray);
                strReturn = new String(byteArray, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        private Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
            Date dateReturn = null;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                dateReturn = null;
            } else {
                dateReturn = new Date(dis.readLong());
            }
            return dateReturn;
        }

        private void writeDate(Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
            if (date1 == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeLong(date1.getTime());
            }
        }

        private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
            Integer intReturn;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                intReturn = null;
            } else {
                intReturn = dis.readInt();
            }
            return intReturn;
        }

        private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
            if (intNum == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeInt(intNum);
            }
        }

        private String readString(ObjectInputStream dis) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                if (length > commonByteArray_FM6_INSERT_ADHERENT.length) {
                    if (length < 1024 && commonByteArray_FM6_INSERT_ADHERENT.length == 0) {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[1024];
                    } else {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[2 * length];
                    }
                }
                dis.readFully(commonByteArray_FM6_INSERT_ADHERENT, 0, length);
                strReturn = new String(commonByteArray_FM6_INSERT_ADHERENT, 0, length, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, ObjectOutputStream dos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        public void readKeysData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock_FM6_INSERT_ADHERENT) {

                try {

                    int length = 0;

                    this.NUM_PPR = readString(dis);

                } catch (IOException e) {
                    throw new RuntimeException(e);


                }


            }


        }

        public void writeKeysData(ObjectOutputStream dos) {
            try {


                // String

                writeString(this.NUM_PPR, dos);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }


        }


        /**
         * Fill Values data by reading ObjectInputStream.
         */
        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
            try {

                int length = 0;

                this.ID = dis.readLong();

                this.CREATED_BY = readString(dis, ois);

                this.CREATED_ON = readDate(dis, ois);

                this.REQUEST_ORIGIN = readString(dis, ois);

                this.UPDATED_BY = readString(dis, ois);

                this.UPDATED_ON = readDate(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.VERSION = null;
                } else {
                    this.VERSION = dis.readLong();
                }

                this.NOTE = readString(dis, ois);

                this.ACTIF = dis.readBoolean();

                this.ACTION = readString(dis, ois);

                this.ADHERENT_SITUATION = readString(dis, ois);

                this.ADHERENT_STATUT = readString(dis, ois);

                this.ADHERENT_TYPE = readString(dis, ois);

                this.ADMINISTRATION_DE_DETACHMENT = readString(dis, ois);

                this.ADMINISTRATION_ORIGINE = readString(dis, ois);

                this.ADRESSE = readString(dis, ois);

                this.ADRESSE_ARABE = readString(dis, ois);

                this.AGE_RETRAITE = readInteger(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.AUTONOME = null;
                } else {
                    this.AUTONOME = dis.readBoolean();
                }

                this.BIENTOT_ETRE_RETRAITE = dis.readBoolean();

                length = dis.readByte();
                if (length == -1) {
                    this.BRUT_ANNUEL = null;
                } else {
                    this.BRUT_ANNUEL = dis.readDouble();
                }

                this.CNIE = readString(dis, ois);

                this.CODE_AVANCE = readString(dis, ois);

                this.CODE_MUTUELLE = readString(dis, ois);

                this.CORRESPONDANT = dis.readBoolean();

                this.COTISATION_ESTIMEE = dis.readDouble();

                this.DATE_CONFIRMATION = readDate(dis, ois);

                this.DATE_DE_DEBUT_DE_DETACHEMENT = readDate(dis, ois);

                this.DATE_DE_FIN_DE_DETACHEMENT = readDate(dis, ois);

                this.DATE_DE_REMISE_PENSION = readDate(dis, ois);

                this.DATE_DECES = readDate(dis, ois);

                this.DATE_EFFET_SITUATION = readDate(dis, ois);

                this.DATE_NAISSANCE = readDate(dis, ois);

                this.DATE_RECRUTEMENT = readDate(dis, ois);

                this.DATE_RETRAITE = readDate(dis, ois);

                this.DELEGATION = readString(dis, ois);

                this.DEPARETEMENT = readString(dis, ois);

                this.EMAIL = readString(dis, ois);

                this.ETABLISSEMENT_ORIGINE = readString(dis, ois);

                this.GENRE = readString(dis, ois);

                this.GSM = readString(dis, ois);

                this.IMAGE = readString(dis, ois);

                this.IMPUTATION = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.IS_NOTIFICATION_FILTER = null;
                } else {
                    this.IS_NOTIFICATION_FILTER = dis.readBoolean();
                }

                this.LIEU_DECES = readString(dis, ois);

                this.MATRICULE = readString(dis, ois);

                this.MODE_CALCUL = readString(dis, ois);

                this.MODE_COTISATION = readString(dis, ois);

                this.MODE_PAIEMENT = readString(dis, ois);

                this.MODE_REGLEMENT = readString(dis, ois);

                this.MOTIF_RADIATION = readString(dis, ois);

                this.MOTIF_REJET = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.NET_ANNUEL = null;
                } else {
                    this.NET_ANNUEL = dis.readDouble();
                }

                this.NOM = readString(dis, ois);

                this.NOM_ARABE = readString(dis, ois);

                this.NUM_ADHERENT = readString(dis, ois);

                this.NUM_COMPTE = readInteger(dis, ois);

                this.NUM_PENSION = readString(dis, ois);

                this.NUM_TELEPHONE = readString(dis, ois);

                this.PAYS = readString(dis, ois);

                this.POINT_INDICE = readString(dis, ois);

                this.PRENOM = readString(dis, ois);

                this.PRENOM_ARABE = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.RENOUVELLEMENT = null;
                } else {
                    this.RENOUVELLEMENT = dis.readBoolean();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.RETENUCMRRECENTE = null;
                } else {
                    this.RETENUCMRRECENTE = dis.readDouble();
                }

                this.TAUX_MUTUELLE = dis.readDouble();

                this.TYPE_DE_PENSION = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.ADHERENT_DETAIL_ID = null;
                } else {
                    this.ADHERENT_DETAIL_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.COMMUNE_REF_ID = null;
                } else {
                    this.COMMUNE_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ECHELLE_REF_ID = null;
                } else {
                    this.ECHELLE_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ETABLISSEMENT_CONV_REF_ID = null;
                } else {
                    this.ETABLISSEMENT_CONV_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ETABLISSEMENT_PRIVE_REF_ID = null;
                } else {
                    this.ETABLISSEMENT_PRIVE_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.FONCTION_REF_ID = null;
                } else {
                    this.FONCTION_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.GRADE_REF_ID = null;
                } else {
                    this.GRADE_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.MOTIF_RETRAITE_REF_ID = null;
                } else {
                    this.MOTIF_RETRAITE_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.PROVINCE_REF_ID = null;
                } else {
                    this.PROVINCE_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.REGION_REF_ID = null;
                } else {
                    this.REGION_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.TYPE_ARRIVEE_REF_ID = null;
                } else {
                    this.TYPE_ARRIVEE_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.TYPE_RETRAITE_REF_ID = null;
                } else {
                    this.TYPE_RETRAITE_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.VILLE_REF_ID = null;
                } else {
                    this.VILLE_REF_ID = dis.readLong();
                }

                this.AYANT_DROIT_TYPE = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.ADHERENT_DECEDE_ID = null;
                } else {
                    this.ADHERENT_DECEDE_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.HAVE_TUTEUR = null;
                } else {
                    this.HAVE_TUTEUR = dis.readBoolean();
                }

                this.TUTEUR_STATUT = readString(dis, ois);

                this.TUTEUR_TYPE = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.IS_COTISATION_CHANGE = null;
                } else {
                    this.IS_COTISATION_CHANGE = dis.readBoolean();
                }

                this.NUM_DOSSIER = readString(dis, ois);

                this.DATE_DE_RADIATION = readDate(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.MOTIF_RADAITION_REF_ID = null;
                } else {
                    this.MOTIF_RADAITION_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.NET_MENSUEL = null;
                } else {
                    this.NET_MENSUEL = dis.readDouble();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ECART = null;
                } else {
                    this.ECART = dis.readDouble();
                }

                this.PENSION_REGIME = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.ETABLISSEMENT_DETACHEMENT_ID = null;
                } else {
                    this.ETABLISSEMENT_DETACHEMENT_ID = dis.readLong();
                }

                this.NUM_DOSSIERCMR = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.MOTIF_REJET_REF_ID = null;
                } else {
                    this.MOTIF_REJET_REF_ID = dis.readLong();
                }

                length = dis.readByte();
                if (length == -1) {
                    this.ANNULATION = null;
                } else {
                    this.ANNULATION = dis.readBoolean();
                }

            } catch (IOException e) {
                throw new RuntimeException(e);


            }


        }

        /**
         * Return a byte array which represents Values data.
         */
        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
            try {


                dos.writeLong(this.ID);

                writeString(this.CREATED_BY, dos, oos);

                writeDate(this.CREATED_ON, dos, oos);

                writeString(this.REQUEST_ORIGIN, dos, oos);

                writeString(this.UPDATED_BY, dos, oos);

                writeDate(this.UPDATED_ON, dos, oos);

                if (this.VERSION == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VERSION);
                }

                writeString(this.NOTE, dos, oos);

                dos.writeBoolean(this.ACTIF);

                writeString(this.ACTION, dos, oos);

                writeString(this.ADHERENT_SITUATION, dos, oos);

                writeString(this.ADHERENT_STATUT, dos, oos);

                writeString(this.ADHERENT_TYPE, dos, oos);

                writeString(this.ADMINISTRATION_DE_DETACHMENT, dos, oos);

                writeString(this.ADMINISTRATION_ORIGINE, dos, oos);

                writeString(this.ADRESSE, dos, oos);

                writeString(this.ADRESSE_ARABE, dos, oos);

                writeInteger(this.AGE_RETRAITE, dos, oos);

                if (this.AUTONOME == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.AUTONOME);
                }

                dos.writeBoolean(this.BIENTOT_ETRE_RETRAITE);

                if (this.BRUT_ANNUEL == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.BRUT_ANNUEL);
                }

                writeString(this.CNIE, dos, oos);

                writeString(this.CODE_AVANCE, dos, oos);

                writeString(this.CODE_MUTUELLE, dos, oos);

                dos.writeBoolean(this.CORRESPONDANT);

                dos.writeDouble(this.COTISATION_ESTIMEE);

                writeDate(this.DATE_CONFIRMATION, dos, oos);

                writeDate(this.DATE_DE_DEBUT_DE_DETACHEMENT, dos, oos);

                writeDate(this.DATE_DE_FIN_DE_DETACHEMENT, dos, oos);

                writeDate(this.DATE_DE_REMISE_PENSION, dos, oos);

                writeDate(this.DATE_DECES, dos, oos);

                writeDate(this.DATE_EFFET_SITUATION, dos, oos);

                writeDate(this.DATE_NAISSANCE, dos, oos);

                writeDate(this.DATE_RECRUTEMENT, dos, oos);

                writeDate(this.DATE_RETRAITE, dos, oos);

                writeString(this.DELEGATION, dos, oos);

                writeString(this.DEPARETEMENT, dos, oos);

                writeString(this.EMAIL, dos, oos);

                writeString(this.ETABLISSEMENT_ORIGINE, dos, oos);

                writeString(this.GENRE, dos, oos);

                writeString(this.GSM, dos, oos);

                writeString(this.IMAGE, dos, oos);

                writeString(this.IMPUTATION, dos, oos);

                if (this.IS_NOTIFICATION_FILTER == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.IS_NOTIFICATION_FILTER);
                }

                writeString(this.LIEU_DECES, dos, oos);

                writeString(this.MATRICULE, dos, oos);

                writeString(this.MODE_CALCUL, dos, oos);

                writeString(this.MODE_COTISATION, dos, oos);

                writeString(this.MODE_PAIEMENT, dos, oos);

                writeString(this.MODE_REGLEMENT, dos, oos);

                writeString(this.MOTIF_RADIATION, dos, oos);

                writeString(this.MOTIF_REJET, dos, oos);

                if (this.NET_ANNUEL == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.NET_ANNUEL);
                }

                writeString(this.NOM, dos, oos);

                writeString(this.NOM_ARABE, dos, oos);

                writeString(this.NUM_ADHERENT, dos, oos);

                writeInteger(this.NUM_COMPTE, dos, oos);

                writeString(this.NUM_PENSION, dos, oos);

                writeString(this.NUM_TELEPHONE, dos, oos);

                writeString(this.PAYS, dos, oos);

                writeString(this.POINT_INDICE, dos, oos);

                writeString(this.PRENOM, dos, oos);

                writeString(this.PRENOM_ARABE, dos, oos);

                if (this.RENOUVELLEMENT == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.RENOUVELLEMENT);
                }

                if (this.RETENUCMRRECENTE == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.RETENUCMRRECENTE);
                }

                dos.writeDouble(this.TAUX_MUTUELLE);

                writeString(this.TYPE_DE_PENSION, dos, oos);

                if (this.ADHERENT_DETAIL_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ADHERENT_DETAIL_ID);
                }

                if (this.COMMUNE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.COMMUNE_REF_ID);
                }

                if (this.ECHELLE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ECHELLE_REF_ID);
                }

                if (this.ETABLISSEMENT_CONV_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ETABLISSEMENT_CONV_REF_ID);
                }

                if (this.ETABLISSEMENT_PRIVE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ETABLISSEMENT_PRIVE_REF_ID);
                }

                if (this.FONCTION_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.FONCTION_REF_ID);
                }

                if (this.GRADE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.GRADE_REF_ID);
                }

                if (this.MOTIF_RETRAITE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.MOTIF_RETRAITE_REF_ID);
                }

                if (this.PROVINCE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.PROVINCE_REF_ID);
                }

                if (this.REGION_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.REGION_REF_ID);
                }

                if (this.TYPE_ARRIVEE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.TYPE_ARRIVEE_REF_ID);
                }

                if (this.TYPE_RETRAITE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.TYPE_RETRAITE_REF_ID);
                }

                if (this.VILLE_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VILLE_REF_ID);
                }

                writeString(this.AYANT_DROIT_TYPE, dos, oos);

                if (this.ADHERENT_DECEDE_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ADHERENT_DECEDE_ID);
                }

                if (this.HAVE_TUTEUR == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.HAVE_TUTEUR);
                }

                writeString(this.TUTEUR_STATUT, dos, oos);

                writeString(this.TUTEUR_TYPE, dos, oos);

                if (this.IS_COTISATION_CHANGE == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.IS_COTISATION_CHANGE);
                }

                writeString(this.NUM_DOSSIER, dos, oos);

                writeDate(this.DATE_DE_RADIATION, dos, oos);

                if (this.MOTIF_RADAITION_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.MOTIF_RADAITION_REF_ID);
                }

                if (this.NET_MENSUEL == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.NET_MENSUEL);
                }

                if (this.ECART == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeDouble(this.ECART);
                }

                writeString(this.PENSION_REGIME, dos, oos);

                if (this.ETABLISSEMENT_DETACHEMENT_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.ETABLISSEMENT_DETACHEMENT_ID);
                }

                writeString(this.NUM_DOSSIERCMR, dos, oos);

                if (this.MOTIF_REJET_REF_ID == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.MOTIF_REJET_REF_ID);
                }

                if (this.ANNULATION == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.ANNULATION);
                }

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }


        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");
            sb.append("ID=" + String.valueOf(ID));
            sb.append(",CREATED_BY=" + CREATED_BY);
            sb.append(",CREATED_ON=" + String.valueOf(CREATED_ON));
            sb.append(",REQUEST_ORIGIN=" + REQUEST_ORIGIN);
            sb.append(",UPDATED_BY=" + UPDATED_BY);
            sb.append(",UPDATED_ON=" + String.valueOf(UPDATED_ON));
            sb.append(",VERSION=" + String.valueOf(VERSION));
            sb.append(",NOTE=" + NOTE);
            sb.append(",ACTIF=" + String.valueOf(ACTIF));
            sb.append(",ACTION=" + ACTION);
            sb.append(",ADHERENT_SITUATION=" + ADHERENT_SITUATION);
            sb.append(",ADHERENT_STATUT=" + ADHERENT_STATUT);
            sb.append(",ADHERENT_TYPE=" + ADHERENT_TYPE);
            sb.append(",ADMINISTRATION_DE_DETACHMENT=" + ADMINISTRATION_DE_DETACHMENT);
            sb.append(",ADMINISTRATION_ORIGINE=" + ADMINISTRATION_ORIGINE);
            sb.append(",ADRESSE=" + ADRESSE);
            sb.append(",ADRESSE_ARABE=" + ADRESSE_ARABE);
            sb.append(",AGE_RETRAITE=" + String.valueOf(AGE_RETRAITE));
            sb.append(",AUTONOME=" + String.valueOf(AUTONOME));
            sb.append(",BIENTOT_ETRE_RETRAITE=" + String.valueOf(BIENTOT_ETRE_RETRAITE));
            sb.append(",BRUT_ANNUEL=" + String.valueOf(BRUT_ANNUEL));
            sb.append(",CNIE=" + CNIE);
            sb.append(",CODE_AVANCE=" + CODE_AVANCE);
            sb.append(",CODE_MUTUELLE=" + CODE_MUTUELLE);
            sb.append(",CORRESPONDANT=" + String.valueOf(CORRESPONDANT));
            sb.append(",COTISATION_ESTIMEE=" + String.valueOf(COTISATION_ESTIMEE));
            sb.append(",DATE_CONFIRMATION=" + String.valueOf(DATE_CONFIRMATION));
            sb.append(",DATE_DE_DEBUT_DE_DETACHEMENT=" + String.valueOf(DATE_DE_DEBUT_DE_DETACHEMENT));
            sb.append(",DATE_DE_FIN_DE_DETACHEMENT=" + String.valueOf(DATE_DE_FIN_DE_DETACHEMENT));
            sb.append(",DATE_DE_REMISE_PENSION=" + String.valueOf(DATE_DE_REMISE_PENSION));
            sb.append(",DATE_DECES=" + String.valueOf(DATE_DECES));
            sb.append(",DATE_EFFET_SITUATION=" + String.valueOf(DATE_EFFET_SITUATION));
            sb.append(",DATE_NAISSANCE=" + String.valueOf(DATE_NAISSANCE));
            sb.append(",DATE_RECRUTEMENT=" + String.valueOf(DATE_RECRUTEMENT));
            sb.append(",DATE_RETRAITE=" + String.valueOf(DATE_RETRAITE));
            sb.append(",DELEGATION=" + DELEGATION);
            sb.append(",DEPARETEMENT=" + DEPARETEMENT);
            sb.append(",EMAIL=" + EMAIL);
            sb.append(",ETABLISSEMENT_ORIGINE=" + ETABLISSEMENT_ORIGINE);
            sb.append(",GENRE=" + GENRE);
            sb.append(",GSM=" + GSM);
            sb.append(",IMAGE=" + IMAGE);
            sb.append(",IMPUTATION=" + IMPUTATION);
            sb.append(",IS_NOTIFICATION_FILTER=" + String.valueOf(IS_NOTIFICATION_FILTER));
            sb.append(",LIEU_DECES=" + LIEU_DECES);
            sb.append(",MATRICULE=" + MATRICULE);
            sb.append(",MODE_CALCUL=" + MODE_CALCUL);
            sb.append(",MODE_COTISATION=" + MODE_COTISATION);
            sb.append(",MODE_PAIEMENT=" + MODE_PAIEMENT);
            sb.append(",MODE_REGLEMENT=" + MODE_REGLEMENT);
            sb.append(",MOTIF_RADIATION=" + MOTIF_RADIATION);
            sb.append(",MOTIF_REJET=" + MOTIF_REJET);
            sb.append(",NET_ANNUEL=" + String.valueOf(NET_ANNUEL));
            sb.append(",NOM=" + NOM);
            sb.append(",NOM_ARABE=" + NOM_ARABE);
            sb.append(",NUM_ADHERENT=" + NUM_ADHERENT);
            sb.append(",NUM_COMPTE=" + String.valueOf(NUM_COMPTE));
            sb.append(",NUM_PENSION=" + NUM_PENSION);
            sb.append(",NUM_PPR=" + NUM_PPR);
            sb.append(",NUM_TELEPHONE=" + NUM_TELEPHONE);
            sb.append(",PAYS=" + PAYS);
            sb.append(",POINT_INDICE=" + POINT_INDICE);
            sb.append(",PRENOM=" + PRENOM);
            sb.append(",PRENOM_ARABE=" + PRENOM_ARABE);
            sb.append(",RENOUVELLEMENT=" + String.valueOf(RENOUVELLEMENT));
            sb.append(",RETENUCMRRECENTE=" + String.valueOf(RETENUCMRRECENTE));
            sb.append(",TAUX_MUTUELLE=" + String.valueOf(TAUX_MUTUELLE));
            sb.append(",TYPE_DE_PENSION=" + TYPE_DE_PENSION);
            sb.append(",ADHERENT_DETAIL_ID=" + String.valueOf(ADHERENT_DETAIL_ID));
            sb.append(",COMMUNE_REF_ID=" + String.valueOf(COMMUNE_REF_ID));
            sb.append(",ECHELLE_REF_ID=" + String.valueOf(ECHELLE_REF_ID));
            sb.append(",ETABLISSEMENT_CONV_REF_ID=" + String.valueOf(ETABLISSEMENT_CONV_REF_ID));
            sb.append(",ETABLISSEMENT_PRIVE_REF_ID=" + String.valueOf(ETABLISSEMENT_PRIVE_REF_ID));
            sb.append(",FONCTION_REF_ID=" + String.valueOf(FONCTION_REF_ID));
            sb.append(",GRADE_REF_ID=" + String.valueOf(GRADE_REF_ID));
            sb.append(",MOTIF_RETRAITE_REF_ID=" + String.valueOf(MOTIF_RETRAITE_REF_ID));
            sb.append(",PROVINCE_REF_ID=" + String.valueOf(PROVINCE_REF_ID));
            sb.append(",REGION_REF_ID=" + String.valueOf(REGION_REF_ID));
            sb.append(",TYPE_ARRIVEE_REF_ID=" + String.valueOf(TYPE_ARRIVEE_REF_ID));
            sb.append(",TYPE_RETRAITE_REF_ID=" + String.valueOf(TYPE_RETRAITE_REF_ID));
            sb.append(",VILLE_REF_ID=" + String.valueOf(VILLE_REF_ID));
            sb.append(",AYANT_DROIT_TYPE=" + AYANT_DROIT_TYPE);
            sb.append(",ADHERENT_DECEDE_ID=" + String.valueOf(ADHERENT_DECEDE_ID));
            sb.append(",HAVE_TUTEUR=" + String.valueOf(HAVE_TUTEUR));
            sb.append(",TUTEUR_STATUT=" + TUTEUR_STATUT);
            sb.append(",TUTEUR_TYPE=" + TUTEUR_TYPE);
            sb.append(",IS_COTISATION_CHANGE=" + String.valueOf(IS_COTISATION_CHANGE));
            sb.append(",NUM_DOSSIER=" + NUM_DOSSIER);
            sb.append(",DATE_DE_RADIATION=" + String.valueOf(DATE_DE_RADIATION));
            sb.append(",MOTIF_RADAITION_REF_ID=" + String.valueOf(MOTIF_RADAITION_REF_ID));
            sb.append(",NET_MENSUEL=" + String.valueOf(NET_MENSUEL));
            sb.append(",ECART=" + String.valueOf(ECART));
            sb.append(",PENSION_REGIME=" + PENSION_REGIME);
            sb.append(",ETABLISSEMENT_DETACHEMENT_ID=" + String.valueOf(ETABLISSEMENT_DETACHEMENT_ID));
            sb.append(",NUM_DOSSIERCMR=" + NUM_DOSSIERCMR);
            sb.append(",MOTIF_REJET_REF_ID=" + String.valueOf(MOTIF_REJET_REF_ID));
            sb.append(",ANNULATION=" + String.valueOf(ANNULATION));
            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row2Struct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.NUM_PPR, other.NUM_PPR);
            if (returnValue != 0) {
                return returnValue;
            }


            return returnValue;
        }


        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }


    }

    public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
        globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

        final boolean execStat = this.execStat;

        String iterateId = "";


        String currentComponent = "";
        java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

        try {
            // TDI-39566 avoid throwing an useless Exception
            boolean resumeIt = true;
            if (globalResumeTicket == false && resumeEntryMethodName != null) {
                String currentMethodName = new Exception().getStackTrace()[0].getMethodName();
                resumeIt = resumeEntryMethodName.equals(currentMethodName);
            }
            if (resumeIt || globalResumeTicket) { //start the resume
                globalResumeTicket = true;


                row2Struct row2 = new row2Struct();


                /**
                 * [tAdvancedHash_row2 begin ] start
                 */


                ok_Hash.put("tAdvancedHash_row2", false);
                start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());


                currentComponent = "tAdvancedHash_row2";


                if (execStat) {
                    runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
                }
                int tos_count_tAdvancedHash_row2 = 0;
                org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 =
                        org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
                org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
                        <row2Struct>getLookup(matchingModeEnum_row2);

                globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

                ok_Hash.put("tDBInput_2", false);
                start_Hash.put("tDBInput_2", System.currentTimeMillis());


                currentComponent = "tDBInput_2";


                int tos_count_tDBInput_2 = 0;


                org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();

                List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
                String[] talendToDBArray_tDBInput_2 = new String[]{"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL", "DECIMAL IDENTITY", "REAL"};
                java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2);
                int nb_line_tDBInput_2 = 0;
                java.sql.Connection conn_tDBInput_2 = null;
                String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
                Class jdbcclazz_tDBInput_2 = Class.forName(driverClass_tDBInput_2);
                String dbUser_tDBInput_2 = username;


                final String decryptedPassword_tDBInput_2 = password;
                        PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:uQiwXLfcDskylj7U+3ksqTPZhvF9+VYUEAUC07Egd28a4e40rBR64g==");

                String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

                String port_tDBInput_2 = port;
                String dbname_tDBInput_2 = name;
                String url_tDBInput_2 = url;
                if (!"".equals(port_tDBInput_2)) {
                    url_tDBInput_2 += ":" + port;
                }
                if (!"".equals(dbname_tDBInput_2)) {
                    url_tDBInput_2 += "//" + name;
                }
                url_tDBInput_2 += ";appName=" + projectName + ";" + "";
                String dbschema_tDBInput_2 = "";

                conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2, dbPwd_tDBInput_2);


                java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

                String dbquery_tDBInput_2 = "SELECT ADHERENT.\"ID\",\n		ADHERENT.CREATED_BY,\n		ADHERENT.CREATED_ON,\n		ADHERENT.REQUEST_ORIGIN,\n		ADHERENT.UPDATED_BY,"
                        + "\n		ADHERENT.UPDATED_ON,\n		ADHERENT.VERSION,\n		ADHERENT.NOTE,\n		ADHERENT.ACTIF,\n		ADHERENT.ACTION,\n		ADHERENT.ADHERENT_SI"
                        + "TUATION,\n		ADHERENT.ADHERENT_STATUT,\n		ADHERENT.ADHERENT_TYPE,\n		ADHERENT.ADMINISTRATION_DE_DETACHMENT,\n		ADHERENT.ADMIN"
                        + "ISTRATION_ORIGINE,\n		ADHERENT.ADRESSE,\n		ADHERENT.ADRESSE_ARABE,\n		ADHERENT.AGE_RETRAITE,\n		ADHERENT.AUTONOME,\n		ADHEREN"
                        + "T.BIENTOT_ETRE_RETRAITE,\n		ADHERENT.BRUT_ANNUEL,\n		ADHERENT.CNIE,\n		ADHERENT.CODE_AVANCE,\n		ADHERENT.CODE_MUTUELLE,\n	"
                        + "	ADHERENT.CORRESPONDANT,\n		ADHERENT.COTISATION_ESTIMEE,\n		ADHERENT.DATE_CON"
                        + "FIRMATION,\n		ADHERENT.DATE_DE_DEBUT_DE_DETACHEMENT,\n		ADHERENT.DATE_DE_FIN_DE_DETACHEMENT,\n		ADHERENT.DATE_DE_REMISE_PEN"
                        + "SION,\n		ADHERENT.DATE_DECES,\n		ADHERENT.DATE_EFFET_SITUATION,\n		ADHERENT.DATE_NAISSANCE,\n		ADHERENT.DATE_RECRUTEMENT,\n		"
                        + "ADHERENT.DATE_RETRAITE,\n		ADHERENT.DELEGATION,\n		ADHERENT.DEPARETEMENT,\n		ADHERENT.EMAIL,\n		ADHERENT.ETABLISSEMENT_ORIGI"
                        + "NE,\n		ADHERENT.GENRE,\n		ADHERENT.GSM,\n		ADHERENT.IMAGE,\n		ADHERENT.IMPUTATION,\n		ADHERENT.IS_NOTIFICATION_FILTER,\n		ADHE"
                        + "RENT.LIEU_DECES,\n ADHERENT.MATRICULE,\n		ADHERENT.MODE_CALCUL,\n		ADHERE"
                        + "NT.MODE_COTISATION,\n		ADHERENT.MODE_PAIEMENT,\n		ADHERENT.MODE_REGLEMENT,\n		ADHERENT.MOTIF_RADIATION,\n		ADHERENT.MOTIF_RE"
                        + "JET,\n		ADHERENT.NET_ANNUEL,\n		ADHERENT.NOM,\n		ADHERENT.NOM_ARABE,\n		ADHERENT.NUM_ADHERENT,\n		ADHERENT.NUM_COMPTE,\n		ADHE"
                        + "RENT.NUM_PENSION,\n		ADHERENT.NUM_PPR,\n		ADHERENT.NUM_TELEPHONE,\n	ADHERENT.PAYS,\n	ADHERENT.POINT_INDICE,\n		ADHERENT.PRENOM,\n		ADHERENT.PRENOM_ARABE,\n"
                        + "		ADHERENT.RENOUVELLEMENT,\n		ADHERENT.RETENUCMRRECENTE,\n		ADHERENT.TAUX_MUTUELLE,\n		ADHERENT.TYPE_DE_PENSION,\n		ADHERENT"
                        + ".ADHERENT_DETAIL_ID,\n		ADHERENT.COMMUNE_REF_ID,\n		ADHERENT.ECHELLE_REF_ID,\n		ADHERENT.ETABLISSEMENT_CONV_REF_ID,\n		ADHER"
                        + "ENT.ETABLISSEMENT_PRIVE_REF_ID,\n		ADHERENT.FONCTION_REF_ID,\n		ADHERENT.GRADE_REF_ID,\n		ADHERENT.MOTIF_RETRAITE_REF_ID,\n	"
                        + "	ADHERENT.PROVINCE_REF_ID,\n		ADHERENT.REGION_REF_ID,\n		ADHERENT.TYPE_ARRIVEE_REF_ID,\n		ADHERENT.TYPE_RETRAITE_REF_ID,\n		"
                        + "ADHERENT.VILLE_REF_ID,\n	ADHERENT.AYANT_DROIT_TYPE,\n		ADHERENT.ADHERENT"
                        + "_DECEDE_ID,\n	ADHERENT.HAVE_TUTEUR,\n		ADHERENT.TUTEUR_STATUT,\n		ADHERENT.TUTEUR_TYPE,\n		A"
                        + "DHERENT.IS_COTISATION_CHANGE,\n		ADHERENT.NUM_DOSSIER,\n		ADHERENT.DATE_DE_RADIATION,\n		ADHERENT.MOTIF_RADAITION_REF_ID,\n	"
                        + "	ADHERENT.NET_MENSUEL,\n		ADHERENT.ECART,\n		ADHERENT.PENSION_REGIME,\n	ADHERENT.ETABLISSEMENT_"
                        + "DETACHEMENT_ID,\n		ADHERENT.NUM_DOSSIERCMR,\n		ADHERENT.MOTIF_REJET_REF_ID,\n		ADHERENT.ANNULATION\nFROM	ADHERENT";


                globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
                java.sql.ResultSet rs_tDBInput_2 = null;

                try {
                    rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
                    java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
                    int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

                    String tmpContent_tDBInput_2 = null;


                    while (rs_tDBInput_2.next()) {
                        nb_line_tDBInput_2++;

                        if (colQtyInRs_tDBInput_2 < 1) {
                            row2.ID = 0;
                        } else {

                            row2.ID = rs_tDBInput_2.getLong(1);
                            if (rs_tDBInput_2.wasNull()) {
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 2) {
                            row2.CREATED_BY = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.CREATED_BY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.CREATED_BY = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.CREATED_BY = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 3) {
                            row2.CREATED_ON = null;
                        } else {

                            row2.CREATED_ON = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 3);

                        }
                        if (colQtyInRs_tDBInput_2 < 4) {
                            row2.REQUEST_ORIGIN = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.REQUEST_ORIGIN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.REQUEST_ORIGIN = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.REQUEST_ORIGIN = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 5) {
                            row2.UPDATED_BY = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(5);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.UPDATED_BY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.UPDATED_BY = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.UPDATED_BY = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 6) {
                            row2.UPDATED_ON = null;
                        } else {

                            row2.UPDATED_ON = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 6);

                        }
                        if (colQtyInRs_tDBInput_2 < 7) {
                            row2.VERSION = null;
                        } else {

                            row2.VERSION = rs_tDBInput_2.getLong(7);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.VERSION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 8) {
                            row2.NOTE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(8);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.NOTE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.NOTE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.NOTE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 9) {
                            row2.ACTIF = false;
                        } else {

                            row2.ACTIF = rs_tDBInput_2.getBoolean(9);
                            if (rs_tDBInput_2.wasNull()) {
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 10) {
                            row2.ACTION = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.ACTION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.ACTION = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.ACTION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 11) {
                            row2.ADHERENT_SITUATION = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(11);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.ADHERENT_SITUATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.ADHERENT_SITUATION = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.ADHERENT_SITUATION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 12) {
                            row2.ADHERENT_STATUT = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(12);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.ADHERENT_STATUT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.ADHERENT_STATUT = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.ADHERENT_STATUT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 13) {
                            row2.ADHERENT_TYPE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(13);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.ADHERENT_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.ADHERENT_TYPE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.ADHERENT_TYPE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 14) {
                            row2.ADMINISTRATION_DE_DETACHMENT = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(14);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.ADMINISTRATION_DE_DETACHMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.ADMINISTRATION_DE_DETACHMENT = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.ADMINISTRATION_DE_DETACHMENT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 15) {
                            row2.ADMINISTRATION_ORIGINE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(15);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.ADMINISTRATION_ORIGINE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.ADMINISTRATION_ORIGINE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.ADMINISTRATION_ORIGINE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 16) {
                            row2.ADRESSE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(16);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.ADRESSE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.ADRESSE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.ADRESSE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 17) {
                            row2.ADRESSE_ARABE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(17);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.ADRESSE_ARABE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.ADRESSE_ARABE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.ADRESSE_ARABE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 18) {
                            row2.AGE_RETRAITE = null;
                        } else {

                            row2.AGE_RETRAITE = rs_tDBInput_2.getInt(18);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.AGE_RETRAITE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 19) {
                            row2.AUTONOME = null;
                        } else {

                            row2.AUTONOME = rs_tDBInput_2.getBoolean(19);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.AUTONOME = null;
                            }
                        }
                        row2.BIENTOT_ETRE_RETRAITE = false;
                        if (colQtyInRs_tDBInput_2 < 21) {
                            row2.BRUT_ANNUEL = null;
                        } else {

                            row2.BRUT_ANNUEL = rs_tDBInput_2.getDouble(21);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.BRUT_ANNUEL = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 22) {
                            row2.CNIE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(22);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.CNIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.CNIE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.CNIE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 23) {
                            row2.CODE_AVANCE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(23);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.CODE_AVANCE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.CODE_AVANCE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.CODE_AVANCE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 24) {
                            row2.CODE_MUTUELLE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(24);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.CODE_MUTUELLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.CODE_MUTUELLE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.CODE_MUTUELLE = null;
                            }
                        }

                        if (colQtyInRs_tDBInput_2 < 27) {
                            row2.CORRESPONDANT = false;
                        } else {

                            row2.CORRESPONDANT = rs_tDBInput_2.getBoolean(27);
                            if (rs_tDBInput_2.wasNull()) {
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 28) {
                            row2.COTISATION_ESTIMEE = 0;
                        } else {

                            row2.COTISATION_ESTIMEE = rs_tDBInput_2.getDouble(28);
                            if (rs_tDBInput_2.wasNull()) {

                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 29) {
                            row2.DATE_CONFIRMATION = null;
                        } else {

                            row2.DATE_CONFIRMATION = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 29);

                        }
                        if (colQtyInRs_tDBInput_2 < 30) {
                            row2.DATE_DE_DEBUT_DE_DETACHEMENT = null;
                        } else {

                            row2.DATE_DE_DEBUT_DE_DETACHEMENT = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 30);

                        }
                        if (colQtyInRs_tDBInput_2 < 31) {
                            row2.DATE_DE_FIN_DE_DETACHEMENT = null;
                        } else {

                            row2.DATE_DE_FIN_DE_DETACHEMENT = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 31);

                        }
                        if (colQtyInRs_tDBInput_2 < 32) {
                            row2.DATE_DE_REMISE_PENSION = null;
                        } else {

                            row2.DATE_DE_REMISE_PENSION = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 32);

                        }
                        if (colQtyInRs_tDBInput_2 < 33) {
                            row2.DATE_DECES = null;
                        } else {

                            row2.DATE_DECES = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 33);

                        }
                        if (colQtyInRs_tDBInput_2 < 34) {
                            row2.DATE_EFFET_SITUATION = null;
                        } else {

                            row2.DATE_EFFET_SITUATION = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 34);

                        }
                        if (colQtyInRs_tDBInput_2 < 35) {
                            row2.DATE_NAISSANCE = null;
                        } else {

                            row2.DATE_NAISSANCE = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 35);

                        }
                        if (colQtyInRs_tDBInput_2 < 36) {
                            row2.DATE_RECRUTEMENT = null;
                        } else {

                            row2.DATE_RECRUTEMENT = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 36);

                        }
                        if (colQtyInRs_tDBInput_2 < 37) {
                            row2.DATE_RETRAITE = null;
                        } else {

                            row2.DATE_RETRAITE = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 37);

                        }
                        if (colQtyInRs_tDBInput_2 < 38) {
                            row2.DELEGATION = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(38);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.DELEGATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.DELEGATION = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.DELEGATION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 39) {
                            row2.DEPARETEMENT = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(39);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.DEPARETEMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.DEPARETEMENT = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.DEPARETEMENT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 40) {
                            row2.EMAIL = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(40);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.EMAIL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.EMAIL = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.EMAIL = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 41) {
                            row2.ETABLISSEMENT_ORIGINE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(41);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.ETABLISSEMENT_ORIGINE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.ETABLISSEMENT_ORIGINE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.ETABLISSEMENT_ORIGINE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 42) {
                            row2.GENRE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(42);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.GENRE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.GENRE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.GENRE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 43) {
                            row2.GSM = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(43);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(43).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.GSM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.GSM = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.GSM = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 44) {
                            row2.IMAGE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(44);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.IMAGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.IMAGE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.IMAGE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 45) {
                            row2.IMPUTATION = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(45);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.IMPUTATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.IMPUTATION = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.IMPUTATION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 46) {
                            row2.IS_NOTIFICATION_FILTER = null;
                        } else {

                            row2.IS_NOTIFICATION_FILTER = rs_tDBInput_2.getBoolean(46);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.IS_NOTIFICATION_FILTER = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 47) {
                            row2.LIEU_DECES = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(47);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(47).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.LIEU_DECES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.LIEU_DECES = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.LIEU_DECES = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 51) {
                            row2.MODE_CALCUL = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(51);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(51).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.MODE_CALCUL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.MODE_CALCUL = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.MODE_CALCUL = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 52) {
                            row2.MODE_COTISATION = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(52);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(52).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.MODE_COTISATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.MODE_COTISATION = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.MODE_COTISATION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 53) {
                            row2.MODE_PAIEMENT = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(53);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(53).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.MODE_PAIEMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.MODE_PAIEMENT = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.MODE_PAIEMENT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 54) {
                            row2.MODE_REGLEMENT = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(54);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(54).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.MODE_REGLEMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.MODE_REGLEMENT = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.MODE_REGLEMENT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 55) {
                            row2.MOTIF_RADIATION = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(55);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(55).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.MOTIF_RADIATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.MOTIF_RADIATION = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.MOTIF_RADIATION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 56) {
                            row2.MOTIF_REJET = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(56);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(56).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.MOTIF_REJET = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.MOTIF_REJET = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.MOTIF_REJET = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 57) {
                            row2.NET_ANNUEL = null;
                        } else {

                            row2.NET_ANNUEL = rs_tDBInput_2.getDouble(57);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.NET_ANNUEL = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 58) {
                            row2.NOM = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(58);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(58).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.NOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.NOM = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.NOM = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 59) {
                            row2.NOM_ARABE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(59);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(59).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.NOM_ARABE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.NOM_ARABE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.NOM_ARABE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 60) {
                            row2.NUM_ADHERENT = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(60);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(60).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.NUM_ADHERENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.NUM_ADHERENT = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.NUM_ADHERENT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 61) {
                            row2.NUM_COMPTE = null;
                        } else {

                            row2.NUM_COMPTE = rs_tDBInput_2.getInt(61);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.NUM_COMPTE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 62) {
                            row2.NUM_PENSION = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(62);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(62).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.NUM_PENSION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.NUM_PENSION = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.NUM_PENSION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 63) {
                            row2.NUM_PPR = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(63);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(63).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.NUM_PPR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.NUM_PPR = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.NUM_PPR = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 64) {
                            row2.NUM_TELEPHONE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(64);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(64).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.NUM_TELEPHONE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.NUM_TELEPHONE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.NUM_TELEPHONE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 67) {
                            row2.PAYS = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(67);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(67).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.PAYS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.PAYS = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.PAYS = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 69) {
                            row2.POINT_INDICE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(69);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(69).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.POINT_INDICE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.POINT_INDICE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.POINT_INDICE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 70) {
                            row2.PRENOM = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(70);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(70).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.PRENOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.PRENOM = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.PRENOM = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 71) {
                            row2.PRENOM_ARABE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(71);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(71).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.PRENOM_ARABE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.PRENOM_ARABE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.PRENOM_ARABE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 72) {
                            row2.RENOUVELLEMENT = null;
                        } else {

                            row2.RENOUVELLEMENT = rs_tDBInput_2.getBoolean(72);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.RENOUVELLEMENT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 73) {
                            row2.RETENUCMRRECENTE = null;
                        } else {

                            row2.RETENUCMRRECENTE = rs_tDBInput_2.getDouble(73);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.RETENUCMRRECENTE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 74) {
                            row2.TAUX_MUTUELLE = 0;
                        } else {

                            row2.TAUX_MUTUELLE = rs_tDBInput_2.getDouble(74);
                            if (rs_tDBInput_2.wasNull()) {
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 75) {
                            row2.TYPE_DE_PENSION = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(75);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(75).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.TYPE_DE_PENSION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.TYPE_DE_PENSION = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.TYPE_DE_PENSION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 76) {
                            row2.ADHERENT_DETAIL_ID = null;
                        } else {

                            row2.ADHERENT_DETAIL_ID = rs_tDBInput_2.getLong(76);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.ADHERENT_DETAIL_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 77) {
                            row2.COMMUNE_REF_ID = null;
                        } else {

                            row2.COMMUNE_REF_ID = rs_tDBInput_2.getLong(77);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.COMMUNE_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 78) {
                            row2.ECHELLE_REF_ID = null;
                        } else {

                            row2.ECHELLE_REF_ID = rs_tDBInput_2.getLong(78);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.ECHELLE_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 79) {
                            row2.ETABLISSEMENT_CONV_REF_ID = null;
                        } else {

                            row2.ETABLISSEMENT_CONV_REF_ID = rs_tDBInput_2.getLong(79);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.ETABLISSEMENT_CONV_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 80) {
                            row2.ETABLISSEMENT_PRIVE_REF_ID = null;
                        } else {

                            row2.ETABLISSEMENT_PRIVE_REF_ID = rs_tDBInput_2.getLong(80);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.ETABLISSEMENT_PRIVE_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 81) {
                            row2.FONCTION_REF_ID = null;
                        } else {

                            row2.FONCTION_REF_ID = rs_tDBInput_2.getLong(81);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.FONCTION_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 82) {
                            row2.GRADE_REF_ID = null;
                        } else {

                            row2.GRADE_REF_ID = rs_tDBInput_2.getLong(82);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.GRADE_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 83) {
                            row2.MOTIF_RETRAITE_REF_ID = null;
                        } else {

                            row2.MOTIF_RETRAITE_REF_ID = rs_tDBInput_2.getLong(83);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.MOTIF_RETRAITE_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 84) {
                            row2.PROVINCE_REF_ID = null;
                        } else {

                            row2.PROVINCE_REF_ID = rs_tDBInput_2.getLong(84);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.PROVINCE_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 85) {
                            row2.REGION_REF_ID = null;
                        } else {

                            row2.REGION_REF_ID = rs_tDBInput_2.getLong(85);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.REGION_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 86) {
                            row2.TYPE_ARRIVEE_REF_ID = null;
                        } else {

                            row2.TYPE_ARRIVEE_REF_ID = rs_tDBInput_2.getLong(86);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.TYPE_ARRIVEE_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 87) {
                            row2.TYPE_RETRAITE_REF_ID = null;
                        } else {

                            row2.TYPE_RETRAITE_REF_ID = rs_tDBInput_2.getLong(87);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.TYPE_RETRAITE_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 88) {
                            row2.VILLE_REF_ID = null;
                        } else {

                            row2.VILLE_REF_ID = rs_tDBInput_2.getLong(88);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.VILLE_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 91) {
                            row2.AYANT_DROIT_TYPE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(91);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(91).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.AYANT_DROIT_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.AYANT_DROIT_TYPE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.AYANT_DROIT_TYPE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 92) {
                            row2.ADHERENT_DECEDE_ID = null;
                        } else {

                            row2.ADHERENT_DECEDE_ID = rs_tDBInput_2.getLong(92);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.ADHERENT_DECEDE_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 94) {
                            row2.HAVE_TUTEUR = null;
                        } else {

                            row2.HAVE_TUTEUR = rs_tDBInput_2.getBoolean(94);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.HAVE_TUTEUR = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 95) {
                            row2.TUTEUR_STATUT = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(95);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(95).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.TUTEUR_STATUT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.TUTEUR_STATUT = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.TUTEUR_STATUT = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 96) {
                            row2.TUTEUR_TYPE = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(96);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(96).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.TUTEUR_TYPE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.TUTEUR_TYPE = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.TUTEUR_TYPE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 97) {
                            row2.IS_COTISATION_CHANGE = null;
                        } else {

                            row2.IS_COTISATION_CHANGE = rs_tDBInput_2.getBoolean(97);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.IS_COTISATION_CHANGE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 98) {
                            row2.NUM_DOSSIER = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(98);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(98).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.NUM_DOSSIER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.NUM_DOSSIER = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.NUM_DOSSIER = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 99) {
                            row2.DATE_DE_RADIATION = null;
                        } else {

                            row2.DATE_DE_RADIATION = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 99);

                        }
                        if (colQtyInRs_tDBInput_2 < 100) {
                            row2.MOTIF_RADAITION_REF_ID = null;
                        } else {

                            row2.MOTIF_RADAITION_REF_ID = rs_tDBInput_2.getLong(100);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.MOTIF_RADAITION_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 101) {
                            row2.NET_MENSUEL = null;
                        } else {

                            row2.NET_MENSUEL = rs_tDBInput_2.getDouble(101);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.NET_MENSUEL = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 102) {
                            row2.ECART = null;
                        } else {

                            row2.ECART = rs_tDBInput_2.getDouble(102);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.ECART = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 103) {
                            row2.PENSION_REGIME = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(103);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(103).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.PENSION_REGIME = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.PENSION_REGIME = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.PENSION_REGIME = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 105) {
                            row2.ETABLISSEMENT_DETACHEMENT_ID = null;
                        } else {

                            row2.ETABLISSEMENT_DETACHEMENT_ID = rs_tDBInput_2.getLong(105);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.ETABLISSEMENT_DETACHEMENT_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 106) {
                            row2.NUM_DOSSIERCMR = null;
                        } else {

                            tmpContent_tDBInput_2 = rs_tDBInput_2.getString(106);
                            if (tmpContent_tDBInput_2 != null) {
                                if (talendToDBList_tDBInput_2.contains(rsmd_tDBInput_2.getColumnTypeName(106).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row2.NUM_DOSSIERCMR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
                                } else {
                                    row2.NUM_DOSSIERCMR = tmpContent_tDBInput_2;
                                }
                            } else {
                                row2.NUM_DOSSIERCMR = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 107) {
                            row2.MOTIF_REJET_REF_ID = null;
                        } else {

                            row2.MOTIF_REJET_REF_ID = rs_tDBInput_2.getLong(107);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.MOTIF_REJET_REF_ID = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_2 < 108) {
                            row2.ANNULATION = null;
                        } else {

                            row2.ANNULATION = rs_tDBInput_2.getBoolean(108);
                            if (rs_tDBInput_2.wasNull()) {
                                row2.ANNULATION = null;
                            }
                        }


/**
 * [tDBInput_2 begin ] stop
 */

                        /**
                         * [tDBInput_2 main ] start
                         */


                        currentComponent = "tDBInput_2";


                        tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */

                        /**
                         * [tDBInput_2 process_data_begin ] start
                         */


                        currentComponent = "tDBInput_2";


/**
 * [tDBInput_2 process_data_begin ] stop
 */


                        /**
                         * [tAdvancedHash_row2 main ] start
                         */


                        currentComponent = "tAdvancedHash_row2";


                        if (execStat) {
                            runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
                        }


                        row2Struct row2_HashRow = new row2Struct();


                        row2_HashRow.ID = row2.ID;

                        row2_HashRow.CREATED_BY = row2.CREATED_BY;

                        row2_HashRow.CREATED_ON = row2.CREATED_ON;

                        row2_HashRow.REQUEST_ORIGIN = row2.REQUEST_ORIGIN;

                        row2_HashRow.UPDATED_BY = row2.UPDATED_BY;

                        row2_HashRow.UPDATED_ON = row2.UPDATED_ON;

                        row2_HashRow.VERSION = row2.VERSION;

                        row2_HashRow.NOTE = row2.NOTE;

                        row2_HashRow.ACTIF = row2.ACTIF;

                        row2_HashRow.ACTION = row2.ACTION;

                        row2_HashRow.ADHERENT_SITUATION = row2.ADHERENT_SITUATION;

                        row2_HashRow.ADHERENT_STATUT = row2.ADHERENT_STATUT;

                        row2_HashRow.ADHERENT_TYPE = row2.ADHERENT_TYPE;

                        row2_HashRow.ADMINISTRATION_DE_DETACHMENT = row2.ADMINISTRATION_DE_DETACHMENT;

                        row2_HashRow.ADMINISTRATION_ORIGINE = row2.ADMINISTRATION_ORIGINE;

                        row2_HashRow.ADRESSE = row2.ADRESSE;

                        row2_HashRow.ADRESSE_ARABE = row2.ADRESSE_ARABE;

                        row2_HashRow.AGE_RETRAITE = row2.AGE_RETRAITE;

                        row2_HashRow.AUTONOME = row2.AUTONOME;

                        row2_HashRow.BIENTOT_ETRE_RETRAITE = row2.BIENTOT_ETRE_RETRAITE;

                        row2_HashRow.BRUT_ANNUEL = row2.BRUT_ANNUEL;

                        row2_HashRow.CNIE = row2.CNIE;

                        row2_HashRow.CODE_AVANCE = row2.CODE_AVANCE;

                        row2_HashRow.CODE_MUTUELLE = row2.CODE_MUTUELLE;

                        row2_HashRow.CORRESPONDANT = row2.CORRESPONDANT;

                        row2_HashRow.COTISATION_ESTIMEE = row2.COTISATION_ESTIMEE;

                        row2_HashRow.DATE_CONFIRMATION = row2.DATE_CONFIRMATION;

                        row2_HashRow.DATE_DE_DEBUT_DE_DETACHEMENT = row2.DATE_DE_DEBUT_DE_DETACHEMENT;

                        row2_HashRow.DATE_DE_FIN_DE_DETACHEMENT = row2.DATE_DE_FIN_DE_DETACHEMENT;

                        row2_HashRow.DATE_DE_REMISE_PENSION = row2.DATE_DE_REMISE_PENSION;

                        row2_HashRow.DATE_DECES = row2.DATE_DECES;

                        row2_HashRow.DATE_EFFET_SITUATION = row2.DATE_EFFET_SITUATION;

                        row2_HashRow.DATE_NAISSANCE = row2.DATE_NAISSANCE;

                        row2_HashRow.DATE_RECRUTEMENT = row2.DATE_RECRUTEMENT;

                        row2_HashRow.DATE_RETRAITE = row2.DATE_RETRAITE;

                        row2_HashRow.DELEGATION = row2.DELEGATION;

                        row2_HashRow.DEPARETEMENT = row2.DEPARETEMENT;

                        row2_HashRow.EMAIL = row2.EMAIL;

                        row2_HashRow.ETABLISSEMENT_ORIGINE = row2.ETABLISSEMENT_ORIGINE;

                        row2_HashRow.GENRE = row2.GENRE;

                        row2_HashRow.GSM = row2.GSM;

                        row2_HashRow.IMAGE = row2.IMAGE;

                        row2_HashRow.IMPUTATION = row2.IMPUTATION;

                        row2_HashRow.IS_NOTIFICATION_FILTER = row2.IS_NOTIFICATION_FILTER;

                        row2_HashRow.LIEU_DECES = row2.LIEU_DECES;

                        row2_HashRow.MODE_CALCUL = row2.MODE_CALCUL;

                        row2_HashRow.MODE_COTISATION = row2.MODE_COTISATION;

                        row2_HashRow.MODE_PAIEMENT = row2.MODE_PAIEMENT;

                        row2_HashRow.MODE_REGLEMENT = row2.MODE_REGLEMENT;

                        row2_HashRow.MOTIF_RADIATION = row2.MOTIF_RADIATION;

                        row2_HashRow.MOTIF_REJET = row2.MOTIF_REJET;

                        row2_HashRow.NET_ANNUEL = row2.NET_ANNUEL;

                        row2_HashRow.NOM = row2.NOM;

                        row2_HashRow.NOM_ARABE = row2.NOM_ARABE;

                        row2_HashRow.NUM_ADHERENT = row2.NUM_ADHERENT;

                        row2_HashRow.NUM_COMPTE = row2.NUM_COMPTE;

                        row2_HashRow.NUM_PENSION = row2.NUM_PENSION;

                        row2_HashRow.NUM_PPR = row2.NUM_PPR;

                        row2_HashRow.NUM_TELEPHONE = row2.NUM_TELEPHONE;

                        row2_HashRow.PAYS = row2.PAYS;

                        row2_HashRow.POINT_INDICE = row2.POINT_INDICE;

                        row2_HashRow.PRENOM = row2.PRENOM;

                        row2_HashRow.PRENOM_ARABE = row2.PRENOM_ARABE;

                        row2_HashRow.RENOUVELLEMENT = row2.RENOUVELLEMENT;

                        row2_HashRow.RETENUCMRRECENTE = row2.RETENUCMRRECENTE;

                        row2_HashRow.TAUX_MUTUELLE = row2.TAUX_MUTUELLE;

                        row2_HashRow.TYPE_DE_PENSION = row2.TYPE_DE_PENSION;

                        row2_HashRow.ADHERENT_DETAIL_ID = row2.ADHERENT_DETAIL_ID;

                        row2_HashRow.COMMUNE_REF_ID = row2.COMMUNE_REF_ID;

                        row2_HashRow.ECHELLE_REF_ID = row2.ECHELLE_REF_ID;

                        row2_HashRow.ETABLISSEMENT_CONV_REF_ID = row2.ETABLISSEMENT_CONV_REF_ID;

                        row2_HashRow.ETABLISSEMENT_PRIVE_REF_ID = row2.ETABLISSEMENT_PRIVE_REF_ID;

                        row2_HashRow.FONCTION_REF_ID = row2.FONCTION_REF_ID;

                        row2_HashRow.GRADE_REF_ID = row2.GRADE_REF_ID;

                        row2_HashRow.MOTIF_RETRAITE_REF_ID = row2.MOTIF_RETRAITE_REF_ID;

                        row2_HashRow.PROVINCE_REF_ID = row2.PROVINCE_REF_ID;

                        row2_HashRow.REGION_REF_ID = row2.REGION_REF_ID;

                        row2_HashRow.TYPE_ARRIVEE_REF_ID = row2.TYPE_ARRIVEE_REF_ID;

                        row2_HashRow.TYPE_RETRAITE_REF_ID = row2.TYPE_RETRAITE_REF_ID;

                        row2_HashRow.VILLE_REF_ID = row2.VILLE_REF_ID;

                        row2_HashRow.AYANT_DROIT_TYPE = row2.AYANT_DROIT_TYPE;

                        row2_HashRow.ADHERENT_DECEDE_ID = row2.ADHERENT_DECEDE_ID;

                        row2_HashRow.HAVE_TUTEUR = row2.HAVE_TUTEUR;

                        row2_HashRow.TUTEUR_STATUT = row2.TUTEUR_STATUT;

                        row2_HashRow.TUTEUR_TYPE = row2.TUTEUR_TYPE;

                        row2_HashRow.IS_COTISATION_CHANGE = row2.IS_COTISATION_CHANGE;

                        row2_HashRow.NUM_DOSSIER = row2.NUM_DOSSIER;

                        row2_HashRow.DATE_DE_RADIATION = row2.DATE_DE_RADIATION;

                        row2_HashRow.MOTIF_RADAITION_REF_ID = row2.MOTIF_RADAITION_REF_ID;

                        row2_HashRow.NET_MENSUEL = row2.NET_MENSUEL;

                        row2_HashRow.ECART = row2.ECART;

                        row2_HashRow.PENSION_REGIME = row2.PENSION_REGIME;

                        row2_HashRow.ETABLISSEMENT_DETACHEMENT_ID = row2.ETABLISSEMENT_DETACHEMENT_ID;

                        row2_HashRow.NUM_DOSSIERCMR = row2.NUM_DOSSIERCMR;

                        row2_HashRow.MOTIF_REJET_REF_ID = row2.MOTIF_REJET_REF_ID;

                        row2_HashRow.ANNULATION = row2.ANNULATION;

                        tHash_Lookup_row2.put(row2_HashRow);


                        tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */

                        /**
                         * [tAdvancedHash_row2 process_data_begin ] start
                         */


                        currentComponent = "tAdvancedHash_row2";


/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */

                        /**
                         * [tAdvancedHash_row2 process_data_end ] start
                         */


                        currentComponent = "tAdvancedHash_row2";


/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */


                        /**
                         * [tDBInput_2 process_data_end ] start
                         */


                        currentComponent = "tDBInput_2";


/**
 * [tDBInput_2 process_data_end ] stop
 */

                        /**
                         * [tDBInput_2 end ] start
                         */


                        currentComponent = "tDBInput_2";


                    }
                } finally {
                    if (rs_tDBInput_2 != null) {
                        rs_tDBInput_2.close();
                    }
                    if (stmt_tDBInput_2 != null) {
                        stmt_tDBInput_2.close();
                    }
                    if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

                        conn_tDBInput_2.close();

                        if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
                                && BundleUtils.inOSGi()) {
                            Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
                                    getMethod("checkedShutdown").invoke(null, (Object[]) null);
                        }

                    }
                }
                globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);


                ok_Hash.put("tDBInput_2", true);
                end_Hash.put("tDBInput_2", System.currentTimeMillis());


/**
 * [tDBInput_2 end ] stop
 */


                /**
                 * [tAdvancedHash_row2 end ] start
                 */


                currentComponent = "tAdvancedHash_row2";


                tHash_Lookup_row2.endPut();

                if (execStat) {
                    runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
                }


                ok_Hash.put("tAdvancedHash_row2", true);
                end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());


/**
 * [tAdvancedHash_row2 end ] stop
 */


            }//end the resume


        } catch (Exception e) {

            TalendException te = new TalendException(e, currentComponent, globalMap);

            throw te;
        } catch (Error error) {

            runStat.stopThreadStat();

            throw error;
        } finally {

            try {


                /**
                 * [tDBInput_2 finally ] start
                 */


                currentComponent = "tDBInput_2";


/**
 * [tDBInput_2 finally ] stop
 */


                /**
                 * [tAdvancedHash_row2 finally ] start
                 */


                currentComponent = "tAdvancedHash_row2";


/**
 * [tAdvancedHash_row2 finally ] stop
 */


            } catch (Exception e) {
                //ignore
            } catch (Error error) {
                //ignore
            }
            resourceMap = null;
        }


        globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
    }


    public static class row3Struct implements IPersistableComparableLookupRow<row3Struct> {
        final static byte[] commonByteArrayLock_FM6_INSERT_ADHERENT = new byte[0];
        static byte[] commonByteArray_FM6_INSERT_ADHERENT = new byte[0];
        protected static final int DEFAULT_HASHCODE = 1;
        protected static final int PRIME = 31;
        protected int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        public String loopKey;


        public long ID;

        public long getID() {
            return this.ID;
        }

        public String CREATED_BY;

        public String getCREATED_BY() {
            return this.CREATED_BY;
        }

        public Date CREATED_ON;

        public Date getCREATED_ON() {
            return this.CREATED_ON;
        }

        public String REQUEST_ORIGIN;

        public String getREQUEST_ORIGIN() {
            return this.REQUEST_ORIGIN;
        }

        public String UPDATED_BY;

        public String getUPDATED_BY() {
            return this.UPDATED_BY;
        }

        public Date UPDATED_ON;

        public Date getUPDATED_ON() {
            return this.UPDATED_ON;
        }

        public Long VERSION;

        public Long getVERSION() {
            return this.VERSION;
        }

        public String ABBREVIATION;

        public String getABBREVIATION() {
            return this.ABBREVIATION;
        }

        public Boolean ACTIF;

        public Boolean getACTIF() {
            return this.ACTIF;
        }

        public String CODE;

        public String getCODE() {
            return this.CODE;
        }

        public String LIBELLE;

        public String getLIBELLE() {
            return this.LIBELLE;
        }

        public String LIBELLE_ARABE;

        public String getLIBELLE_ARABE() {
            return this.LIBELLE_ARABE;
        }

        public String ECHANGE_CODE;

        public String getECHANGE_CODE() {
            return this.ECHANGE_CODE;
        }


        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + ((this.CODE == null) ? 0 : this.CODE.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
            final row3Struct other = (row3Struct) obj;

            if (this.CODE == null) {
                if (other.CODE != null)
                    return false;

            } else if (!this.CODE.equals(other.CODE))

                return false;


            return true;
        }

        public void copyDataTo(row3Struct other) {

            other.ID = this.ID;
            other.CREATED_BY = this.CREATED_BY;
            other.CREATED_ON = this.CREATED_ON;
            other.REQUEST_ORIGIN = this.REQUEST_ORIGIN;
            other.UPDATED_BY = this.UPDATED_BY;
            other.UPDATED_ON = this.UPDATED_ON;
            other.VERSION = this.VERSION;
            other.ABBREVIATION = this.ABBREVIATION;
            other.ACTIF = this.ACTIF;
            other.CODE = this.CODE;
            other.LIBELLE = this.LIBELLE;
            other.LIBELLE_ARABE = this.LIBELLE_ARABE;
            other.ECHANGE_CODE = this.ECHANGE_CODE;

        }

        public void copyKeysDataTo(row3Struct other) {

            other.CODE = this.CODE;

        }


        private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                byte[] byteArray = new byte[length];
                dis.read(byteArray);
                strReturn = new String(byteArray, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        private Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
            Date dateReturn = null;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                dateReturn = null;
            } else {
                dateReturn = new Date(dis.readLong());
            }
            return dateReturn;
        }

        private void writeDate(Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
            if (date1 == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeLong(date1.getTime());
            }
        }

        private String readString(ObjectInputStream dis) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                if (length > commonByteArray_FM6_INSERT_ADHERENT.length) {
                    if (length < 1024 && commonByteArray_FM6_INSERT_ADHERENT.length == 0) {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[1024];
                    } else {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[2 * length];
                    }
                }
                dis.readFully(commonByteArray_FM6_INSERT_ADHERENT, 0, length);
                strReturn = new String(commonByteArray_FM6_INSERT_ADHERENT, 0, length, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, ObjectOutputStream dos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        public void readKeysData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock_FM6_INSERT_ADHERENT) {

                try {

                    int length = 0;

                    this.CODE = readString(dis);

                } catch (IOException e) {
                    throw new RuntimeException(e);


                }


            }


        }

        public void writeKeysData(ObjectOutputStream dos) {
            try {


                // String

                writeString(this.CODE, dos);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }


        }


        /**
         * Fill Values data by reading ObjectInputStream.
         */
        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
            try {

                int length = 0;

                this.ID = dis.readLong();

                this.CREATED_BY = readString(dis, ois);

                this.CREATED_ON = readDate(dis, ois);

                this.REQUEST_ORIGIN = readString(dis, ois);

                this.UPDATED_BY = readString(dis, ois);

                this.UPDATED_ON = readDate(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.VERSION = null;
                } else {
                    this.VERSION = dis.readLong();
                }

                this.ABBREVIATION = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.ACTIF = null;
                } else {
                    this.ACTIF = dis.readBoolean();
                }

                this.LIBELLE = readString(dis, ois);

                this.LIBELLE_ARABE = readString(dis, ois);

                this.ECHANGE_CODE = readString(dis, ois);

            } catch (IOException e) {
                throw new RuntimeException(e);


            }


        }

        /**
         * Return a byte array which represents Values data.
         */
        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
            try {


                dos.writeLong(this.ID);

                writeString(this.CREATED_BY, dos, oos);

                writeDate(this.CREATED_ON, dos, oos);

                writeString(this.REQUEST_ORIGIN, dos, oos);

                writeString(this.UPDATED_BY, dos, oos);

                writeDate(this.UPDATED_ON, dos, oos);

                if (this.VERSION == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VERSION);
                }

                writeString(this.ABBREVIATION, dos, oos);

                if (this.ACTIF == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.ACTIF);
                }

                writeString(this.LIBELLE, dos, oos);

                writeString(this.LIBELLE_ARABE, dos, oos);

                writeString(this.ECHANGE_CODE, dos, oos);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }


        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");
            sb.append("ID=" + String.valueOf(ID));
            sb.append(",CREATED_BY=" + CREATED_BY);
            sb.append(",CREATED_ON=" + String.valueOf(CREATED_ON));
            sb.append(",REQUEST_ORIGIN=" + REQUEST_ORIGIN);
            sb.append(",UPDATED_BY=" + UPDATED_BY);
            sb.append(",UPDATED_ON=" + String.valueOf(UPDATED_ON));
            sb.append(",VERSION=" + String.valueOf(VERSION));
            sb.append(",ABBREVIATION=" + ABBREVIATION);
            sb.append(",ACTIF=" + String.valueOf(ACTIF));
            sb.append(",CODE=" + CODE);
            sb.append(",LIBELLE=" + LIBELLE);
            sb.append(",LIBELLE_ARABE=" + LIBELLE_ARABE);
            sb.append(",ECHANGE_CODE=" + ECHANGE_CODE);
            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row3Struct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.CODE, other.CODE);
            if (returnValue != 0) {
                return returnValue;
            }


            return returnValue;
        }


        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }


    }

    public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
        globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

        final boolean execStat = this.execStat;

        String iterateId = "";


        String currentComponent = "";
        java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

        try {
            // TDI-39566 avoid throwing an useless Exception
            boolean resumeIt = true;
            if (globalResumeTicket == false && resumeEntryMethodName != null) {
                String currentMethodName = new Exception().getStackTrace()[0].getMethodName();
                resumeIt = resumeEntryMethodName.equals(currentMethodName);
            }
            if (resumeIt || globalResumeTicket) { //start the resume
                globalResumeTicket = true;


                row3Struct row3 = new row3Struct();


                /**
                 * [tAdvancedHash_row3 begin ] start
                 */


                ok_Hash.put("tAdvancedHash_row3", false);
                start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());


                currentComponent = "tAdvancedHash_row3";


                if (execStat) {
                    runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
                }

                int tos_count_tAdvancedHash_row3 = 0;


                // connection name:row3
                // source node:tDBInput_3 - inputs:(after_tDBInput_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
                // linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(to_in
                // sert,ad_detail)

                org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 =
                        org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;


                org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
                        <row3Struct>getLookup(matchingModeEnum_row3);

                globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);


/**
 * [tAdvancedHash_row3 begin ] stop
 */


                /**
                 * [tDBInput_3 begin ] start
                 */


                ok_Hash.put("tDBInput_3", false);
                start_Hash.put("tDBInput_3", System.currentTimeMillis());


                currentComponent = "tDBInput_3";


                int tos_count_tDBInput_3 = 0;


                org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();

                List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
                String[] talendToDBArray_tDBInput_3 = new String[]{"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL", "DECIMAL IDENTITY", "REAL"};
                java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3);
                int nb_line_tDBInput_3 = 0;
                java.sql.Connection conn_tDBInput_3 = null;
                String driverClass_tDBInput_3 = "net.sourceforge.jtds.jdbc.Driver";
                Class jdbcclazz_tDBInput_3 = Class.forName(driverClass_tDBInput_3);
                String dbUser_tDBInput_3 = username;


                final String decryptedPassword_tDBInput_3 = password;// PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:kVe9UCKLvJBq3HoRj1JZAULSjkxiIcfXC1iw7/ZbUQByHzfXr/o0xw==");

                String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

                String port_tDBInput_3 = port;
                String dbname_tDBInput_3 = name;
                String url_tDBInput_3 = url;
                if (!"".equals(port_tDBInput_3)) {
                    url_tDBInput_3 += ":" + port;
                }
                if (!"".equals(dbname_tDBInput_3)) {
                    url_tDBInput_3 += "//" + name;
                }
                url_tDBInput_3 += ";appName=" + projectName + ";" + "";
                String dbschema_tDBInput_3 = "";

                conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3, dbPwd_tDBInput_3);


                java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

                String dbquery_tDBInput_3 = "SELECT FONCTION_REF.\"ID\",\n		FONCTION_REF.CREATED_BY,\n		FONCTION_REF.CREATED_ON,\n		FONCTION_REF.REQUEST_ORIGIN,\n		FONC"
                        + "TION_REF.UPDATED_BY,\n		FONCTION_REF.UPDATED_ON,\n		FONCTION_REF.VERSION,\n		FONCTION_REF.ABBREVIATION,\n		FONCTION_REF.ACTI"
                        + "F,\n		FONCTION_REF.CODE,\n		FONCTION_REF.LIBELLE,\n		FONCTION_REF.LIBELLE_ARABE,\n		FONCTION_REF.ECHANGE_CODE\nFROM	FONCTION_"
                        + "REF";


                globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
                java.sql.ResultSet rs_tDBInput_3 = null;

                try {
                    rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
                    java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
                    int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

                    String tmpContent_tDBInput_3 = null;


                    while (rs_tDBInput_3.next()) {
                        nb_line_tDBInput_3++;

                        if (colQtyInRs_tDBInput_3 < 1) {
                            row3.ID = 0;
                        } else {

                            row3.ID = rs_tDBInput_3.getLong(1);
                            if (rs_tDBInput_3.wasNull()) {
                            }
                        }
                        if (colQtyInRs_tDBInput_3 < 2) {
                            row3.CREATED_BY = null;
                        } else {

                            tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
                            if (tmpContent_tDBInput_3 != null) {
                                if (talendToDBList_tDBInput_3.contains(rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row3.CREATED_BY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
                                } else {
                                    row3.CREATED_BY = tmpContent_tDBInput_3;
                                }
                            } else {
                                row3.CREATED_BY = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_3 < 3) {
                            row3.CREATED_ON = null;
                        } else {

                            row3.CREATED_ON = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 3);

                        }
                        if (colQtyInRs_tDBInput_3 < 4) {
                            row3.REQUEST_ORIGIN = null;
                        } else {

                            tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
                            if (tmpContent_tDBInput_3 != null) {
                                if (talendToDBList_tDBInput_3.contains(rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row3.REQUEST_ORIGIN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
                                } else {
                                    row3.REQUEST_ORIGIN = tmpContent_tDBInput_3;
                                }
                            } else {
                                row3.REQUEST_ORIGIN = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_3 < 5) {
                            row3.UPDATED_BY = null;
                        } else {

                            tmpContent_tDBInput_3 = rs_tDBInput_3.getString(5);
                            if (tmpContent_tDBInput_3 != null) {
                                if (talendToDBList_tDBInput_3.contains(rsmd_tDBInput_3.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row3.UPDATED_BY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
                                } else {
                                    row3.UPDATED_BY = tmpContent_tDBInput_3;
                                }
                            } else {
                                row3.UPDATED_BY = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_3 < 6) {
                            row3.UPDATED_ON = null;
                        } else {

                            row3.UPDATED_ON = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 6);

                        }
                        if (colQtyInRs_tDBInput_3 < 7) {
                            row3.VERSION = null;
                        } else {

                            row3.VERSION = rs_tDBInput_3.getLong(7);
                            if (rs_tDBInput_3.wasNull()) {
                                row3.VERSION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_3 < 8) {
                            row3.ABBREVIATION = null;
                        } else {

                            tmpContent_tDBInput_3 = rs_tDBInput_3.getString(8);
                            if (tmpContent_tDBInput_3 != null) {
                                if (talendToDBList_tDBInput_3.contains(rsmd_tDBInput_3.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row3.ABBREVIATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
                                } else {
                                    row3.ABBREVIATION = tmpContent_tDBInput_3;
                                }
                            } else {
                                row3.ABBREVIATION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_3 < 9) {
                            row3.ACTIF = null;
                        } else {

                            row3.ACTIF = rs_tDBInput_3.getBoolean(9);
                            if (rs_tDBInput_3.wasNull()) {
                                row3.ACTIF = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_3 < 10) {
                            row3.CODE = null;
                        } else {

                            tmpContent_tDBInput_3 = rs_tDBInput_3.getString(10);
                            if (tmpContent_tDBInput_3 != null) {
                                if (talendToDBList_tDBInput_3.contains(rsmd_tDBInput_3.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row3.CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
                                } else {
                                    row3.CODE = tmpContent_tDBInput_3;
                                }
                            } else {
                                row3.CODE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_3 < 11) {
                            row3.LIBELLE = null;
                        } else {

                            tmpContent_tDBInput_3 = rs_tDBInput_3.getString(11);
                            if (tmpContent_tDBInput_3 != null) {
                                if (talendToDBList_tDBInput_3.contains(rsmd_tDBInput_3.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row3.LIBELLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
                                } else {
                                    row3.LIBELLE = tmpContent_tDBInput_3;
                                }
                            } else {
                                row3.LIBELLE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_3 < 12) {
                            row3.LIBELLE_ARABE = null;
                        } else {

                            tmpContent_tDBInput_3 = rs_tDBInput_3.getString(12);
                            if (tmpContent_tDBInput_3 != null) {
                                if (talendToDBList_tDBInput_3.contains(rsmd_tDBInput_3.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row3.LIBELLE_ARABE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
                                } else {
                                    row3.LIBELLE_ARABE = tmpContent_tDBInput_3;
                                }
                            } else {
                                row3.LIBELLE_ARABE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_3 < 13) {
                            row3.ECHANGE_CODE = null;
                        } else {

                            tmpContent_tDBInput_3 = rs_tDBInput_3.getString(13);
                            if (tmpContent_tDBInput_3 != null) {
                                if (talendToDBList_tDBInput_3.contains(rsmd_tDBInput_3.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row3.ECHANGE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
                                } else {
                                    row3.ECHANGE_CODE = tmpContent_tDBInput_3;
                                }
                            } else {
                                row3.ECHANGE_CODE = null;
                            }
                        }


/**
 * [tDBInput_3 begin ] stop
 */

                        /**
                         * [tDBInput_3 main ] start
                         */


                        currentComponent = "tDBInput_3";


                        tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */

                        /**
                         * [tDBInput_3 process_data_begin ] start
                         */


                        currentComponent = "tDBInput_3";


/**
 * [tDBInput_3 process_data_begin ] stop
 */


                        /**
                         * [tAdvancedHash_row3 main ] start
                         */


                        currentComponent = "tAdvancedHash_row3";


                        if (execStat) {
                            runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
                        }


                        row3Struct row3_HashRow = new row3Struct();


                        row3_HashRow.ID = row3.ID;

                        row3_HashRow.CREATED_BY = row3.CREATED_BY;

                        row3_HashRow.CREATED_ON = row3.CREATED_ON;

                        row3_HashRow.REQUEST_ORIGIN = row3.REQUEST_ORIGIN;

                        row3_HashRow.UPDATED_BY = row3.UPDATED_BY;

                        row3_HashRow.UPDATED_ON = row3.UPDATED_ON;

                        row3_HashRow.VERSION = row3.VERSION;

                        row3_HashRow.ABBREVIATION = row3.ABBREVIATION;

                        row3_HashRow.ACTIF = row3.ACTIF;

                        row3_HashRow.CODE = row3.CODE;

                        row3_HashRow.LIBELLE = row3.LIBELLE;

                        row3_HashRow.LIBELLE_ARABE = row3.LIBELLE_ARABE;

                        row3_HashRow.ECHANGE_CODE = row3.ECHANGE_CODE;

                        tHash_Lookup_row3.put(row3_HashRow);


                        tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */

                        /**
                         * [tAdvancedHash_row3 process_data_begin ] start
                         */


                        currentComponent = "tAdvancedHash_row3";


/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */

                        /**
                         * [tAdvancedHash_row3 process_data_end ] start
                         */


                        currentComponent = "tAdvancedHash_row3";


/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */


                        /**
                         * [tDBInput_3 process_data_end ] start
                         */


                        currentComponent = "tDBInput_3";


/**
 * [tDBInput_3 process_data_end ] stop
 */

                        /**
                         * [tDBInput_3 end ] start
                         */


                        currentComponent = "tDBInput_3";


                    }
                } finally {
                    if (rs_tDBInput_3 != null) {
                        rs_tDBInput_3.close();
                    }
                    if (stmt_tDBInput_3 != null) {
                        stmt_tDBInput_3.close();
                    }
                    if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

                        conn_tDBInput_3.close();

                        if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
                                && BundleUtils.inOSGi()) {
                            Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
                                    getMethod("checkedShutdown").invoke(null, (Object[]) null);
                        }

                    }
                }
                globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);


                ok_Hash.put("tDBInput_3", true);
                end_Hash.put("tDBInput_3", System.currentTimeMillis());


/**
 * [tDBInput_3 end ] stop
 */


                /**
                 * [tAdvancedHash_row3 end ] start
                 */


                currentComponent = "tAdvancedHash_row3";


                tHash_Lookup_row3.endPut();

                if (execStat) {
                    runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
                }


                ok_Hash.put("tAdvancedHash_row3", true);
                end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());


/**
 * [tAdvancedHash_row3 end ] stop
 */


            }//end the resume


        } catch (Exception e) {

            TalendException te = new TalendException(e, currentComponent, globalMap);

            throw te;
        } catch (Error error) {

            runStat.stopThreadStat();

            throw error;
        } finally {

            try {


                /**
                 * [tDBInput_3 finally ] start
                 */


                currentComponent = "tDBInput_3";


/**
 * [tDBInput_3 finally ] stop
 */


                /**
                 * [tAdvancedHash_row3 finally ] start
                 */


                currentComponent = "tAdvancedHash_row3";


/**
 * [tAdvancedHash_row3 finally ] stop
 */


            } catch (Exception e) {
                //ignore
            } catch (Error error) {
                //ignore
            }
            resourceMap = null;
        }


        globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
    }


    public static class row4Struct implements IPersistableComparableLookupRow<row4Struct> {
        final static byte[] commonByteArrayLock_FM6_INSERT_ADHERENT = new byte[0];
        static byte[] commonByteArray_FM6_INSERT_ADHERENT = new byte[0];
        protected static final int DEFAULT_HASHCODE = 1;
        protected static final int PRIME = 31;
        protected int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        public String loopKey;


        public long ID;

        public long getID() {
            return this.ID;
        }

        public String CREATED_BY;

        public String getCREATED_BY() {
            return this.CREATED_BY;
        }

        public Date CREATED_ON;

        public Date getCREATED_ON() {
            return this.CREATED_ON;
        }

        public String REQUEST_ORIGIN;

        public String getREQUEST_ORIGIN() {
            return this.REQUEST_ORIGIN;
        }

        public String UPDATED_BY;

        public String getUPDATED_BY() {
            return this.UPDATED_BY;
        }

        public Date UPDATED_ON;

        public Date getUPDATED_ON() {
            return this.UPDATED_ON;
        }

        public Long VERSION;

        public Long getVERSION() {
            return this.VERSION;
        }

        public String ABBREVIATION;

        public String getABBREVIATION() {
            return this.ABBREVIATION;
        }

        public Boolean ACTIF;

        public Boolean getACTIF() {
            return this.ACTIF;
        }

        public String CODE;

        public String getCODE() {
            return this.CODE;
        }

        public String LIBELLE;

        public String getLIBELLE() {
            return this.LIBELLE;
        }

        public String LIBELLE_ARABE;

        public String getLIBELLE_ARABE() {
            return this.LIBELLE_ARABE;
        }

        public String ECHANGE_CODE;

        public String getECHANGE_CODE() {
            return this.ECHANGE_CODE;
        }

        public long ECHELLE_REF_ID;

        public long getECHELLE_REF_ID() {
            return this.ECHELLE_REF_ID;
        }

        public Integer AGE_LIMITTE;

        public Integer getAGE_LIMITTE() {
            return this.AGE_LIMITTE;
        }


        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + ((this.CODE == null) ? 0 : this.CODE.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
            final row4Struct other = (row4Struct) obj;

            if (this.CODE == null) {
                if (other.CODE != null)
                    return false;

            } else if (!this.CODE.equals(other.CODE))

                return false;


            return true;
        }

        public void copyDataTo(row4Struct other) {

            other.ID = this.ID;
            other.CREATED_BY = this.CREATED_BY;
            other.CREATED_ON = this.CREATED_ON;
            other.REQUEST_ORIGIN = this.REQUEST_ORIGIN;
            other.UPDATED_BY = this.UPDATED_BY;
            other.UPDATED_ON = this.UPDATED_ON;
            other.VERSION = this.VERSION;
            other.ABBREVIATION = this.ABBREVIATION;
            other.ACTIF = this.ACTIF;
            other.CODE = this.CODE;
            other.LIBELLE = this.LIBELLE;
            other.LIBELLE_ARABE = this.LIBELLE_ARABE;
            other.ECHANGE_CODE = this.ECHANGE_CODE;
            other.ECHELLE_REF_ID = this.ECHELLE_REF_ID;
            other.AGE_LIMITTE = this.AGE_LIMITTE;

        }

        public void copyKeysDataTo(row4Struct other) {

            other.CODE = this.CODE;

        }


        private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                byte[] byteArray = new byte[length];
                dis.read(byteArray);
                strReturn = new String(byteArray, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        private Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
            Date dateReturn = null;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                dateReturn = null;
            } else {
                dateReturn = new Date(dis.readLong());
            }
            return dateReturn;
        }

        private void writeDate(Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
            if (date1 == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeLong(date1.getTime());
            }
        }

        private String readString(ObjectInputStream dis) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                if (length > commonByteArray_FM6_INSERT_ADHERENT.length) {
                    if (length < 1024 && commonByteArray_FM6_INSERT_ADHERENT.length == 0) {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[1024];
                    } else {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[2 * length];
                    }
                }
                dis.readFully(commonByteArray_FM6_INSERT_ADHERENT, 0, length);
                strReturn = new String(commonByteArray_FM6_INSERT_ADHERENT, 0, length, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, ObjectOutputStream dos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
            Integer intReturn;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                intReturn = null;
            } else {
                intReturn = dis.readInt();
            }
            return intReturn;
        }

        private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
            if (intNum == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeInt(intNum);
            }
        }

        public void readKeysData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock_FM6_INSERT_ADHERENT) {

                try {

                    int length = 0;

                    this.CODE = readString(dis);

                } catch (IOException e) {
                    throw new RuntimeException(e);


                }


            }


        }

        public void writeKeysData(ObjectOutputStream dos) {
            try {


                // String

                writeString(this.CODE, dos);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }


        }


        /**
         * Fill Values data by reading ObjectInputStream.
         */
        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
            try {

                int length = 0;

                this.ID = dis.readLong();

                this.CREATED_BY = readString(dis, ois);

                this.CREATED_ON = readDate(dis, ois);

                this.REQUEST_ORIGIN = readString(dis, ois);

                this.UPDATED_BY = readString(dis, ois);

                this.UPDATED_ON = readDate(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.VERSION = null;
                } else {
                    this.VERSION = dis.readLong();
                }

                this.ABBREVIATION = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.ACTIF = null;
                } else {
                    this.ACTIF = dis.readBoolean();
                }

                this.LIBELLE = readString(dis, ois);

                this.LIBELLE_ARABE = readString(dis, ois);

                this.ECHANGE_CODE = readString(dis, ois);

                this.ECHELLE_REF_ID = dis.readLong();

                this.AGE_LIMITTE = readInteger(dis, ois);

            } catch (IOException e) {
                throw new RuntimeException(e);


            }


        }

        /**
         * Return a byte array which represents Values data.
         */
        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
            try {


                dos.writeLong(this.ID);

                writeString(this.CREATED_BY, dos, oos);

                writeDate(this.CREATED_ON, dos, oos);

                writeString(this.REQUEST_ORIGIN, dos, oos);

                writeString(this.UPDATED_BY, dos, oos);

                writeDate(this.UPDATED_ON, dos, oos);

                if (this.VERSION == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VERSION);
                }

                writeString(this.ABBREVIATION, dos, oos);

                if (this.ACTIF == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.ACTIF);
                }

                writeString(this.LIBELLE, dos, oos);

                writeString(this.LIBELLE_ARABE, dos, oos);

                writeString(this.ECHANGE_CODE, dos, oos);

                dos.writeLong(this.ECHELLE_REF_ID);

                writeInteger(this.AGE_LIMITTE, dos, oos);


            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }


        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");
            sb.append("ID=" + String.valueOf(ID));
            sb.append(",CREATED_BY=" + CREATED_BY);
            sb.append(",CREATED_ON=" + String.valueOf(CREATED_ON));
            sb.append(",REQUEST_ORIGIN=" + REQUEST_ORIGIN);
            sb.append(",UPDATED_BY=" + UPDATED_BY);
            sb.append(",UPDATED_ON=" + String.valueOf(UPDATED_ON));
            sb.append(",VERSION=" + String.valueOf(VERSION));
            sb.append(",ABBREVIATION=" + ABBREVIATION);
            sb.append(",ACTIF=" + String.valueOf(ACTIF));
            sb.append(",CODE=" + CODE);
            sb.append(",LIBELLE=" + LIBELLE);
            sb.append(",LIBELLE_ARABE=" + LIBELLE_ARABE);
            sb.append(",ECHANGE_CODE=" + ECHANGE_CODE);
            sb.append(",ECHELLE_REF_ID=" + String.valueOf(ECHELLE_REF_ID));
            sb.append(",AGE_LIMITTE=" + String.valueOf(AGE_LIMITTE));
            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row4Struct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.CODE, other.CODE);
            if (returnValue != 0) {
                return returnValue;
            }


            return returnValue;
        }


        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }


    }

    public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
        globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

        final boolean execStat = this.execStat;

        String iterateId = "";


        String currentComponent = "";
        java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

        try {
            // TDI-39566 avoid throwing an useless Exception
            boolean resumeIt = true;
            if (globalResumeTicket == false && resumeEntryMethodName != null) {
                String currentMethodName = new Exception().getStackTrace()[0].getMethodName();
                resumeIt = resumeEntryMethodName.equals(currentMethodName);
            }
            if (resumeIt || globalResumeTicket) { //start the resume
                globalResumeTicket = true;


                row4Struct row4 = new row4Struct();


                /**
                 * [tAdvancedHash_row4 begin ] start
                 */


                ok_Hash.put("tAdvancedHash_row4", false);
                start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());


                currentComponent = "tAdvancedHash_row4";


                if (execStat) {
                    runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
                }

                int tos_count_tAdvancedHash_row4 = 0;


                // connection name:row4
                // source node:tDBInput_4 - inputs:(after_tDBInput_1) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
                // linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(to_insert,ad_detail)

                org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 =
                        org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;


                org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
                        <row4Struct>getLookup(matchingModeEnum_row4);

                globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);


/**
 * [tAdvancedHash_row4 begin ] stop
 */


                /**
                 * [tDBInput_4 begin ] start
                 */


                ok_Hash.put("tDBInput_4", false);
                start_Hash.put("tDBInput_4", System.currentTimeMillis());


                currentComponent = "tDBInput_4";


                int tos_count_tDBInput_4 = 0;


                org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();

                List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
                String[] talendToDBArray_tDBInput_4 = new String[]{"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL", "DECIMAL IDENTITY", "REAL"};
                java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
                int nb_line_tDBInput_4 = 0;
                java.sql.Connection conn_tDBInput_4 = null;
                String driverClass_tDBInput_4 = "net.sourceforge.jtds.jdbc.Driver";
                Class jdbcclazz_tDBInput_4 = Class.forName(driverClass_tDBInput_4);
                String dbUser_tDBInput_4 = username;


                final String decryptedPassword_tDBInput_4 = password;//PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:GCuSEcUn3v42GvP7blw3v3DwiaR/CA9/jIKuwCR5w1b3O1SXDkaCWw==");

                String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

                String port_tDBInput_4 = port;
                String dbname_tDBInput_4 = name;
                String url_tDBInput_4 = url;
                if (!"".equals(port_tDBInput_4)) {
                    url_tDBInput_4 += ":" + port;
                }
                if (!"".equals(dbname_tDBInput_4)) {
                    url_tDBInput_4 += "//" + name;
                }
                url_tDBInput_4 += ";appName=" + projectName + ";" + "";
                String dbschema_tDBInput_4 = "";

                conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4, dbPwd_tDBInput_4);


                java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

                String dbquery_tDBInput_4 = "SELECT GRADE_REF.\"ID\",\n		GRADE_REF.CREATED_BY,\n		GRADE_REF.CREATED_ON,\n		GRADE_REF.REQUEST_ORIGIN,\n		GRADE_REF.UPDATE"
                        + "D_BY,\n		GRADE_REF.UPDATED_ON,\n		GRADE_REF.VERSION,\n		GRADE_REF.ABBREVIATION,\n		GRADE_REF.ACTIF,\n		GRADE_REF.CODE,\n		GRAD"
                        + "E_REF.LIBELLE,\n		GRADE_REF.LIBELLE_ARABE,\n		GRADE_REF.ECHANGE_CODE,\n		GRADE_REF.ECHELLE_REF_ID,\n"
                        + "\n		GRADE_REF.AGE_LIMITTE\nFROM	GRADE_REF";


                globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
                java.sql.ResultSet rs_tDBInput_4 = null;

                try {
                    rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
                    java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
                    int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

                    String tmpContent_tDBInput_4 = null;


                    while (rs_tDBInput_4.next()) {
                        nb_line_tDBInput_4++;

                        if (colQtyInRs_tDBInput_4 < 1) {
                            row4.ID = 0;
                        } else {

                            row4.ID = rs_tDBInput_4.getLong(1);
                            if (rs_tDBInput_4.wasNull()) {
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 2) {
                            row4.CREATED_BY = null;
                        } else {

                            tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
                            if (tmpContent_tDBInput_4 != null) {
                                if (talendToDBList_tDBInput_4.contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row4.CREATED_BY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
                                } else {
                                    row4.CREATED_BY = tmpContent_tDBInput_4;
                                }
                            } else {
                                row4.CREATED_BY = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 3) {
                            row4.CREATED_ON = null;
                        } else {

                            row4.CREATED_ON = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 3);

                        }
                        if (colQtyInRs_tDBInput_4 < 4) {
                            row4.REQUEST_ORIGIN = null;
                        } else {

                            tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
                            if (tmpContent_tDBInput_4 != null) {
                                if (talendToDBList_tDBInput_4.contains(rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row4.REQUEST_ORIGIN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
                                } else {
                                    row4.REQUEST_ORIGIN = tmpContent_tDBInput_4;
                                }
                            } else {
                                row4.REQUEST_ORIGIN = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 5) {
                            row4.UPDATED_BY = null;
                        } else {

                            tmpContent_tDBInput_4 = rs_tDBInput_4.getString(5);
                            if (tmpContent_tDBInput_4 != null) {
                                if (talendToDBList_tDBInput_4.contains(rsmd_tDBInput_4.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row4.UPDATED_BY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
                                } else {
                                    row4.UPDATED_BY = tmpContent_tDBInput_4;
                                }
                            } else {
                                row4.UPDATED_BY = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 6) {
                            row4.UPDATED_ON = null;
                        } else {

                            row4.UPDATED_ON = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 6);

                        }
                        if (colQtyInRs_tDBInput_4 < 7) {
                            row4.VERSION = null;
                        } else {

                            row4.VERSION = rs_tDBInput_4.getLong(7);
                            if (rs_tDBInput_4.wasNull()) {
                                row4.VERSION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 8) {
                            row4.ABBREVIATION = null;
                        } else {

                            tmpContent_tDBInput_4 = rs_tDBInput_4.getString(8);
                            if (tmpContent_tDBInput_4 != null) {
                                if (talendToDBList_tDBInput_4.contains(rsmd_tDBInput_4.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row4.ABBREVIATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
                                } else {
                                    row4.ABBREVIATION = tmpContent_tDBInput_4;
                                }
                            } else {
                                row4.ABBREVIATION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 9) {
                            row4.ACTIF = null;
                        } else {

                            row4.ACTIF = rs_tDBInput_4.getBoolean(9);
                            if (rs_tDBInput_4.wasNull()) {
                                row4.ACTIF = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 10) {
                            row4.CODE = null;
                        } else {

                            tmpContent_tDBInput_4 = rs_tDBInput_4.getString(10);
                            if (tmpContent_tDBInput_4 != null) {
                                if (talendToDBList_tDBInput_4.contains(rsmd_tDBInput_4.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row4.CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
                                } else {
                                    row4.CODE = tmpContent_tDBInput_4;
                                }
                            } else {
                                row4.CODE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 11) {
                            row4.LIBELLE = null;
                        } else {

                            tmpContent_tDBInput_4 = rs_tDBInput_4.getString(11);
                            if (tmpContent_tDBInput_4 != null) {
                                if (talendToDBList_tDBInput_4.contains(rsmd_tDBInput_4.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row4.LIBELLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
                                } else {
                                    row4.LIBELLE = tmpContent_tDBInput_4;
                                }
                            } else {
                                row4.LIBELLE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 12) {
                            row4.LIBELLE_ARABE = null;
                        } else {

                            tmpContent_tDBInput_4 = rs_tDBInput_4.getString(12);
                            if (tmpContent_tDBInput_4 != null) {
                                if (talendToDBList_tDBInput_4.contains(rsmd_tDBInput_4.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row4.LIBELLE_ARABE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
                                } else {
                                    row4.LIBELLE_ARABE = tmpContent_tDBInput_4;
                                }
                            } else {
                                row4.LIBELLE_ARABE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 13) {
                            row4.ECHANGE_CODE = null;
                        } else {

                            tmpContent_tDBInput_4 = rs_tDBInput_4.getString(13);
                            if (tmpContent_tDBInput_4 != null) {
                                if (talendToDBList_tDBInput_4.contains(rsmd_tDBInput_4.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row4.ECHANGE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
                                } else {
                                    row4.ECHANGE_CODE = tmpContent_tDBInput_4;
                                }
                            } else {
                                row4.ECHANGE_CODE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 14) {
                            row4.ECHELLE_REF_ID = 0;
                        } else {

                            row4.ECHELLE_REF_ID = rs_tDBInput_4.getLong(14);
                            if (rs_tDBInput_4.wasNull()) {
                            }
                        }
                        if (colQtyInRs_tDBInput_4 < 16) {
                            row4.AGE_LIMITTE = null;
                        } else {

                            row4.AGE_LIMITTE = rs_tDBInput_4.getInt(16);
                            if (rs_tDBInput_4.wasNull()) {
                                row4.AGE_LIMITTE = null;
                            }
                        }


/**
 * [tDBInput_4 begin ] stop
 */

                        /**
                         * [tDBInput_4 main ] start
                         */


                        currentComponent = "tDBInput_4";


                        tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */

                        /**
                         * [tDBInput_4 process_data_begin ] start
                         */


                        currentComponent = "tDBInput_4";


/**
 * [tDBInput_4 process_data_begin ] stop
 */


                        /**
                         * [tAdvancedHash_row4 main ] start
                         */


                        currentComponent = "tAdvancedHash_row4";


                        if (execStat) {
                            runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
                        }


                        row4Struct row4_HashRow = new row4Struct();


                        row4_HashRow.ID = row4.ID;

                        row4_HashRow.CREATED_BY = row4.CREATED_BY;

                        row4_HashRow.CREATED_ON = row4.CREATED_ON;

                        row4_HashRow.REQUEST_ORIGIN = row4.REQUEST_ORIGIN;

                        row4_HashRow.UPDATED_BY = row4.UPDATED_BY;

                        row4_HashRow.UPDATED_ON = row4.UPDATED_ON;

                        row4_HashRow.VERSION = row4.VERSION;

                        row4_HashRow.ABBREVIATION = row4.ABBREVIATION;

                        row4_HashRow.ACTIF = row4.ACTIF;

                        row4_HashRow.CODE = row4.CODE;

                        row4_HashRow.LIBELLE = row4.LIBELLE;

                        row4_HashRow.LIBELLE_ARABE = row4.LIBELLE_ARABE;

                        row4_HashRow.ECHANGE_CODE = row4.ECHANGE_CODE;

                        row4_HashRow.ECHELLE_REF_ID = row4.ECHELLE_REF_ID;

                        row4_HashRow.AGE_LIMITTE = row4.AGE_LIMITTE;


                        tHash_Lookup_row4.put(row4_HashRow);


                        tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */

                        /**
                         * [tAdvancedHash_row4 process_data_begin ] start
                         */


                        currentComponent = "tAdvancedHash_row4";


/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */

                        /**
                         * [tAdvancedHash_row4 process_data_end ] start
                         */


                        currentComponent = "tAdvancedHash_row4";


/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */


                        /**
                         * [tDBInput_4 process_data_end ] start
                         */


                        currentComponent = "tDBInput_4";


/**
 * [tDBInput_4 process_data_end ] stop
 */

                        /**
                         * [tDBInput_4 end ] start
                         */


                        currentComponent = "tDBInput_4";


                    }
                } finally {
                    if (rs_tDBInput_4 != null) {
                        rs_tDBInput_4.close();
                    }
                    if (stmt_tDBInput_4 != null) {
                        stmt_tDBInput_4.close();
                    }
                    if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

                        conn_tDBInput_4.close();

                        if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
                                && BundleUtils.inOSGi()) {
                            Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
                                    getMethod("checkedShutdown").invoke(null, (Object[]) null);
                        }

                    }
                }
                globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);


                ok_Hash.put("tDBInput_4", true);
                end_Hash.put("tDBInput_4", System.currentTimeMillis());


/**
 * [tDBInput_4 end ] stop
 */


                /**
                 * [tAdvancedHash_row4 end ] start
                 */


                currentComponent = "tAdvancedHash_row4";


                tHash_Lookup_row4.endPut();

                if (execStat) {
                    runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
                }


                ok_Hash.put("tAdvancedHash_row4", true);
                end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());


/**
 * [tAdvancedHash_row4 end ] stop
 */


            }//end the resume


        } catch (Exception e) {

            TalendException te = new TalendException(e, currentComponent, globalMap);

            throw te;
        } catch (Error error) {

            runStat.stopThreadStat();

            throw error;
        } finally {

            try {


                /**
                 * [tDBInput_4 finally ] start
                 */


                currentComponent = "tDBInput_4";


/**
 * [tDBInput_4 finally ] stop
 */


                /**
                 * [tAdvancedHash_row4 finally ] start
                 */


                currentComponent = "tAdvancedHash_row4";


/**
 * [tAdvancedHash_row4 finally ] stop
 */


            } catch (Exception e) {
                //ignore
            } catch (Error error) {
                //ignore
            }
            resourceMap = null;
        }


        globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
    }


    public static class row5Struct implements IPersistableComparableLookupRow<row5Struct> {
        final static byte[] commonByteArrayLock_FM6_INSERT_ADHERENT = new byte[0];
        static byte[] commonByteArray_FM6_INSERT_ADHERENT = new byte[0];
        protected static final int DEFAULT_HASHCODE = 1;
        protected static final int PRIME = 31;
        protected int hashCode = DEFAULT_HASHCODE;
        public boolean hashCodeDirty = true;

        public String loopKey;


        public long ID;

        public long getID() {
            return this.ID;
        }

        public String CREATED_BY;

        public String getCREATED_BY() {
            return this.CREATED_BY;
        }

        public Date CREATED_ON;

        public Date getCREATED_ON() {
            return this.CREATED_ON;
        }

        public String REQUEST_ORIGIN;

        public String getREQUEST_ORIGIN() {
            return this.REQUEST_ORIGIN;
        }

        public String UPDATED_BY;

        public String getUPDATED_BY() {
            return this.UPDATED_BY;
        }

        public Date UPDATED_ON;

        public Date getUPDATED_ON() {
            return this.UPDATED_ON;
        }

        public Long VERSION;

        public Long getVERSION() {
            return this.VERSION;
        }

        public String ABBREVIATION;

        public String getABBREVIATION() {
            return this.ABBREVIATION;
        }

        public Boolean ACTIF;

        public Boolean getACTIF() {
            return this.ACTIF;
        }

        public String CODE;

        public String getCODE() {
            return this.CODE;
        }

        public String LIBELLE;

        public String getLIBELLE() {
            return this.LIBELLE;
        }

        public String LIBELLE_ARABE;

        public String getLIBELLE_ARABE() {
            return this.LIBELLE_ARABE;
        }

        public double COTISATION_MENSUELLE;

        public double getCOTISATION_MENSUELLE() {
            return this.COTISATION_MENSUELLE;
        }

        public String ECHANGE_CODE;

        public String getECHANGE_CODE() {
            return this.ECHANGE_CODE;
        }


        @Override
        public int hashCode() {
            if (this.hashCodeDirty) {
                final int prime = PRIME;
                int result = DEFAULT_HASHCODE;

                result = prime * result + ((this.CREATED_BY == null) ? 0 : this.CREATED_BY.hashCode());

                this.hashCode = result;
                this.hashCodeDirty = false;
            }
            return this.hashCode;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
            final row5Struct other = (row5Struct) obj;

            if (this.CREATED_BY == null) {
                if (other.CREATED_BY != null)
                    return false;

            } else if (!this.CREATED_BY.equals(other.CREATED_BY))

                return false;


            return true;
        }

        public void copyDataTo(row5Struct other) {

            other.ID = this.ID;
            other.CREATED_BY = this.CREATED_BY;
            other.CREATED_ON = this.CREATED_ON;
            other.REQUEST_ORIGIN = this.REQUEST_ORIGIN;
            other.UPDATED_BY = this.UPDATED_BY;
            other.UPDATED_ON = this.UPDATED_ON;
            other.VERSION = this.VERSION;
            other.ABBREVIATION = this.ABBREVIATION;
            other.ACTIF = this.ACTIF;
            other.CODE = this.CODE;
            other.LIBELLE = this.LIBELLE;
            other.LIBELLE_ARABE = this.LIBELLE_ARABE;
            other.COTISATION_MENSUELLE = this.COTISATION_MENSUELLE;
            other.ECHANGE_CODE = this.ECHANGE_CODE;

        }

        public void copyKeysDataTo(row5Struct other) {

            other.CREATED_BY = this.CREATED_BY;

        }


        private String readString(ObjectInputStream dis) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                if (length > commonByteArray_FM6_INSERT_ADHERENT.length) {
                    if (length < 1024 && commonByteArray_FM6_INSERT_ADHERENT.length == 0) {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[1024];
                    } else {
                        commonByteArray_FM6_INSERT_ADHERENT = new byte[2 * length];
                    }
                }
                dis.readFully(commonByteArray_FM6_INSERT_ADHERENT, 0, length);
                strReturn = new String(commonByteArray_FM6_INSERT_ADHERENT, 0, length, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, ObjectOutputStream dos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        private Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
            Date dateReturn = null;
            int length = 0;
            length = dis.readByte();
            if (length == -1) {
                dateReturn = null;
            } else {
                dateReturn = new Date(dis.readLong());
            }
            return dateReturn;
        }

        private void writeDate(Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
            if (date1 == null) {
                dos.writeByte(-1);
            } else {
                dos.writeByte(0);
                dos.writeLong(date1.getTime());
            }
        }

        private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
            String strReturn = null;
            int length = 0;
            length = dis.readInt();
            if (length == -1) {
                strReturn = null;
            } else {
                byte[] byteArray = new byte[length];
                dis.read(byteArray);
                strReturn = new String(byteArray, utf8Charset);
            }
            return strReturn;
        }

        private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
            if (str == null) {
                dos.writeInt(-1);
            } else {
                byte[] byteArray = str.getBytes(utf8Charset);
                dos.writeInt(byteArray.length);
                dos.write(byteArray);
            }
        }

        public void readKeysData(ObjectInputStream dis) {

            synchronized (commonByteArrayLock_FM6_INSERT_ADHERENT) {

                try {

                    int length = 0;

                    this.CREATED_BY = readString(dis);

                } catch (IOException e) {
                    throw new RuntimeException(e);


                }


            }


        }

        public void writeKeysData(ObjectOutputStream dos) {
            try {


                // String

                writeString(this.CREATED_BY, dos);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }


        }


        /**
         * Fill Values data by reading ObjectInputStream.
         */
        public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
            try {

                int length = 0;

                this.ID = dis.readLong();

                this.CREATED_ON = readDate(dis, ois);

                this.REQUEST_ORIGIN = readString(dis, ois);

                this.UPDATED_BY = readString(dis, ois);

                this.UPDATED_ON = readDate(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.VERSION = null;
                } else {
                    this.VERSION = dis.readLong();
                }

                this.ABBREVIATION = readString(dis, ois);

                length = dis.readByte();
                if (length == -1) {
                    this.ACTIF = null;
                } else {
                    this.ACTIF = dis.readBoolean();
                }

                this.CODE = readString(dis, ois);

                this.LIBELLE = readString(dis, ois);

                this.LIBELLE_ARABE = readString(dis, ois);

                this.COTISATION_MENSUELLE = dis.readDouble();

                this.ECHANGE_CODE = readString(dis, ois);

            } catch (IOException e) {
                throw new RuntimeException(e);


            }


        }

        /**
         * Return a byte array which represents Values data.
         */
        public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
            try {


                dos.writeLong(this.ID);

                writeDate(this.CREATED_ON, dos, oos);

                writeString(this.REQUEST_ORIGIN, dos, oos);

                writeString(this.UPDATED_BY, dos, oos);

                writeDate(this.UPDATED_ON, dos, oos);

                if (this.VERSION == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeLong(this.VERSION);
                }

                writeString(this.ABBREVIATION, dos, oos);

                if (this.ACTIF == null) {
                    dos.writeByte(-1);
                } else {
                    dos.writeByte(0);
                    dos.writeBoolean(this.ACTIF);
                }

                writeString(this.CODE, dos, oos);

                writeString(this.LIBELLE, dos, oos);

                writeString(this.LIBELLE_ARABE, dos, oos);

                dos.writeDouble(this.COTISATION_MENSUELLE);

                writeString(this.ECHANGE_CODE, dos, oos);

            } catch (IOException e) {
                throw new RuntimeException(e);
            }

        }


        public String toString() {

            StringBuilder sb = new StringBuilder();
            sb.append(super.toString());
            sb.append("[");
            sb.append("ID=" + String.valueOf(ID));
            sb.append(",CREATED_BY=" + CREATED_BY);
            sb.append(",CREATED_ON=" + String.valueOf(CREATED_ON));
            sb.append(",REQUEST_ORIGIN=" + REQUEST_ORIGIN);
            sb.append(",UPDATED_BY=" + UPDATED_BY);
            sb.append(",UPDATED_ON=" + String.valueOf(UPDATED_ON));
            sb.append(",VERSION=" + String.valueOf(VERSION));
            sb.append(",ABBREVIATION=" + ABBREVIATION);
            sb.append(",ACTIF=" + String.valueOf(ACTIF));
            sb.append(",CODE=" + CODE);
            sb.append(",LIBELLE=" + LIBELLE);
            sb.append(",LIBELLE_ARABE=" + LIBELLE_ARABE);
            sb.append(",COTISATION_MENSUELLE=" + String.valueOf(COTISATION_MENSUELLE));
            sb.append(",ECHANGE_CODE=" + ECHANGE_CODE);
            sb.append("]");

            return sb.toString();
        }

        /**
         * Compare keys
         */
        public int compareTo(row5Struct other) {

            int returnValue = -1;

            returnValue = checkNullsAndCompare(this.CREATED_BY, other.CREATED_BY);
            if (returnValue != 0) {
                return returnValue;
            }


            return returnValue;
        }


        private int checkNullsAndCompare(Object object1, Object object2) {
            int returnValue = 0;
            if (object1 instanceof Comparable && object2 instanceof Comparable) {
                returnValue = ((Comparable) object1).compareTo(object2);
            } else if (object1 != null && object2 != null) {
                returnValue = compareStrings(object1.toString(), object2.toString());
            } else if (object1 == null && object2 != null) {
                returnValue = 1;
            } else if (object1 != null && object2 == null) {
                returnValue = -1;
            } else {
                returnValue = 0;
            }

            return returnValue;
        }

        private int compareStrings(String string1, String string2) {
            return string1.compareTo(string2);
        }


    }

    public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
        globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

        final boolean execStat = this.execStat;

        String iterateId = "";


        String currentComponent = "";
        java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

        try {
            // TDI-39566 avoid throwing an useless Exception
            boolean resumeIt = true;
            if (globalResumeTicket == false && resumeEntryMethodName != null) {
                String currentMethodName = new Exception().getStackTrace()[0].getMethodName();
                resumeIt = resumeEntryMethodName.equals(currentMethodName);
            }
            if (resumeIt || globalResumeTicket) { //start the resume
                globalResumeTicket = true;


                row5Struct row5 = new row5Struct();


                /**
                 * [tAdvancedHash_row5 begin ] start
                 */


                ok_Hash.put("tAdvancedHash_row5", false);
                start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());


                currentComponent = "tAdvancedHash_row5";


                if (execStat) {
                    runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
                }

                int tos_count_tAdvancedHash_row5 = 0;


                // connection name:row5
                // source node:tDBInput_5 - inputs:(after_tDBInput_1) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
                // linked node: tMap_1 - inputs:(row1,row2,row3,row4,row5) outputs:(to_insert,ad_detail)

                org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 =
                        org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;


                org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
                        <row5Struct>getLookup(matchingModeEnum_row5);

                globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);


/**
 * [tAdvancedHash_row5 begin ] stop
 */


                /**
                 * [tDBInput_5 begin ] start
                 */


                ok_Hash.put("tDBInput_5", false);
                start_Hash.put("tDBInput_5", System.currentTimeMillis());


                currentComponent = "tDBInput_5";


                int tos_count_tDBInput_5 = 0;


                org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();

                List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
                String[] talendToDBArray_tDBInput_5 = new String[]{"FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL", "DECIMAL IDENTITY", "REAL"};
                java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
                int nb_line_tDBInput_5 = 0;
                java.sql.Connection conn_tDBInput_5 = null;
                String driverClass_tDBInput_5 = "net.sourceforge.jtds.jdbc.Driver";
                Class jdbcclazz_tDBInput_5 = Class.forName(driverClass_tDBInput_5);
                String dbUser_tDBInput_5 = username;


                final String decryptedPassword_tDBInput_5 = password;
                        //PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:9lMKkqExx/pBxviZs1ydng7uUxGpMp9Bc0FSUx5BcpbZZP0pMOGCRA==");

                String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

                String port_tDBInput_5 = port;
                String dbname_tDBInput_5 = name;
                String url_tDBInput_5 = url;
                if (!"".equals(port_tDBInput_5)) {
                    url_tDBInput_5 += ":" + port;
                }
                if (!"".equals(dbname_tDBInput_5)) {
                    url_tDBInput_5 += "//" + name;
                }
                url_tDBInput_5 += ";appName=" + projectName + ";" + "";
                String dbschema_tDBInput_5 = "";

                conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5, dbPwd_tDBInput_5);


                java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

                String dbquery_tDBInput_5 = "SELECT ECHELLE_REF.\"ID\",\n		ECHELLE_REF.CREATED_BY,\n		ECHELLE_REF.CREATED_ON,\n		ECHELLE_REF.REQUEST_ORIGIN,\n		ECHELLE_"
                        + "REF.UPDATED_BY,\n		ECHELLE_REF.UPDATED_ON,\n		ECHELLE_REF.VERSION,\n		ECHELLE_REF.ABBREVIATION,\n		ECHELLE_REF.ACTIF,\n		ECHE"
                        + "LLE_REF.CODE,\n		ECHELLE_REF.LIBELLE,\n		ECHELLE_REF.LIBELLE_ARABE,\n		ECHELLE_REF.COTISATION_MENSUELLE,\n		ECHELLE_REF.ECHA"
                        + "NGE_CODE\nFROM	ECHELLE_REF";


                globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
                java.sql.ResultSet rs_tDBInput_5 = null;

                try {
                    rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
                    java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
                    int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

                    String tmpContent_tDBInput_5 = null;


                    while (rs_tDBInput_5.next()) {
                        nb_line_tDBInput_5++;

                        if (colQtyInRs_tDBInput_5 < 1) {
                            row5.ID = 0;
                        } else {

                            row5.ID = rs_tDBInput_5.getLong(1);
                            if (rs_tDBInput_5.wasNull()) {
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 2) {
                            row5.CREATED_BY = null;
                        } else {

                            tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
                            if (tmpContent_tDBInput_5 != null) {
                                if (talendToDBList_tDBInput_5.contains(rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row5.CREATED_BY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
                                } else {
                                    row5.CREATED_BY = tmpContent_tDBInput_5;
                                }
                            } else {
                                row5.CREATED_BY = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 3) {
                            row5.CREATED_ON = null;
                        } else {

                            row5.CREATED_ON = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 3);

                        }
                        if (colQtyInRs_tDBInput_5 < 4) {
                            row5.REQUEST_ORIGIN = null;
                        } else {

                            tmpContent_tDBInput_5 = rs_tDBInput_5.getString(4);
                            if (tmpContent_tDBInput_5 != null) {
                                if (talendToDBList_tDBInput_5.contains(rsmd_tDBInput_5.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row5.REQUEST_ORIGIN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
                                } else {
                                    row5.REQUEST_ORIGIN = tmpContent_tDBInput_5;
                                }
                            } else {
                                row5.REQUEST_ORIGIN = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 5) {
                            row5.UPDATED_BY = null;
                        } else {

                            tmpContent_tDBInput_5 = rs_tDBInput_5.getString(5);
                            if (tmpContent_tDBInput_5 != null) {
                                if (talendToDBList_tDBInput_5.contains(rsmd_tDBInput_5.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row5.UPDATED_BY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
                                } else {
                                    row5.UPDATED_BY = tmpContent_tDBInput_5;
                                }
                            } else {
                                row5.UPDATED_BY = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 6) {
                            row5.UPDATED_ON = null;
                        } else {

                            row5.UPDATED_ON = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 6);

                        }
                        if (colQtyInRs_tDBInput_5 < 7) {
                            row5.VERSION = null;
                        } else {

                            row5.VERSION = rs_tDBInput_5.getLong(7);
                            if (rs_tDBInput_5.wasNull()) {
                                row5.VERSION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 8) {
                            row5.ABBREVIATION = null;
                        } else {

                            tmpContent_tDBInput_5 = rs_tDBInput_5.getString(8);
                            if (tmpContent_tDBInput_5 != null) {
                                if (talendToDBList_tDBInput_5.contains(rsmd_tDBInput_5.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row5.ABBREVIATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
                                } else {
                                    row5.ABBREVIATION = tmpContent_tDBInput_5;
                                }
                            } else {
                                row5.ABBREVIATION = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 9) {
                            row5.ACTIF = null;
                        } else {

                            row5.ACTIF = rs_tDBInput_5.getBoolean(9);
                            if (rs_tDBInput_5.wasNull()) {
                                row5.ACTIF = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 10) {
                            row5.CODE = null;
                        } else {

                            tmpContent_tDBInput_5 = rs_tDBInput_5.getString(10);
                            if (tmpContent_tDBInput_5 != null) {
                                if (talendToDBList_tDBInput_5.contains(rsmd_tDBInput_5.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row5.CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
                                } else {
                                    row5.CODE = tmpContent_tDBInput_5;
                                }
                            } else {
                                row5.CODE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 11) {
                            row5.LIBELLE = null;
                        } else {

                            tmpContent_tDBInput_5 = rs_tDBInput_5.getString(11);
                            if (tmpContent_tDBInput_5 != null) {
                                if (talendToDBList_tDBInput_5.contains(rsmd_tDBInput_5.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row5.LIBELLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
                                } else {
                                    row5.LIBELLE = tmpContent_tDBInput_5;
                                }
                            } else {
                                row5.LIBELLE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 12) {
                            row5.LIBELLE_ARABE = null;
                        } else {

                            tmpContent_tDBInput_5 = rs_tDBInput_5.getString(12);
                            if (tmpContent_tDBInput_5 != null) {
                                if (talendToDBList_tDBInput_5.contains(rsmd_tDBInput_5.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row5.LIBELLE_ARABE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
                                } else {
                                    row5.LIBELLE_ARABE = tmpContent_tDBInput_5;
                                }
                            } else {
                                row5.LIBELLE_ARABE = null;
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 13) {
                            row5.COTISATION_MENSUELLE = 0;
                        } else {

                            row5.COTISATION_MENSUELLE = rs_tDBInput_5.getDouble(13);
                            if (rs_tDBInput_5.wasNull()) {
                            }
                        }
                        if (colQtyInRs_tDBInput_5 < 14) {
                            row5.ECHANGE_CODE = null;
                        } else {

                            tmpContent_tDBInput_5 = rs_tDBInput_5.getString(14);
                            if (tmpContent_tDBInput_5 != null) {
                                if (talendToDBList_tDBInput_5.contains(rsmd_tDBInput_5.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
                                    row5.ECHANGE_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
                                } else {
                                    row5.ECHANGE_CODE = tmpContent_tDBInput_5;
                                }
                            } else {
                                row5.ECHANGE_CODE = null;
                            }
                        }


/**
 * [tDBInput_5 begin ] stop
 */

                        /**
                         * [tDBInput_5 main ] start
                         */


                        currentComponent = "tDBInput_5";


                        tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */

                        /**
                         * [tDBInput_5 process_data_begin ] start
                         */


                        currentComponent = "tDBInput_5";


/**
 * [tDBInput_5 process_data_begin ] stop
 */


                        /**
                         * [tAdvancedHash_row5 main ] start
                         */


                        currentComponent = "tAdvancedHash_row5";


                        if (execStat) {
                            runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
                        }


                        row5Struct row5_HashRow = new row5Struct();


                        row5_HashRow.ID = row5.ID;

                        row5_HashRow.CREATED_BY = row5.CREATED_BY;

                        row5_HashRow.CREATED_ON = row5.CREATED_ON;

                        row5_HashRow.REQUEST_ORIGIN = row5.REQUEST_ORIGIN;

                        row5_HashRow.UPDATED_BY = row5.UPDATED_BY;

                        row5_HashRow.UPDATED_ON = row5.UPDATED_ON;

                        row5_HashRow.VERSION = row5.VERSION;

                        row5_HashRow.ABBREVIATION = row5.ABBREVIATION;

                        row5_HashRow.ACTIF = row5.ACTIF;

                        row5_HashRow.CODE = row5.CODE;

                        row5_HashRow.LIBELLE = row5.LIBELLE;

                        row5_HashRow.LIBELLE_ARABE = row5.LIBELLE_ARABE;

                        row5_HashRow.COTISATION_MENSUELLE = row5.COTISATION_MENSUELLE;

                        row5_HashRow.ECHANGE_CODE = row5.ECHANGE_CODE;

                        tHash_Lookup_row5.put(row5_HashRow);


                        tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */

                        /**
                         * [tAdvancedHash_row5 process_data_begin ] start
                         */


                        currentComponent = "tAdvancedHash_row5";


/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */

                        /**
                         * [tAdvancedHash_row5 process_data_end ] start
                         */


                        currentComponent = "tAdvancedHash_row5";


/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */


                        /**
                         * [tDBInput_5 process_data_end ] start
                         */


                        currentComponent = "tDBInput_5";


/**
 * [tDBInput_5 process_data_end ] stop
 */

                        /**
                         * [tDBInput_5 end ] start
                         */


                        currentComponent = "tDBInput_5";


                    }
                } finally {
                    if (rs_tDBInput_5 != null) {
                        rs_tDBInput_5.close();
                    }
                    if (stmt_tDBInput_5 != null) {
                        stmt_tDBInput_5.close();
                    }
                    if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

                        conn_tDBInput_5.close();

                        if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
                                && BundleUtils.inOSGi()) {
                            Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
                                    getMethod("checkedShutdown").invoke(null, (Object[]) null);
                        }

                    }
                }
                globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);


                ok_Hash.put("tDBInput_5", true);
                end_Hash.put("tDBInput_5", System.currentTimeMillis());


/**
 * [tDBInput_5 end ] stop
 */


                /**
                 * [tAdvancedHash_row5 end ] start
                 */


                currentComponent = "tAdvancedHash_row5";


                tHash_Lookup_row5.endPut();

                if (execStat) {
                    runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
                }


                ok_Hash.put("tAdvancedHash_row5", true);
                end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());


/**
 * [tAdvancedHash_row5 end ] stop
 */


            }//end the resume


        } catch (Exception e) {

            TalendException te = new TalendException(e, currentComponent, globalMap);

            throw te;
        } catch (Error error) {

            runStat.stopThreadStat();

            throw error;
        } finally {

            try {


                /**
                 * [tDBInput_5 finally ] start
                 */


                currentComponent = "tDBInput_5";


/**
 * [tDBInput_5 finally ] stop
 */


                /**
                 * [tAdvancedHash_row5 finally ] start
                 */


                currentComponent = "tAdvancedHash_row5";


/**
 * [tAdvancedHash_row5 finally ] stop
 */


            } catch (Exception e) {
                //ignore
            } catch (Error error) {
                //ignore
            }
            resourceMap = null;
        }


        globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
    }

    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        }

        ;
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status = "";


    public static void main(String[] args) {
        final InsertAdherentJob InsertAdherentJobClass = new InsertAdherentJob();

        int exitCode = InsertAdherentJobClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][]{{Integer.toString(exitCode)}};

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
        boolean hastBufferOutput = false;

        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
        // reset status
        status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));


        if (clientHost == null) {
            clientHost = defaultClientHost;
        }

        if (pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid == null) {
            rootPid = pid;
        }
        if (fatherPid == null) {
            fatherPid = pid;
        } else {
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = InsertAdherentJob.class.getClassLoader().getResourceAsStream("fm6/insert_adherent_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = InsertAdherentJob.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if (context != null && context.isEmpty()) {
                    defaultProps.load(inContext);
                    context = new ContextProperties(defaultProps);
                }

                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if (!context_param.isEmpty()) {
                context.putAll(context_param);
                //set types for params from parentJobs
                for (Object key : context_param.keySet()) {
                    String context_key = key.toString();
                    String context_type = context_param.getContextType(context_key);
                    context.setContextType(context_key, context_type);

                }
            }
            class ContextProcessing {
                private void processContext_0() {
                }

                public void processAllContext() {
                    processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (IOException ie) {
            System.err.println("Could not load context " + contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

        List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

        if (execStat) {
            try {
                runStat.openSocket(!isChildJob);
                runStat.setAllPID(rootPid, fatherPid, pid, jobName);
                runStat.startThreadStat(clientHost, portStats);
                runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
            } catch (IOException ioException) {
                ioException.printStackTrace();
            }
        }


        java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
        globalMap.put("concurrentHashMap", concurrentHashMap);


        long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        long endUsedMemory = 0;
        long end = 0;

        startTime = System.currentTimeMillis();


        this.globalResumeTicket = true;//to run tPreJob


        this.globalResumeTicket = false;//to run others jobs

        try {
            errorCode = null;
            tDBInput_1Process(globalMap);
            if (!"failure".equals(status)) {
                status = "end";
            }
        } catch (TalendException e_tDBInput_1) {
            globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

            e_tDBInput_1.printStackTrace();

        }

        this.globalResumeTicket = true;//to run tPostJob


        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end - startTime) + " milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : INSERT_ADHERENT");
        }


        if (execStat) {
            runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
            runStat.stopThreadStat();
        }
        int returnCode = 0;
        if (errorCode == null) {
            returnCode = status != null && status.equals("failure") ? 1 : 0;
        } else {
            returnCode = errorCode.intValue();
        }
        resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "", "" + returnCode, "", "", "");

        return returnCode;

    }

    // only for OSGi env
    public void destroy() {


    }


    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();


        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid == null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
                }

            }

        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid == null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
        } else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
            final int equal = arg.indexOf('=');
            final String key = arg.substring("--".length(), equal);
            System.setProperty(key, arg.substring(equal + 1));
        }
    }

    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
            {"\\\\", "\\"}, {"\\n", "\n"}, {"\\'", "\'"}, {"\\r", "\r"},
            {"\\f", "\f"}, {"\\b", "\b"}, {"\\t", "\t"}
    };

    private String replaceEscapeChars(String keyValue) {

        if (keyValue == null || ("").equals(keyValue.trim())) {
            return keyValue;
        }

        StringBuilder result = new StringBuilder();
        int currIndex = 0;
        while (currIndex < keyValue.length()) {
            int index = -1;
            // judege if the left string includes escape chars
            for (String[] strArray : escapeChars) {
                index = keyValue.indexOf(strArray[0], currIndex);
                if (index >= 0) {

                    result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
                    currIndex = index + strArray[0].length();
                    break;
                }
            }
            // if the left string doesn't include escape chars, append the left into the result
            if (index < 0) {
                result.append(keyValue.substring(currIndex));
                currIndex = currIndex + keyValue.length();
            }
        }

        return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     483784 characters generated by Talend Open Studio for Data Integration
 *     on the 11 juillet 2023 à 11:31:15 WEST
 ************************************************************************************************/