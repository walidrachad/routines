// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ma.fm6education.sga.exchange.jobs;

import routines.Numeric;
import routines.TalendString;
import routines.TalendDate;
import routines.system.*;
import routines.system.api.*;

import java.util.Date;
import java.util.List;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;


@SuppressWarnings("unused")

/**
 * Job: MENMES_INSERT_JAN23 Purpose: MENMES_INSERT_JAN23<br>
 * Description: MENMES_INSERT_JAN23 <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class MenMesInsertJob implements TalendJob {

	public static String url;
	public static String fileUrl;
	public static Boolean create;
	public static String username;
	public static String password;
	public static String port;
	public static String name;

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "MENMES_INSERT_JAN23";
	private final String projectName = "FM6";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, TalendDataSource> talendDataSources = new java.util.HashMap<String, TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final ByteArrayOutputStream baos = new ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				MenMesInsertJob.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(MenMesInsertJob.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class INSERT_MENStruct implements IPersistableRow<INSERT_MENStruct> {
    final static byte[] commonByteArrayLock_FM6_MENMES_INSERT_JAN23 = new byte[0];
    static byte[] commonByteArray_FM6_MENMES_INSERT_JAN23 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long ID;

				public long getID () {
					return this.ID;
				}
				
			    public String NUMPPR;

				public String getNUMPPR () {
					return this.NUMPPR;
				}
				
			    public String NOM;

				public String getNOM () {
					return this.NOM;
				}
				
			    public String CNIE;

				public String getCNIE () {
					return this.CNIE;
				}
				
			    public String CODELOCALITE;

				public String getCODELOCALITE () {
					return this.CODELOCALITE;
				}
				
			    public String ADRESSE;

				public String getADRESSE () {
					return this.ADRESSE;
				}
				
			    public String GENRE;

				public String getGENRE () {
					return this.GENRE;
				}
				
			    public String CODEPAYS;

				public String getCODEPAYS () {
					return this.CODEPAYS;
				}
				
			    public Date DATENAISSANCE;

				public Date getDATENAISSANCE () {
					return this.DATENAISSANCE;
				}
				
			    public Date DATERECRUTEMENT;

				public Date getDATERECRUTEMENT () {
					return this.DATERECRUTEMENT;
				}
				
			    public Date DATERACHAT;

				public Date getDATERACHAT () {
					return this.DATERACHAT;
				}
				
			    public Date DATELIMITE;

				public Date getDATELIMITE () {
					return this.DATELIMITE;
				}
				
			    public String CODEMOTIF;

				public String getCODEMOTIF () {
					return this.CODEMOTIF;
				}
				
			    public String MOTIFRADIATION;

				public String getMOTIFRADIATION () {
					return this.MOTIFRADIATION;
				}
				
			    public String IMPUTATION;

				public String getIMPUTATION () {
					return this.IMPUTATION;
				}
				
			    public String RESIDENCE;

				public String getRESIDENCE () {
					return this.RESIDENCE;
				}
				
			    public String POST;

				public String getPOST () {
					return this.POST;
				}
				
			    public String CODESERVICE;

				public String getCODESERVICE () {
					return this.CODESERVICE;
				}
				
			    public String POSITION;

				public String getPOSITION () {
					return this.POSITION;
				}
				
			    public String MODEREGLEMENT;

				public String getMODEREGLEMENT () {
					return this.MODEREGLEMENT;
				}
				
			    public Integer NUMCOMPTE;

				public Integer getNUMCOMPTE () {
					return this.NUMCOMPTE;
				}
				
			    public String BASEIMPOSABLE;

				public String getBASEIMPOSABLE () {
					return this.BASEIMPOSABLE;
				}
				
			    public String SAISISSABLE;

				public String getSAISISSABLE () {
					return this.SAISISSABLE;
				}
				
			    public Double BRUTANNUEL;

				public Double getBRUTANNUEL () {
					return this.BRUTANNUEL;
				}
				
			    public Double NETANNUEL;

				public Double getNETANNUEL () {
					return this.NETANNUEL;
				}
				
			    public Date DATEEFFETSITUATION;

				public Date getDATEEFFETSITUATION () {
					return this.DATEEFFETSITUATION;
				}
				
			    public Integer NUM_COLONNE;

				public Integer getNUM_COLONNE () {
					return this.NUM_COLONNE;
				}
				
			    public String STATUT;

				public String getSTATUT () {
					return this.STATUT;
				}
				
			    public String GRADE_REF;

				public String getGRADE_REF () {
					return this.GRADE_REF;
				}
				
			    public String ECHELON;

				public String getECHELON () {
					return this.ECHELON;
				}
				
			    public String POINT_INDICE;

				public String getPOINT_INDICE () {
					return this.POINT_INDICE;
				}
				
			    public String ZONE;

				public String getZONE () {
					return this.ZONE;
				}
				
			    public String FONCTION_REF;

				public String getFONCTION_REF () {
					return this.FONCTION_REF;
				}
				
			    public String POSITION_EN_CAS_DE_DETACHEMENT;

				public String getPOSITION_EN_CAS_DE_DETACHEMENT () {
					return this.POSITION_EN_CAS_DE_DETACHEMENT;
				}
				
			    public String CODE_DEPARTEMENT;

				public String getCODE_DEPARTEMENT () {
					return this.CODE_DEPARTEMENT;
				}
				
			    public String AVANCE;

				public String getAVANCE () {
					return this.AVANCE;
				}
				
			    public Double PRIME_ANCIENNETE;

				public Double getPRIME_ANCIENNETE () {
					return this.PRIME_ANCIENNETE;
				}
				
			    public String PENSION;

				public String getPENSION () {
					return this.PENSION;
				}
				
			    public String GRADE_PENSION;

				public String getGRADE_PENSION () {
					return this.GRADE_PENSION;
				}
				
			    public String ECHELON_PENSION;

				public String getECHELON_PENSION () {
					return this.ECHELON_PENSION;
				}
				
			    public String INDICE_PENSION;

				public String getINDICE_PENSION () {
					return this.INDICE_PENSION;
				}
				
			    public String SITUATION_FAMILIALE;

				public String getSITUATION_FAMILIALE () {
					return this.SITUATION_FAMILIALE;
				}
				
			    public Integer NOMBRE_ENFANT;

				public Integer getNOMBRE_ENFANT () {
					return this.NOMBRE_ENFANT;
				}
				
			    public Integer DEDUCTIONS;

				public Integer getDEDUCTIONS () {
					return this.DEDUCTIONS;
				}
				
			    public String CODE_MUTUELLE_SC;

				public String getCODE_MUTUELLE_SC () {
					return this.CODE_MUTUELLE_SC;
				}
				
			    public Integer TAUX_MUTUELLE_SC;

				public Integer getTAUX_MUTUELLE_SC () {
					return this.TAUX_MUTUELLE_SC;
				}
				
			    public String CODE_MUTUELLE_SM;

				public String getCODE_MUTUELLE_SM () {
					return this.CODE_MUTUELLE_SM;
				}
				
			    public Integer TAUX_MUTUELLE_SM;

				public Integer getTAUX_MUTUELLE_SM () {
					return this.TAUX_MUTUELLE_SM;
				}
				
			    public String ADMINISTRATION_ORIGINE;

				public String getADMINISTRATION_ORIGINE () {
					return this.ADMINISTRATION_ORIGINE;
				}
				
			    public Long ECHANGE_MAJ_FILE_ID;

				public Long getECHANGE_MAJ_FILE_ID () {
					return this.ECHANGE_MAJ_FILE_ID;
				}
				
			    public Long ECHANGE_MAJ_ID;

				public Long getECHANGE_MAJ_ID () {
					return this.ECHANGE_MAJ_ID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final INSERT_MENStruct other = (INSERT_MENStruct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(INSERT_MENStruct other) {

		other.ID = this.ID;
	            other.NUMPPR = this.NUMPPR;
	            other.NOM = this.NOM;
	            other.CNIE = this.CNIE;
	            other.CODELOCALITE = this.CODELOCALITE;
	            other.ADRESSE = this.ADRESSE;
	            other.GENRE = this.GENRE;
	            other.CODEPAYS = this.CODEPAYS;
	            other.DATENAISSANCE = this.DATENAISSANCE;
	            other.DATERECRUTEMENT = this.DATERECRUTEMENT;
	            other.DATERACHAT = this.DATERACHAT;
	            other.DATELIMITE = this.DATELIMITE;
	            other.CODEMOTIF = this.CODEMOTIF;
	            other.MOTIFRADIATION = this.MOTIFRADIATION;
	            other.IMPUTATION = this.IMPUTATION;
	            other.RESIDENCE = this.RESIDENCE;
	            other.POST = this.POST;
	            other.CODESERVICE = this.CODESERVICE;
	            other.POSITION = this.POSITION;
	            other.MODEREGLEMENT = this.MODEREGLEMENT;
	            other.NUMCOMPTE = this.NUMCOMPTE;
	            other.BASEIMPOSABLE = this.BASEIMPOSABLE;
	            other.SAISISSABLE = this.SAISISSABLE;
	            other.BRUTANNUEL = this.BRUTANNUEL;
	            other.NETANNUEL = this.NETANNUEL;
	            other.DATEEFFETSITUATION = this.DATEEFFETSITUATION;
	            other.NUM_COLONNE = this.NUM_COLONNE;
	            other.STATUT = this.STATUT;
	            other.GRADE_REF = this.GRADE_REF;
	            other.ECHELON = this.ECHELON;
	            other.POINT_INDICE = this.POINT_INDICE;
	            other.ZONE = this.ZONE;
	            other.FONCTION_REF = this.FONCTION_REF;
	            other.POSITION_EN_CAS_DE_DETACHEMENT = this.POSITION_EN_CAS_DE_DETACHEMENT;
	            other.CODE_DEPARTEMENT = this.CODE_DEPARTEMENT;
	            other.AVANCE = this.AVANCE;
	            other.PRIME_ANCIENNETE = this.PRIME_ANCIENNETE;
	            other.PENSION = this.PENSION;
	            other.GRADE_PENSION = this.GRADE_PENSION;
	            other.ECHELON_PENSION = this.ECHELON_PENSION;
	            other.INDICE_PENSION = this.INDICE_PENSION;
	            other.SITUATION_FAMILIALE = this.SITUATION_FAMILIALE;
	            other.NOMBRE_ENFANT = this.NOMBRE_ENFANT;
	            other.DEDUCTIONS = this.DEDUCTIONS;
	            other.CODE_MUTUELLE_SC = this.CODE_MUTUELLE_SC;
	            other.TAUX_MUTUELLE_SC = this.TAUX_MUTUELLE_SC;
	            other.CODE_MUTUELLE_SM = this.CODE_MUTUELLE_SM;
	            other.TAUX_MUTUELLE_SM = this.TAUX_MUTUELLE_SM;
	            other.ADMINISTRATION_ORIGINE = this.ADMINISTRATION_ORIGINE;
	            other.ECHANGE_MAJ_FILE_ID = this.ECHANGE_MAJ_FILE_ID;
	            other.ECHANGE_MAJ_ID = this.ECHANGE_MAJ_ID;
	            
	}

	public void copyKeysDataTo(INSERT_MENStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FM6_MENMES_INSERT_JAN23.length) {
				if(length < 1024 && commonByteArray_FM6_MENMES_INSERT_JAN23.length == 0) {
   					commonByteArray_FM6_MENMES_INSERT_JAN23 = new byte[1024];
				} else {
   					commonByteArray_FM6_MENMES_INSERT_JAN23 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FM6_MENMES_INSERT_JAN23, 0, length);
			strReturn = new String(commonByteArray_FM6_MENMES_INSERT_JAN23, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private Date readDate(ObjectInputStream dis) throws IOException{
		Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FM6_MENMES_INSERT_JAN23) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readLong();
					
					this.NUMPPR = readString(dis);
					
					this.NOM = readString(dis);
					
					this.CNIE = readString(dis);
					
					this.CODELOCALITE = readString(dis);
					
					this.ADRESSE = readString(dis);
					
					this.GENRE = readString(dis);
					
					this.CODEPAYS = readString(dis);
					
					this.DATENAISSANCE = readDate(dis);
					
					this.DATERECRUTEMENT = readDate(dis);
					
					this.DATERACHAT = readDate(dis);
					
					this.DATELIMITE = readDate(dis);
					
					this.CODEMOTIF = readString(dis);
					
					this.MOTIFRADIATION = readString(dis);
					
					this.IMPUTATION = readString(dis);
					
					this.RESIDENCE = readString(dis);
					
					this.POST = readString(dis);
					
					this.CODESERVICE = readString(dis);
					
					this.POSITION = readString(dis);
					
					this.MODEREGLEMENT = readString(dis);
					
						this.NUMCOMPTE = readInteger(dis);
					
					this.BASEIMPOSABLE = readString(dis);
					
					this.SAISISSABLE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.BRUTANNUEL = null;
           				} else {
           			    	this.BRUTANNUEL = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NETANNUEL = null;
           				} else {
           			    	this.NETANNUEL = dis.readDouble();
           				}
					
					this.DATEEFFETSITUATION = readDate(dis);
					
						this.NUM_COLONNE = readInteger(dis);
					
					this.STATUT = readString(dis);
					
					this.GRADE_REF = readString(dis);
					
					this.ECHELON = readString(dis);
					
					this.POINT_INDICE = readString(dis);
					
					this.ZONE = readString(dis);
					
					this.FONCTION_REF = readString(dis);
					
					this.POSITION_EN_CAS_DE_DETACHEMENT = readString(dis);
					
					this.CODE_DEPARTEMENT = readString(dis);
					
					this.AVANCE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRIME_ANCIENNETE = null;
           				} else {
           			    	this.PRIME_ANCIENNETE = dis.readDouble();
           				}
					
					this.PENSION = readString(dis);
					
					this.GRADE_PENSION = readString(dis);
					
					this.ECHELON_PENSION = readString(dis);
					
					this.INDICE_PENSION = readString(dis);
					
					this.SITUATION_FAMILIALE = readString(dis);
					
						this.NOMBRE_ENFANT = readInteger(dis);
					
						this.DEDUCTIONS = readInteger(dis);
					
					this.CODE_MUTUELLE_SC = readString(dis);
					
						this.TAUX_MUTUELLE_SC = readInteger(dis);
					
					this.CODE_MUTUELLE_SM = readString(dis);
					
						this.TAUX_MUTUELLE_SM = readInteger(dis);
					
					this.ADMINISTRATION_ORIGINE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ECHANGE_MAJ_FILE_ID = null;
           				} else {
           			    	this.ECHANGE_MAJ_FILE_ID = dis.readLong();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ECHANGE_MAJ_ID = null;
           				} else {
           			    	this.ECHANGE_MAJ_ID = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.ID);
					
					// String
				
						writeString(this.NUMPPR,dos);
					
					// String
				
						writeString(this.NOM,dos);
					
					// String
				
						writeString(this.CNIE,dos);
					
					// String
				
						writeString(this.CODELOCALITE,dos);
					
					// String
				
						writeString(this.ADRESSE,dos);
					
					// String
				
						writeString(this.GENRE,dos);
					
					// String
				
						writeString(this.CODEPAYS,dos);
					
					// java.util.Date
				
						writeDate(this.DATENAISSANCE,dos);
					
					// java.util.Date
				
						writeDate(this.DATERECRUTEMENT,dos);
					
					// java.util.Date
				
						writeDate(this.DATERACHAT,dos);
					
					// java.util.Date
				
						writeDate(this.DATELIMITE,dos);
					
					// String
				
						writeString(this.CODEMOTIF,dos);
					
					// String
				
						writeString(this.MOTIFRADIATION,dos);
					
					// String
				
						writeString(this.IMPUTATION,dos);
					
					// String
				
						writeString(this.RESIDENCE,dos);
					
					// String
				
						writeString(this.POST,dos);
					
					// String
				
						writeString(this.CODESERVICE,dos);
					
					// String
				
						writeString(this.POSITION,dos);
					
					// String
				
						writeString(this.MODEREGLEMENT,dos);
					
					// Integer
				
						writeInteger(this.NUMCOMPTE,dos);
					
					// String
				
						writeString(this.BASEIMPOSABLE,dos);
					
					// String
				
						writeString(this.SAISISSABLE,dos);
					
					// Double
				
						if(this.BRUTANNUEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.BRUTANNUEL);
		            	}
					
					// Double
				
						if(this.NETANNUEL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.NETANNUEL);
		            	}
					
					// java.util.Date
				
						writeDate(this.DATEEFFETSITUATION,dos);
					
					// Integer
				
						writeInteger(this.NUM_COLONNE,dos);
					
					// String
				
						writeString(this.STATUT,dos);
					
					// String
				
						writeString(this.GRADE_REF,dos);
					
					// String
				
						writeString(this.ECHELON,dos);
					
					// String
				
						writeString(this.POINT_INDICE,dos);
					
					// String
				
						writeString(this.ZONE,dos);
					
					// String
				
						writeString(this.FONCTION_REF,dos);
					
					// String
				
						writeString(this.POSITION_EN_CAS_DE_DETACHEMENT,dos);
					
					// String
				
						writeString(this.CODE_DEPARTEMENT,dos);
					
					// String
				
						writeString(this.AVANCE,dos);
					
					// Double
				
						if(this.PRIME_ANCIENNETE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRIME_ANCIENNETE);
		            	}
					
					// String
				
						writeString(this.PENSION,dos);
					
					// String
				
						writeString(this.GRADE_PENSION,dos);
					
					// String
				
						writeString(this.ECHELON_PENSION,dos);
					
					// String
				
						writeString(this.INDICE_PENSION,dos);
					
					// String
				
						writeString(this.SITUATION_FAMILIALE,dos);
					
					// Integer
				
						writeInteger(this.NOMBRE_ENFANT,dos);
					
					// Integer
				
						writeInteger(this.DEDUCTIONS,dos);
					
					// String
				
						writeString(this.CODE_MUTUELLE_SC,dos);
					
					// Integer
				
						writeInteger(this.TAUX_MUTUELLE_SC,dos);
					
					// String
				
						writeString(this.CODE_MUTUELLE_SM,dos);
					
					// Integer
				
						writeInteger(this.TAUX_MUTUELLE_SM,dos);
					
					// String
				
						writeString(this.ADMINISTRATION_ORIGINE,dos);
					
					// Long
				
						if(this.ECHANGE_MAJ_FILE_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.ECHANGE_MAJ_FILE_ID);
		            	}
					
					// Long
				
						if(this.ECHANGE_MAJ_ID == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.ECHANGE_MAJ_ID);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NUMPPR="+NUMPPR);
		sb.append(",NOM="+NOM);
		sb.append(",CNIE="+CNIE);
		sb.append(",CODELOCALITE="+CODELOCALITE);
		sb.append(",ADRESSE="+ADRESSE);
		sb.append(",GENRE="+GENRE);
		sb.append(",CODEPAYS="+CODEPAYS);
		sb.append(",DATENAISSANCE="+String.valueOf(DATENAISSANCE));
		sb.append(",DATERECRUTEMENT="+String.valueOf(DATERECRUTEMENT));
		sb.append(",DATERACHAT="+String.valueOf(DATERACHAT));
		sb.append(",DATELIMITE="+String.valueOf(DATELIMITE));
		sb.append(",CODEMOTIF="+CODEMOTIF);
		sb.append(",MOTIFRADIATION="+MOTIFRADIATION);
		sb.append(",IMPUTATION="+IMPUTATION);
		sb.append(",RESIDENCE="+RESIDENCE);
		sb.append(",POST="+POST);
		sb.append(",CODESERVICE="+CODESERVICE);
		sb.append(",POSITION="+POSITION);
		sb.append(",MODEREGLEMENT="+MODEREGLEMENT);
		sb.append(",NUMCOMPTE="+String.valueOf(NUMCOMPTE));
		sb.append(",BASEIMPOSABLE="+BASEIMPOSABLE);
		sb.append(",SAISISSABLE="+SAISISSABLE);
		sb.append(",BRUTANNUEL="+String.valueOf(BRUTANNUEL));
		sb.append(",NETANNUEL="+String.valueOf(NETANNUEL));
		sb.append(",DATEEFFETSITUATION="+String.valueOf(DATEEFFETSITUATION));
		sb.append(",NUM_COLONNE="+String.valueOf(NUM_COLONNE));
		sb.append(",STATUT="+STATUT);
		sb.append(",GRADE_REF="+GRADE_REF);
		sb.append(",ECHELON="+ECHELON);
		sb.append(",POINT_INDICE="+POINT_INDICE);
		sb.append(",ZONE="+ZONE);
		sb.append(",FONCTION_REF="+FONCTION_REF);
		sb.append(",POSITION_EN_CAS_DE_DETACHEMENT="+POSITION_EN_CAS_DE_DETACHEMENT);
		sb.append(",CODE_DEPARTEMENT="+CODE_DEPARTEMENT);
		sb.append(",AVANCE="+AVANCE);
		sb.append(",PRIME_ANCIENNETE="+String.valueOf(PRIME_ANCIENNETE));
		sb.append(",PENSION="+PENSION);
		sb.append(",GRADE_PENSION="+GRADE_PENSION);
		sb.append(",ECHELON_PENSION="+ECHELON_PENSION);
		sb.append(",INDICE_PENSION="+INDICE_PENSION);
		sb.append(",SITUATION_FAMILIALE="+SITUATION_FAMILIALE);
		sb.append(",NOMBRE_ENFANT="+String.valueOf(NOMBRE_ENFANT));
		sb.append(",DEDUCTIONS="+String.valueOf(DEDUCTIONS));
		sb.append(",CODE_MUTUELLE_SC="+CODE_MUTUELLE_SC);
		sb.append(",TAUX_MUTUELLE_SC="+String.valueOf(TAUX_MUTUELLE_SC));
		sb.append(",CODE_MUTUELLE_SM="+CODE_MUTUELLE_SM);
		sb.append(",TAUX_MUTUELLE_SM="+String.valueOf(TAUX_MUTUELLE_SM));
		sb.append(",ADMINISTRATION_ORIGINE="+ADMINISTRATION_ORIGINE);
		sb.append(",ECHANGE_MAJ_FILE_ID="+String.valueOf(ECHANGE_MAJ_FILE_ID));
		sb.append(",ECHANGE_MAJ_ID="+String.valueOf(ECHANGE_MAJ_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(INSERT_MENStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_FM6_MENMES_INSERT_JAN23 = new byte[0];
    static byte[] commonByteArray_FM6_MENMES_INSERT_JAN23 = new byte[0];

	
			    public Integer NUMPPR;

				public Integer getNUMPPR () {
					return this.NUMPPR;
				}
				
			    public String NOM;

				public String getNOM () {
					return this.NOM;
				}
				
			    public String CNIE;

				public String getCNIE () {
					return this.CNIE;
				}
				
			    public Integer CODELOCALITE;

				public Integer getCODELOCALITE () {
					return this.CODELOCALITE;
				}
				
			    public String ADRESSE;

				public String getADRESSE () {
					return this.ADRESSE;
				}
				
			    public Character GENRE;

				public Character getGENRE () {
					return this.GENRE;
				}
				
			    public String CODEPAYS;

				public String getCODEPAYS () {
					return this.CODEPAYS;
				}
				
			    public Date DATENAISSANCE;

				public Date getDATENAISSANCE () {
					return this.DATENAISSANCE;
				}
				
			    public Date DATERECRUTEMENT;

				public Date getDATERECRUTEMENT () {
					return this.DATERECRUTEMENT;
				}
				
			    public Date DATERACHAT;

				public Date getDATERACHAT () {
					return this.DATERACHAT;
				}
				
			    public Date DATELIMITE;

				public Date getDATELIMITE () {
					return this.DATELIMITE;
				}
				
			    public String CODEMOTIF;

				public String getCODEMOTIF () {
					return this.CODEMOTIF;
				}
				
			    public String MOTIFRADIATION;

				public String getMOTIFRADIATION () {
					return this.MOTIFRADIATION;
				}
				
			    public Integer IMPUTATION;

				public Integer getIMPUTATION () {
					return this.IMPUTATION;
				}
				
			    public String RESIDENCE;

				public String getRESIDENCE () {
					return this.RESIDENCE;
				}
				
			    public String POST;

				public String getPOST () {
					return this.POST;
				}
				
			    public String CODESERVICE;

				public String getCODESERVICE () {
					return this.CODESERVICE;
				}
				
			    public Integer POSITION;

				public Integer getPOSITION () {
					return this.POSITION;
				}
				
			    public Character MODEREGLEMENT;

				public Character getMODEREGLEMENT () {
					return this.MODEREGLEMENT;
				}
				
			    public Long NUMCOMPTE;

				public Long getNUMCOMPTE () {
					return this.NUMCOMPTE;
				}
				
			    public Integer BASEIMPOSABLE;

				public Integer getBASEIMPOSABLE () {
					return this.BASEIMPOSABLE;
				}
				
			    public Integer SAISISSABLE;

				public Integer getSAISISSABLE () {
					return this.SAISISSABLE;
				}
				
			    public Integer BRUTANNUEL;

				public Integer getBRUTANNUEL () {
					return this.BRUTANNUEL;
				}
				
			    public Integer NETANNUEL;

				public Integer getNETANNUEL () {
					return this.NETANNUEL;
				}
				
			    public Date DATEEFFETSITUATION;

				public Date getDATEEFFETSITUATION () {
					return this.DATEEFFETSITUATION;
				}
				
			    public String NUM_COLONNE;

				public String getNUM_COLONNE () {
					return this.NUM_COLONNE;
				}
				
			    public String STATUT;

				public String getSTATUT () {
					return this.STATUT;
				}
				
			    public Integer GRADE_REF;

				public Integer getGRADE_REF () {
					return this.GRADE_REF;
				}
				
			    public Integer ECHELON;

				public Integer getECHELON () {
					return this.ECHELON;
				}
				
			    public Integer POINT_INDICE;

				public Integer getPOINT_INDICE () {
					return this.POINT_INDICE;
				}
				
			    public Character ZONE;

				public Character getZONE () {
					return this.ZONE;
				}
				
			    public String FONCTION_REF;

				public String getFONCTION_REF () {
					return this.FONCTION_REF;
				}
				
			    public String POSITION_EN_CAS_DE_DETACHEMENT;

				public String getPOSITION_EN_CAS_DE_DETACHEMENT () {
					return this.POSITION_EN_CAS_DE_DETACHEMENT;
				}
				
			    public String CODE_DEPARTEMENT;

				public String getCODE_DEPARTEMENT () {
					return this.CODE_DEPARTEMENT;
				}
				
			    public String AVANCE;

				public String getAVANCE () {
					return this.AVANCE;
				}
				
			    public Double PRIME_ANCIENNETE;

				public Double getPRIME_ANCIENNETE () {
					return this.PRIME_ANCIENNETE;
				}
				
			    public String PENSION;

				public String getPENSION () {
					return this.PENSION;
				}
				
			    public String GRADE_PENSION;

				public String getGRADE_PENSION () {
					return this.GRADE_PENSION;
				}
				
			    public String ECHELON_PENSION;

				public String getECHELON_PENSION () {
					return this.ECHELON_PENSION;
				}
				
			    public String INDICE_PENSION;

				public String getINDICE_PENSION () {
					return this.INDICE_PENSION;
				}
				
			    public Character SITUATION_FAMILIALE;

				public Character getSITUATION_FAMILIALE () {
					return this.SITUATION_FAMILIALE;
				}
				
			    public Integer NOMBRE_ENFANT;

				public Integer getNOMBRE_ENFANT () {
					return this.NOMBRE_ENFANT;
				}
				
			    public String DEDUCTIONS;

				public String getDEDUCTIONS () {
					return this.DEDUCTIONS;
				}
				
			    public String CODE_MUTUELLE_SC;

				public String getCODE_MUTUELLE_SC () {
					return this.CODE_MUTUELLE_SC;
				}
				
			    public String TAUX_MUTUELLE_SC;

				public String getTAUX_MUTUELLE_SC () {
					return this.TAUX_MUTUELLE_SC;
				}
				
			    public String CODE_MUTUELLE_SM;

				public String getCODE_MUTUELLE_SM () {
					return this.CODE_MUTUELLE_SM;
				}
				
			    public String TAUX_MUTUELLE_SM;

				public String getTAUX_MUTUELLE_SM () {
					return this.TAUX_MUTUELLE_SM;
				}
				
			    public String ADMINISTRATION_ORIGINE;

				public String getADMINISTRATION_ORIGINE () {
					return this.ADMINISTRATION_ORIGINE;
				}
				
			    public Integer ECHANGE_MAJ_FILE_ID;

				public Integer getECHANGE_MAJ_FILE_ID () {
					return this.ECHANGE_MAJ_FILE_ID;
				}
				
			    public Integer ECHANGE_MAJ_ID;

				public Integer getECHANGE_MAJ_ID () {
					return this.ECHANGE_MAJ_ID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_FM6_MENMES_INSERT_JAN23.length) {
				if(length < 1024 && commonByteArray_FM6_MENMES_INSERT_JAN23.length == 0) {
   					commonByteArray_FM6_MENMES_INSERT_JAN23 = new byte[1024];
				} else {
   					commonByteArray_FM6_MENMES_INSERT_JAN23 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_FM6_MENMES_INSERT_JAN23, 0, length);
			strReturn = new String(commonByteArray_FM6_MENMES_INSERT_JAN23, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private Date readDate(ObjectInputStream dis) throws IOException{
		Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_FM6_MENMES_INSERT_JAN23) {

        	try {

        		int length = 0;
		
						this.NUMPPR = readInteger(dis);
					
					this.NOM = readString(dis);
					
					this.CNIE = readString(dis);
					
						this.CODELOCALITE = readInteger(dis);
					
					this.ADRESSE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.GENRE = null;
           				} else {
           			    	this.GENRE = dis.readChar();
           				}
					
					this.CODEPAYS = readString(dis);
					
					this.DATENAISSANCE = readDate(dis);
					
					this.DATERECRUTEMENT = readDate(dis);
					
					this.DATERACHAT = readDate(dis);
					
					this.DATELIMITE = readDate(dis);
					
					this.CODEMOTIF = readString(dis);
					
					this.MOTIFRADIATION = readString(dis);
					
						this.IMPUTATION = readInteger(dis);
					
					this.RESIDENCE = readString(dis);
					
					this.POST = readString(dis);
					
					this.CODESERVICE = readString(dis);
					
						this.POSITION = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MODEREGLEMENT = null;
           				} else {
           			    	this.MODEREGLEMENT = dis.readChar();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NUMCOMPTE = null;
           				} else {
           			    	this.NUMCOMPTE = dis.readLong();
           				}
					
						this.BASEIMPOSABLE = readInteger(dis);
					
						this.SAISISSABLE = readInteger(dis);
					
						this.BRUTANNUEL = readInteger(dis);
					
						this.NETANNUEL = readInteger(dis);
					
					this.DATEEFFETSITUATION = readDate(dis);
					
					this.NUM_COLONNE = readString(dis);
					
					this.STATUT = readString(dis);
					
						this.GRADE_REF = readInteger(dis);
					
						this.ECHELON = readInteger(dis);
					
						this.POINT_INDICE = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.ZONE = null;
           				} else {
           			    	this.ZONE = dis.readChar();
           				}
					
					this.FONCTION_REF = readString(dis);
					
					this.POSITION_EN_CAS_DE_DETACHEMENT = readString(dis);
					
					this.CODE_DEPARTEMENT = readString(dis);
					
					this.AVANCE = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PRIME_ANCIENNETE = null;
           				} else {
           			    	this.PRIME_ANCIENNETE = dis.readDouble();
           				}
					
					this.PENSION = readString(dis);
					
					this.GRADE_PENSION = readString(dis);
					
					this.ECHELON_PENSION = readString(dis);
					
					this.INDICE_PENSION = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SITUATION_FAMILIALE = null;
           				} else {
           			    	this.SITUATION_FAMILIALE = dis.readChar();
           				}
					
						this.NOMBRE_ENFANT = readInteger(dis);
					
					this.DEDUCTIONS = readString(dis);
					
					this.CODE_MUTUELLE_SC = readString(dis);
					
					this.TAUX_MUTUELLE_SC = readString(dis);
					
					this.CODE_MUTUELLE_SM = readString(dis);
					
					this.TAUX_MUTUELLE_SM = readString(dis);
					
					this.ADMINISTRATION_ORIGINE = readString(dis);
					
						this.ECHANGE_MAJ_FILE_ID = readInteger(dis);
					
						this.ECHANGE_MAJ_ID = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.NUMPPR,dos);
					
					// String
				
						writeString(this.NOM,dos);
					
					// String
				
						writeString(this.CNIE,dos);
					
					// Integer
				
						writeInteger(this.CODELOCALITE,dos);
					
					// String
				
						writeString(this.ADRESSE,dos);
					
					// Character
				
						if(this.GENRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.GENRE);
		            	}
					
					// String
				
						writeString(this.CODEPAYS,dos);
					
					// java.util.Date
				
						writeDate(this.DATENAISSANCE,dos);
					
					// java.util.Date
				
						writeDate(this.DATERECRUTEMENT,dos);
					
					// java.util.Date
				
						writeDate(this.DATERACHAT,dos);
					
					// java.util.Date
				
						writeDate(this.DATELIMITE,dos);
					
					// String
				
						writeString(this.CODEMOTIF,dos);
					
					// String
				
						writeString(this.MOTIFRADIATION,dos);
					
					// Integer
				
						writeInteger(this.IMPUTATION,dos);
					
					// String
				
						writeString(this.RESIDENCE,dos);
					
					// String
				
						writeString(this.POST,dos);
					
					// String
				
						writeString(this.CODESERVICE,dos);
					
					// Integer
				
						writeInteger(this.POSITION,dos);
					
					// Character
				
						if(this.MODEREGLEMENT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.MODEREGLEMENT);
		            	}
					
					// Long
				
						if(this.NUMCOMPTE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.NUMCOMPTE);
		            	}
					
					// Integer
				
						writeInteger(this.BASEIMPOSABLE,dos);
					
					// Integer
				
						writeInteger(this.SAISISSABLE,dos);
					
					// Integer
				
						writeInteger(this.BRUTANNUEL,dos);
					
					// Integer
				
						writeInteger(this.NETANNUEL,dos);
					
					// java.util.Date
				
						writeDate(this.DATEEFFETSITUATION,dos);
					
					// String
				
						writeString(this.NUM_COLONNE,dos);
					
					// String
				
						writeString(this.STATUT,dos);
					
					// Integer
				
						writeInteger(this.GRADE_REF,dos);
					
					// Integer
				
						writeInteger(this.ECHELON,dos);
					
					// Integer
				
						writeInteger(this.POINT_INDICE,dos);
					
					// Character
				
						if(this.ZONE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.ZONE);
		            	}
					
					// String
				
						writeString(this.FONCTION_REF,dos);
					
					// String
				
						writeString(this.POSITION_EN_CAS_DE_DETACHEMENT,dos);
					
					// String
				
						writeString(this.CODE_DEPARTEMENT,dos);
					
					// String
				
						writeString(this.AVANCE,dos);
					
					// Double
				
						if(this.PRIME_ANCIENNETE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.PRIME_ANCIENNETE);
		            	}
					
					// String
				
						writeString(this.PENSION,dos);
					
					// String
				
						writeString(this.GRADE_PENSION,dos);
					
					// String
				
						writeString(this.ECHELON_PENSION,dos);
					
					// String
				
						writeString(this.INDICE_PENSION,dos);
					
					// Character
				
						if(this.SITUATION_FAMILIALE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeChar(this.SITUATION_FAMILIALE);
		            	}
					
					// Integer
				
						writeInteger(this.NOMBRE_ENFANT,dos);
					
					// String
				
						writeString(this.DEDUCTIONS,dos);
					
					// String
				
						writeString(this.CODE_MUTUELLE_SC,dos);
					
					// String
				
						writeString(this.TAUX_MUTUELLE_SC,dos);
					
					// String
				
						writeString(this.CODE_MUTUELLE_SM,dos);
					
					// String
				
						writeString(this.TAUX_MUTUELLE_SM,dos);
					
					// String
				
						writeString(this.ADMINISTRATION_ORIGINE,dos);
					
					// Integer
				
						writeInteger(this.ECHANGE_MAJ_FILE_ID,dos);
					
					// Integer
				
						writeInteger(this.ECHANGE_MAJ_ID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMPPR="+String.valueOf(NUMPPR));
		sb.append(",NOM="+NOM);
		sb.append(",CNIE="+CNIE);
		sb.append(",CODELOCALITE="+String.valueOf(CODELOCALITE));
		sb.append(",ADRESSE="+ADRESSE);
		sb.append(",GENRE="+String.valueOf(GENRE));
		sb.append(",CODEPAYS="+CODEPAYS);
		sb.append(",DATENAISSANCE="+String.valueOf(DATENAISSANCE));
		sb.append(",DATERECRUTEMENT="+String.valueOf(DATERECRUTEMENT));
		sb.append(",DATERACHAT="+String.valueOf(DATERACHAT));
		sb.append(",DATELIMITE="+String.valueOf(DATELIMITE));
		sb.append(",CODEMOTIF="+CODEMOTIF);
		sb.append(",MOTIFRADIATION="+MOTIFRADIATION);
		sb.append(",IMPUTATION="+String.valueOf(IMPUTATION));
		sb.append(",RESIDENCE="+RESIDENCE);
		sb.append(",POST="+POST);
		sb.append(",CODESERVICE="+CODESERVICE);
		sb.append(",POSITION="+String.valueOf(POSITION));
		sb.append(",MODEREGLEMENT="+String.valueOf(MODEREGLEMENT));
		sb.append(",NUMCOMPTE="+String.valueOf(NUMCOMPTE));
		sb.append(",BASEIMPOSABLE="+String.valueOf(BASEIMPOSABLE));
		sb.append(",SAISISSABLE="+String.valueOf(SAISISSABLE));
		sb.append(",BRUTANNUEL="+String.valueOf(BRUTANNUEL));
		sb.append(",NETANNUEL="+String.valueOf(NETANNUEL));
		sb.append(",DATEEFFETSITUATION="+String.valueOf(DATEEFFETSITUATION));
		sb.append(",NUM_COLONNE="+NUM_COLONNE);
		sb.append(",STATUT="+STATUT);
		sb.append(",GRADE_REF="+String.valueOf(GRADE_REF));
		sb.append(",ECHELON="+String.valueOf(ECHELON));
		sb.append(",POINT_INDICE="+String.valueOf(POINT_INDICE));
		sb.append(",ZONE="+String.valueOf(ZONE));
		sb.append(",FONCTION_REF="+FONCTION_REF);
		sb.append(",POSITION_EN_CAS_DE_DETACHEMENT="+POSITION_EN_CAS_DE_DETACHEMENT);
		sb.append(",CODE_DEPARTEMENT="+CODE_DEPARTEMENT);
		sb.append(",AVANCE="+AVANCE);
		sb.append(",PRIME_ANCIENNETE="+String.valueOf(PRIME_ANCIENNETE));
		sb.append(",PENSION="+PENSION);
		sb.append(",GRADE_PENSION="+GRADE_PENSION);
		sb.append(",ECHELON_PENSION="+ECHELON_PENSION);
		sb.append(",INDICE_PENSION="+INDICE_PENSION);
		sb.append(",SITUATION_FAMILIALE="+String.valueOf(SITUATION_FAMILIALE));
		sb.append(",NOMBRE_ENFANT="+String.valueOf(NOMBRE_ENFANT));
		sb.append(",DEDUCTIONS="+DEDUCTIONS);
		sb.append(",CODE_MUTUELLE_SC="+CODE_MUTUELLE_SC);
		sb.append(",TAUX_MUTUELLE_SC="+TAUX_MUTUELLE_SC);
		sb.append(",CODE_MUTUELLE_SM="+CODE_MUTUELLE_SM);
		sb.append(",TAUX_MUTUELLE_SM="+TAUX_MUTUELLE_SM);
		sb.append(",ADMINISTRATION_ORIGINE="+ADMINISTRATION_ORIGINE);
		sb.append(",ECHANGE_MAJ_FILE_ID="+String.valueOf(ECHANGE_MAJ_FILE_ID));
		sb.append(",ECHANGE_MAJ_ID="+String.valueOf(ECHANGE_MAJ_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
INSERT_MENStruct INSERT_MEN = new INSERT_MENStruct();





	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"INSERT_MEN");
					}
				
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
    dbschema_tDBOutput_1 = "";
    String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";
	
    Class.forName(driverClass_tDBOutput_1);
    String port_tDBOutput_1 = port;
    String dbname_tDBOutput_1 = name ;
    String url_tDBOutput_1 = url ;
    if (!"".equals(port_tDBOutput_1)) {
    	url_tDBOutput_1 += ":" + port;
    }
    if (!"".equals(dbname_tDBOutput_1)) {
				url_tDBOutput_1 += "//" + name;
	
    }
    url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
    dbUser_tDBOutput_1 = username;

 
	final String decryptedPassword_tDBOutput_1 = password;
			//PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:KVdLiO5sfN1XrHWFn++lH/tHz6nIL5Og7vsv6Rd0IhJp3AzY3JdRIw==");

    String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;	
    conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1,dbUser_tDBOutput_1,dbPwd_tDBOutput_1);
	
		resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
	
        conn_tDBOutput_1.setAutoCommit(false);
        int commitEvery_tDBOutput_1 = 10000;
        int commitCounter_tDBOutput_1 = 0;

   int batchSize_tDBOutput_1 = 10000;
   int batchSizeCounter_tDBOutput_1=0;

if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "ADHERENT_TEMP";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "ADHERENT_TEMP";
}
	int count_tDBOutput_1=0;

				if(create){
					try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtClear_tDBOutput_1.executeUpdate("DELETE FROM [" + tableName_tDBOutput_1 + "]");
					}
				}
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([ID],[NUMPPR],[NOM],[CNIE],[CODELOCALITE],[ADRESSE],[GENRE],[CODEPAYS],[DATENAISSANCE],[DATERECRUTEMENT],[DATERACHAT],[DATELIMITE],[CODEMOTIF],[MOTIFRADIATION],[IMPUTATION],[RESIDENCE],[POST],[CODESERVICE],[POSITION],[MODEREGLEMENT],[NUMCOMPTE],[BASEIMPOSABLE],[SAISISSABLE],[BRUTANNUEL],[NETANNUEL],[DATEEFFETSITUATION],[NUM_COLONNE],[STATUT],[GRADE_REF],[ECHELON],[POINT_INDICE],[ZONE],[FONCTION_REF],[POSITION_EN_CAS_DE_DETACHEMENT],[CODE_DEPARTEMENT],[AVANCE],[PRIME_ANCIENNETE],[PENSION],[GRADE_PENSION],[ECHELON_PENSION],[INDICE_PENSION],[SITUATION_FAMILIALE],[NOMBRE_ENFANT],[DEDUCTIONS],[CODE_MUTUELLE_SC],[TAUX_MUTUELLE_SC],[CODE_MUTUELLE_SM],[TAUX_MUTUELLE_SM],[ADMINISTRATION_ORIGINE],[ECHANGE_MAJ_FILE_ID],[ECHANGE_MAJ_ID]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);


 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
INSERT_MENStruct INSERT_MEN_tmp = new INSERT_MENStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final RowState rowstate_tFileInputDelimited_1 = new RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = fileUrl;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
		                		new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"US-ASCII")), fieldSeparator_tFileInputDelimited_1[0]);
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
		        		}else{
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(new java.io.BufferedReader(new java.io.InputStreamReader(
				          	new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),"US-ASCII")), fieldSeparator_tFileInputDelimited_1[0]);
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(Exception e) {
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
	        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.NUMPPR = null;
					
							row1.NOM = null;
					
							row1.CNIE = null;
					
							row1.CODELOCALITE = null;
					
							row1.ADRESSE = null;
					
							row1.GENRE = null;
					
							row1.CODEPAYS = null;
					
							row1.DATENAISSANCE = null;
					
							row1.DATERECRUTEMENT = null;
					
							row1.DATERACHAT = null;
					
							row1.DATELIMITE = null;
					
							row1.CODEMOTIF = null;
					
							row1.MOTIFRADIATION = null;
					
							row1.IMPUTATION = null;
					
							row1.RESIDENCE = null;
					
							row1.POST = null;
					
							row1.CODESERVICE = null;
					
							row1.POSITION = null;
					
							row1.MODEREGLEMENT = null;
					
							row1.NUMCOMPTE = null;
					
							row1.BASEIMPOSABLE = null;
					
							row1.SAISISSABLE = null;
					
							row1.BRUTANNUEL = null;
					
							row1.NETANNUEL = null;
					
							row1.DATEEFFETSITUATION = null;
					
							row1.NUM_COLONNE = null;
					
							row1.STATUT = null;
					
							row1.GRADE_REF = null;
					
							row1.ECHELON = null;
					
							row1.POINT_INDICE = null;
					
							row1.ZONE = null;
					
							row1.FONCTION_REF = null;
					
							row1.POSITION_EN_CAS_DE_DETACHEMENT = null;
					
							row1.CODE_DEPARTEMENT = null;
					
							row1.AVANCE = null;
					
							row1.PRIME_ANCIENNETE = null;
					
							row1.PENSION = null;
					
							row1.GRADE_PENSION = null;
					
							row1.ECHELON_PENSION = null;
					
							row1.INDICE_PENSION = null;
					
							row1.SITUATION_FAMILIALE = null;
					
							row1.NOMBRE_ENFANT = null;
					
							row1.DEDUCTIONS = null;
					
							row1.CODE_MUTUELLE_SC = null;
					
							row1.TAUX_MUTUELLE_SC = null;
					
							row1.CODE_MUTUELLE_SM = null;
					
							row1.TAUX_MUTUELLE_SM = null;
					
							row1.ADMINISTRATION_ORIGINE = null;
					
							row1.ECHANGE_MAJ_FILE_ID = null;
					
							row1.ECHANGE_MAJ_ID = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.NUMPPR = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"NUMPPR", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.NUMPPR = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.NUMPPR = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.NOM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.NOM = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CNIE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CNIE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.CODELOCALITE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"CODELOCALITE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.CODELOCALITE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.CODELOCALITE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ADRESSE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ADRESSE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.GENRE = ParserUtils.parseTo_Character(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"GENRE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.GENRE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.GENRE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CODEPAYS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CODEPAYS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											row1.DATENAISSANCE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], "dd-MM-yyyy");
										
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DATENAISSANCE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DATENAISSANCE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DATENAISSANCE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											row1.DATERECRUTEMENT = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], "dd-MM-yyyy");
										
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DATERECRUTEMENT", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DATERECRUTEMENT = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DATERECRUTEMENT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											row1.DATERACHAT = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], "dd-MM-yyyy");
										
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DATERACHAT", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DATERACHAT = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DATERACHAT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											row1.DATELIMITE = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], "dd-MM-yyyy");
										
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DATELIMITE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DATELIMITE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DATELIMITE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CODEMOTIF = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CODEMOTIF = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.MOTIFRADIATION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.MOTIFRADIATION = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.IMPUTATION = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"IMPUTATION", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.IMPUTATION = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.IMPUTATION = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.RESIDENCE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.RESIDENCE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.POST = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.POST = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CODESERVICE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CODESERVICE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.POSITION = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"POSITION", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.POSITION = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.POSITION = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.MODEREGLEMENT = ParserUtils.parseTo_Character(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"MODEREGLEMENT", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.MODEREGLEMENT = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.MODEREGLEMENT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.NUMCOMPTE = ParserUtils.parseTo_Long(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"NUMCOMPTE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.NUMCOMPTE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.NUMCOMPTE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.BASEIMPOSABLE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"BASEIMPOSABLE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.BASEIMPOSABLE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.BASEIMPOSABLE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.SAISISSABLE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SAISISSABLE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.SAISISSABLE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.SAISISSABLE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.BRUTANNUEL = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"BRUTANNUEL", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.BRUTANNUEL = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.BRUTANNUEL = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.NETANNUEL = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"NETANNUEL", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.NETANNUEL = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.NETANNUEL = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
											row1.DATEEFFETSITUATION = ParserUtils.parseTo_Date(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], "dd-MM-yyyy");
										
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"DATEEFFETSITUATION", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.DATEEFFETSITUATION = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.DATEEFFETSITUATION = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.NUM_COLONNE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.NUM_COLONNE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.STATUT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.STATUT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.GRADE_REF = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"GRADE_REF", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.GRADE_REF = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.GRADE_REF = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.ECHELON = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ECHELON", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.ECHELON = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.ECHELON = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.POINT_INDICE = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"POINT_INDICE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.POINT_INDICE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.POINT_INDICE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.ZONE = ParserUtils.parseTo_Character(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ZONE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.ZONE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.ZONE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FONCTION_REF = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FONCTION_REF = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.POSITION_EN_CAS_DE_DETACHEMENT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.POSITION_EN_CAS_DE_DETACHEMENT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 33;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CODE_DEPARTEMENT = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CODE_DEPARTEMENT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 34;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.AVANCE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.AVANCE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 35;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.PRIME_ANCIENNETE = ParserUtils.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"PRIME_ANCIENNETE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.PRIME_ANCIENNETE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.PRIME_ANCIENNETE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 36;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.PENSION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.PENSION = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 37;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.GRADE_PENSION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.GRADE_PENSION = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 38;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ECHELON_PENSION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ECHELON_PENSION = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 39;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.INDICE_PENSION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.INDICE_PENSION = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 40;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.SITUATION_FAMILIALE = ParserUtils.parseTo_Character(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"SITUATION_FAMILIALE", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.SITUATION_FAMILIALE = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.SITUATION_FAMILIALE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 41;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.NOMBRE_ENFANT = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"NOMBRE_ENFANT", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.NOMBRE_ENFANT = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.NOMBRE_ENFANT = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 42;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DEDUCTIONS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DEDUCTIONS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 43;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CODE_MUTUELLE_SC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CODE_MUTUELLE_SC = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 44;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TAUX_MUTUELLE_SC = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TAUX_MUTUELLE_SC = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 45;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CODE_MUTUELLE_SM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CODE_MUTUELLE_SM = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 46;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TAUX_MUTUELLE_SM = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TAUX_MUTUELLE_SM = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 47;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.ADMINISTRATION_ORIGINE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.ADMINISTRATION_ORIGINE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 48;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.ECHANGE_MAJ_FILE_ID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ECHANGE_MAJ_FILE_ID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.ECHANGE_MAJ_FILE_ID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.ECHANGE_MAJ_FILE_ID = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 49;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.ECHANGE_MAJ_ID = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ECHANGE_MAJ_ID", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.ECHANGE_MAJ_ID = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.ECHANGE_MAJ_ID = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (Exception e) {
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

			


		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

INSERT_MEN = null;


// # Output table : 'INSERT_MEN'
INSERT_MEN_tmp.ID = Numeric.sequence("seq", 1, 1);
INSERT_MEN_tmp.NUMPPR = (((row1.NUMPPR ) == null) ? null : (TypeConvert.Integer2String(row1.NUMPPR )));
INSERT_MEN_tmp.NOM = row1.NOM ;
INSERT_MEN_tmp.CNIE = row1.CNIE ;
INSERT_MEN_tmp.CODELOCALITE = (((row1.CODELOCALITE) == null) ? null : (TypeConvert.Integer2String(row1.CODELOCALITE)));
INSERT_MEN_tmp.ADRESSE = row1.ADRESSE ;
INSERT_MEN_tmp.GENRE = (((row1.GENRE ) == null) ? null : (TypeConvert.Character2String(row1.GENRE )));
INSERT_MEN_tmp.CODEPAYS = row1.CODEPAYS ;
INSERT_MEN_tmp.DATENAISSANCE = row1.DATENAISSANCE != null ? row1.DATENAISSANCE : null;
INSERT_MEN_tmp.DATERECRUTEMENT = row1.DATERECRUTEMENT  != null ? row1.DATERECRUTEMENT : null;
INSERT_MEN_tmp.DATERACHAT = row1.DATERACHAT != null ? row1.DATERACHAT :null ;
INSERT_MEN_tmp.DATELIMITE = row1.DATELIMITE != null ? row1.DATELIMITE : null;
INSERT_MEN_tmp.CODEMOTIF = row1.CODEMOTIF;
INSERT_MEN_tmp.MOTIFRADIATION = row1.MOTIFRADIATION;
INSERT_MEN_tmp.IMPUTATION = (((row1.IMPUTATION) == null) ? null : (TypeConvert.Integer2String(row1.IMPUTATION)));
INSERT_MEN_tmp.RESIDENCE = row1.RESIDENCE ;
INSERT_MEN_tmp.POST = row1.POST ;
INSERT_MEN_tmp.CODESERVICE = row1.CODESERVICE;
INSERT_MEN_tmp.POSITION = (((row1.POSITION ) == null) ? null : (TypeConvert.Integer2String(row1.POSITION )));
INSERT_MEN_tmp.MODEREGLEMENT = (((row1.MODEREGLEMENT) == null) ? null : (TypeConvert.Character2String(row1.MODEREGLEMENT)));
INSERT_MEN_tmp.NUMCOMPTE = (((row1.NUMCOMPTE) == null) ? null : (TypeConvert.Long2Integer(row1.NUMCOMPTE)));
INSERT_MEN_tmp.BASEIMPOSABLE = (((row1.BASEIMPOSABLE) == null) ? null : (TypeConvert.Integer2String(row1.BASEIMPOSABLE)));
INSERT_MEN_tmp.SAISISSABLE = (((row1.SAISISSABLE ) == null) ? null : (TypeConvert.Integer2String(row1.SAISISSABLE )));
INSERT_MEN_tmp.BRUTANNUEL = (((row1.BRUTANNUEL) == null) ? null : (TypeConvert.Integer2Double(row1.BRUTANNUEL)));
INSERT_MEN_tmp.NETANNUEL = (((row1.NETANNUEL) == null) ? null : (TypeConvert.Integer2Double(row1.NETANNUEL)));
INSERT_MEN_tmp.DATEEFFETSITUATION = row1.DATEEFFETSITUATION != null ? row1.DATEEFFETSITUATION : null;
INSERT_MEN_tmp.NUM_COLONNE = Numeric.sequence("seq", 1, 1);
INSERT_MEN_tmp.STATUT = row1.STATUT ;
INSERT_MEN_tmp.GRADE_REF = (((row1.GRADE_REF ) == null) ? null : (TypeConvert.Integer2String(row1.GRADE_REF )));
INSERT_MEN_tmp.ECHELON = (((row1.ECHELON ) == null) ? null : (TypeConvert.Integer2String(row1.ECHELON )));
INSERT_MEN_tmp.POINT_INDICE = (((row1.POINT_INDICE ) == null) ? null : (TypeConvert.Integer2String(row1.POINT_INDICE )));
INSERT_MEN_tmp.ZONE = (((row1.ZONE ) == null) ? null : (TypeConvert.Character2String(row1.ZONE )));
INSERT_MEN_tmp.FONCTION_REF = row1.FONCTION_REF ;
INSERT_MEN_tmp.POSITION_EN_CAS_DE_DETACHEMENT = row1.POSITION_EN_CAS_DE_DETACHEMENT ;
INSERT_MEN_tmp.CODE_DEPARTEMENT = row1.CODE_DEPARTEMENT ;
INSERT_MEN_tmp.AVANCE = row1.AVANCE ;
INSERT_MEN_tmp.PRIME_ANCIENNETE = row1.PRIME_ANCIENNETE ;
INSERT_MEN_tmp.PENSION = row1.PENSION ;
INSERT_MEN_tmp.GRADE_PENSION = row1.GRADE_PENSION ;
INSERT_MEN_tmp.ECHELON_PENSION = row1.ECHELON_PENSION ;
INSERT_MEN_tmp.INDICE_PENSION = row1.INDICE_PENSION ;
INSERT_MEN_tmp.SITUATION_FAMILIALE = (((row1.SITUATION_FAMILIALE ) == null) ? null : (TypeConvert.Character2String(row1.SITUATION_FAMILIALE )));
INSERT_MEN_tmp.NOMBRE_ENFANT = row1.NOMBRE_ENFANT;
INSERT_MEN_tmp.DEDUCTIONS = null;
INSERT_MEN_tmp.CODE_MUTUELLE_SC = row1.CODE_MUTUELLE_SC ;
INSERT_MEN_tmp.TAUX_MUTUELLE_SC = null;
INSERT_MEN_tmp.CODE_MUTUELLE_SM = row1.CODE_MUTUELLE_SM ;
INSERT_MEN_tmp.TAUX_MUTUELLE_SM = null;
INSERT_MEN_tmp.ADMINISTRATION_ORIGINE = row1.ADMINISTRATION_ORIGINE ;
INSERT_MEN_tmp.ECHANGE_MAJ_FILE_ID = (((row1.ECHANGE_MAJ_FILE_ID ) == null) ? null : (TypeConvert.Integer2Long(row1.ECHANGE_MAJ_FILE_ID )));
INSERT_MEN_tmp.ECHANGE_MAJ_ID = (((row1.ECHANGE_MAJ_ID ) == null) ? null : (TypeConvert.Integer2Long(row1.ECHANGE_MAJ_ID )));
INSERT_MEN = INSERT_MEN_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "INSERT_MEN"
if(INSERT_MEN != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"INSERT_MEN");
					}
					



        whetherReject_tDBOutput_1 = false;
                    pstmt_tDBOutput_1.setLong(1, INSERT_MEN.ID);

                    if(INSERT_MEN.NUMPPR == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(2, INSERT_MEN.NUMPPR);
}

                    if(INSERT_MEN.NOM == null) {
pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(3, INSERT_MEN.NOM);
}

                    if(INSERT_MEN.CNIE == null) {
pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(4, INSERT_MEN.CNIE);
}

                    if(INSERT_MEN.CODELOCALITE == null) {
pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(5, INSERT_MEN.CODELOCALITE);
}

                    if(INSERT_MEN.ADRESSE == null) {
pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(6, INSERT_MEN.ADRESSE);
}

                    if(INSERT_MEN.GENRE == null) {
pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(7, INSERT_MEN.GENRE);
}

                    if(INSERT_MEN.CODEPAYS == null) {
pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(8, INSERT_MEN.CODEPAYS);
}

                    if(INSERT_MEN.DATENAISSANCE != null) {
pstmt_tDBOutput_1.setTimestamp(9, new java.sql.Timestamp(INSERT_MEN.DATENAISSANCE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(9, java.sql.Types.DATE);
}

                    if(INSERT_MEN.DATERECRUTEMENT != null) {
pstmt_tDBOutput_1.setTimestamp(10, new java.sql.Timestamp(INSERT_MEN.DATERECRUTEMENT.getTime()));
} else {
pstmt_tDBOutput_1.setNull(10, java.sql.Types.DATE);
}

                    if(INSERT_MEN.DATERACHAT != null) {
pstmt_tDBOutput_1.setTimestamp(11, new java.sql.Timestamp(INSERT_MEN.DATERACHAT.getTime()));
} else {
pstmt_tDBOutput_1.setNull(11, java.sql.Types.DATE);
}

                    if(INSERT_MEN.DATELIMITE != null) {
pstmt_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(INSERT_MEN.DATELIMITE.getTime()));
} else {
pstmt_tDBOutput_1.setNull(12, java.sql.Types.DATE);
}

                    if(INSERT_MEN.CODEMOTIF == null) {
pstmt_tDBOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(13, INSERT_MEN.CODEMOTIF);
}

                    if(INSERT_MEN.MOTIFRADIATION == null) {
pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(14, INSERT_MEN.MOTIFRADIATION);
}

                    if(INSERT_MEN.IMPUTATION == null) {
pstmt_tDBOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(15, INSERT_MEN.IMPUTATION);
}

                    if(INSERT_MEN.RESIDENCE == null) {
pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(16, INSERT_MEN.RESIDENCE);
}

                    if(INSERT_MEN.POST == null) {
pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(17, INSERT_MEN.POST);
}

                    if(INSERT_MEN.CODESERVICE == null) {
pstmt_tDBOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(18, INSERT_MEN.CODESERVICE);
}

                    if(INSERT_MEN.POSITION == null) {
pstmt_tDBOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(19, INSERT_MEN.POSITION);
}

                    if(INSERT_MEN.MODEREGLEMENT == null) {
pstmt_tDBOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(20, INSERT_MEN.MODEREGLEMENT);
}

                    if(INSERT_MEN.NUMCOMPTE == null) {
pstmt_tDBOutput_1.setNull(21, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(21, INSERT_MEN.NUMCOMPTE);
}

                    if(INSERT_MEN.BASEIMPOSABLE == null) {
pstmt_tDBOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(22, INSERT_MEN.BASEIMPOSABLE);
}

                    if(INSERT_MEN.SAISISSABLE == null) {
pstmt_tDBOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(23, INSERT_MEN.SAISISSABLE);
}

                    if(INSERT_MEN.BRUTANNUEL == null) {
pstmt_tDBOutput_1.setNull(24, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(24, INSERT_MEN.BRUTANNUEL);
}

                    if(INSERT_MEN.NETANNUEL == null) {
pstmt_tDBOutput_1.setNull(25, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(25, INSERT_MEN.NETANNUEL);
}

                    if(INSERT_MEN.DATEEFFETSITUATION != null) {
pstmt_tDBOutput_1.setTimestamp(26, new java.sql.Timestamp(INSERT_MEN.DATEEFFETSITUATION.getTime()));
} else {
pstmt_tDBOutput_1.setNull(26, java.sql.Types.DATE);
}

                    if(INSERT_MEN.NUM_COLONNE == null) {
pstmt_tDBOutput_1.setNull(27, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(27, INSERT_MEN.NUM_COLONNE);
}

                    if(INSERT_MEN.STATUT == null) {
pstmt_tDBOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(28, INSERT_MEN.STATUT);
}

                    if(INSERT_MEN.GRADE_REF == null) {
pstmt_tDBOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(29, INSERT_MEN.GRADE_REF);
}

                    if(INSERT_MEN.ECHELON == null) {
pstmt_tDBOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(30, INSERT_MEN.ECHELON);
}

                    if(INSERT_MEN.POINT_INDICE == null) {
pstmt_tDBOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(31, INSERT_MEN.POINT_INDICE);
}

                    if(INSERT_MEN.ZONE == null) {
pstmt_tDBOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(32, INSERT_MEN.ZONE);
}

                    if(INSERT_MEN.FONCTION_REF == null) {
pstmt_tDBOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(33, INSERT_MEN.FONCTION_REF);
}

                    if(INSERT_MEN.POSITION_EN_CAS_DE_DETACHEMENT == null) {
pstmt_tDBOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(34, INSERT_MEN.POSITION_EN_CAS_DE_DETACHEMENT);
}

                    if(INSERT_MEN.CODE_DEPARTEMENT == null) {
pstmt_tDBOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(35, INSERT_MEN.CODE_DEPARTEMENT);
}

                    if(INSERT_MEN.AVANCE == null) {
pstmt_tDBOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(36, INSERT_MEN.AVANCE);
}

                    if(INSERT_MEN.PRIME_ANCIENNETE == null) {
pstmt_tDBOutput_1.setNull(37, java.sql.Types.DOUBLE);
} else {pstmt_tDBOutput_1.setDouble(37, INSERT_MEN.PRIME_ANCIENNETE);
}

                    if(INSERT_MEN.PENSION == null) {
pstmt_tDBOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(38, INSERT_MEN.PENSION);
}

                    if(INSERT_MEN.GRADE_PENSION == null) {
pstmt_tDBOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(39, INSERT_MEN.GRADE_PENSION);
}

                    if(INSERT_MEN.ECHELON_PENSION == null) {
pstmt_tDBOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(40, INSERT_MEN.ECHELON_PENSION);
}

                    if(INSERT_MEN.INDICE_PENSION == null) {
pstmt_tDBOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(41, INSERT_MEN.INDICE_PENSION);
}

                    if(INSERT_MEN.SITUATION_FAMILIALE == null) {
pstmt_tDBOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(42, INSERT_MEN.SITUATION_FAMILIALE);
}

                    if(INSERT_MEN.NOMBRE_ENFANT == null) {
pstmt_tDBOutput_1.setNull(43, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(43, INSERT_MEN.NOMBRE_ENFANT);
}

                    if(INSERT_MEN.DEDUCTIONS == null) {
pstmt_tDBOutput_1.setNull(44, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(44, INSERT_MEN.DEDUCTIONS);
}

                    if(INSERT_MEN.CODE_MUTUELLE_SC == null) {
pstmt_tDBOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(45, INSERT_MEN.CODE_MUTUELLE_SC);
}

                    if(INSERT_MEN.TAUX_MUTUELLE_SC == null) {
pstmt_tDBOutput_1.setNull(46, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(46, INSERT_MEN.TAUX_MUTUELLE_SC);
}

                    if(INSERT_MEN.CODE_MUTUELLE_SM == null) {
pstmt_tDBOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(47, INSERT_MEN.CODE_MUTUELLE_SM);
}

                    if(INSERT_MEN.TAUX_MUTUELLE_SM == null) {
pstmt_tDBOutput_1.setNull(48, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(48, INSERT_MEN.TAUX_MUTUELLE_SM);
}

                    if(INSERT_MEN.ADMINISTRATION_ORIGINE == null) {
pstmt_tDBOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmt_tDBOutput_1.setString(49, INSERT_MEN.ADMINISTRATION_ORIGINE);
}

                    if(INSERT_MEN.ECHANGE_MAJ_FILE_ID == null) {
pstmt_tDBOutput_1.setNull(50, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setLong(50, INSERT_MEN.ECHANGE_MAJ_FILE_ID);
}

                    if(INSERT_MEN.ECHANGE_MAJ_ID == null) {
pstmt_tDBOutput_1.setNull(51, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setLong(51, INSERT_MEN.ECHANGE_MAJ_ID);
}


        		pstmt_tDBOutput_1.addBatch();
        		nb_line_tDBOutput_1++;
        		
    		 
    		  batchSizeCounter_tDBOutput_1++;
    		
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }
    		if ((batchSize_tDBOutput_1 > 0) && (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
    		
    		            
            	    		insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1().limitBytePart1(insertedCount_tDBOutput_1,pstmt_tDBOutput_1);
            	    	
    			
			    batchSizeCounter_tDBOutput_1 = 0;
			}
    		

    	////////////commit every////////////
    			
    		    commitCounter_tDBOutput_1++;
                if(commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
                if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {
    		            
            	    		insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1().limitBytePart1(insertedCount_tDBOutput_1,pstmt_tDBOutput_1);
            	    	
            	batchSizeCounter_tDBOutput_1 = 0;
            	}
                	
                	conn_tDBOutput_1.commit();
            		
                	commitCounter_tDBOutput_1=0;
                }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "INSERT_MEN"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



                try {
						int countSum_tDBOutput_1 = 0;
						if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {
							
							for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
								if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
									break;
								}
								countSum_tDBOutput_1 += countEach_tDBOutput_1;
							}
							
						}
            	    	
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    		insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
            	    	
                		System.err.println(e.getMessage());
                	
            	}
        if(pstmt_tDBOutput_1 != null) {
			
				pstmt_tDBOutput_1.close();
				resourceMap.remove("pstmt_tDBOutput_1");
			
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);
            conn_tDBOutput_1.commit();
			
        conn_tDBOutput_1 .close();
        resourceMap.put("finish_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"INSERT_MEN");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(Exception e){
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(Error error){
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_1") == null){
            java.sql.Connection ctn_tDBOutput_1 = null;
            if((ctn_tDBOutput_1 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_1")) != null){
                try {
                    ctn_tDBOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_1) {
                    String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :" + sqlEx_tDBOutput_1.getMessage();
                    System.err.println(errorMessage_tDBOutput_1);
                }
            }
        }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */






				}catch(Exception e){
					//ignore
				}catch(Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final MenMesInsertJob MENMES_INSERT_JAN23Class = new MenMesInsertJob();

        int exitCode = MENMES_INSERT_JAN23Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = MenMesInsertJob.class.getClassLoader().getResourceAsStream("fm6/menmes_insert_jan23_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = MenMesInsertJob.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : MENMES_INSERT_JAN23");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     149228 characters generated by Talend Open Studio for Data Integration 
 *     on the 11 juillet 2023 à 10:17:06 WEST
 ************************************************************************************************/